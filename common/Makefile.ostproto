#############################################################################
# Makefile for building: libostproto.a
# Generated by qmake (2.01a) (Qt 4.8.1) on: Thu May 1 20:26:28 2014
# Project:  ostproto.pro
# Template: lib
# Command: /usr/bin/qmake -spec /usr/share/qt4/mkspecs/linux-g++ -o Makefile.ostproto ostproto.pro
#############################################################################

####### Compiler, tools and options

CC            = gcc
CXX           = g++
DEFINES       = -DQT_WEBKIT -DQT_NO_DEBUG -DQT_SCRIPT_LIB -DQT_XML_LIB -DQT_GUI_LIB -DQT_NETWORK_LIB -DQT_CORE_LIB -DQT_SHARED
CFLAGS        = -pipe -O2 -fPIC -D_REENTRANT -Wall -W $(DEFINES)
CXXFLAGS      = -pipe -O2 -fPIC -D_REENTRANT -Wall -W $(DEFINES)
INCPATH       = -I/usr/share/qt4/mkspecs/linux-g++ -I. -I/usr/include/qt4/QtCore -I/usr/include/qt4/QtNetwork -I/usr/include/qt4/QtGui -I/usr/include/qt4/QtXml -I/usr/include/qt4/QtScript -I/usr/include/qt4 -I../extra/qhexedit2/src -I. -I.
AR            = ar cqs
RANLIB        = 
QMAKE         = /usr/bin/qmake
TAR           = tar -cf
COMPRESS      = gzip -9f
COPY          = cp -f
SED           = sed
COPY_FILE     = $(COPY)
COPY_DIR      = $(COPY) -r
STRIP         = strip
INSTALL_FILE  = install -m 644 -p
INSTALL_DIR   = $(COPY_DIR)
INSTALL_PROGRAM = install -m 755 -p
DEL_FILE      = rm -f
SYMLINK       = ln -f -s
DEL_DIR       = rmdir
MOVE          = mv -f
CHK_DIR_EXISTS= test -d
MKDIR         = mkdir -p

####### Output directory

OBJECTS_DIR   = ./

####### Files

SOURCES       = ostprotolib.cpp \
		abstractprotocol.cpp \
		crc32c.cpp \
		abstractfileformat.cpp \
		fileformat.cpp \
		pcapfileformat.cpp \
		pdmlfileformat.cpp \
		pdmlprotocol.cpp \
		pdmlprotocols.cpp \
		pdmlreader.cpp \
		protocolmanager.cpp \
		protocollist.cpp \
		protocollistiterator.cpp \
		streambase.cpp \
		mac.cpp \
		payload.cpp \
		eth2.cpp \
		dot3.cpp \
		llc.cpp \
		stp.cpp \
		qinq.cpp \
		lacp.cpp \
		lldp_tlv.cpp \
		dcbx.cpp \
		snap.cpp \
		vlan.cpp \
		svlan.cpp \
		arp.cpp \
		ip4.cpp \
		ip6.cpp \
		icmp.cpp \
		gmp.cpp \
		igmp.cpp \
		mld.cpp \
		tcp.cpp \
		udp.cpp \
		textproto.cpp \
		userscript.cpp \
		hexdump.cpp \
		sample.cpp protocol.pb.cc \
		fileformat.pb.cc \
		mac.pb.cc \
		payload.pb.cc \
		eth2.pb.cc \
		dot3.pb.cc \
		llc.pb.cc \
		stp.pb.cc \
		qinq.pb.cc \
		lacp.pb.cc \
		lldp_tlv.pb.cc \
		dcbx.pb.cc \
		snap.pb.cc \
		dot2llc.pb.cc \
		dot2snap.pb.cc \
		vlan.pb.cc \
		svlan.pb.cc \
		vlanstack.pb.cc \
		arp.pb.cc \
		ip4.pb.cc \
		ip6.pb.cc \
		ip6over4.pb.cc \
		ip4over6.pb.cc \
		ip4over4.pb.cc \
		ip6over6.pb.cc \
		icmp.pb.cc \
		gmp.pb.cc \
		igmp.pb.cc \
		mld.pb.cc \
		tcp.pb.cc \
		udp.pb.cc \
		textproto.pb.cc \
		userscript.pb.cc \
		hexdump.pb.cc \
		sample.pb.cc \
		moc_abstractfileformat.cpp \
		moc_pdmlreader.cpp \
		moc_mac.cpp \
		moc_payload.cpp \
		moc_eth2.cpp \
		moc_stp.cpp \
		moc_qinq.cpp \
		moc_lacp.cpp \
		moc_lldp_tlv.cpp \
		moc_dcbx.cpp \
		moc_dot3.cpp \
		moc_llc.cpp \
		moc_snap.cpp \
		moc_vlan.cpp \
		moc_arp.cpp \
		moc_ip4.cpp \
		moc_ip6.cpp \
		moc_ipv4addressdelegate.cpp \
		moc_ipv6addressdelegate.cpp \
		moc_icmp.cpp \
		moc_gmp.cpp \
		moc_igmp.cpp \
		moc_mld.cpp \
		moc_tcp.cpp \
		moc_udp.cpp \
		moc_textproto.cpp \
		moc_userscript.cpp \
		moc_hexdump.cpp \
		moc_sample.cpp
OBJECTS       = ostprotolib.o \
		abstractprotocol.o \
		crc32c.o \
		abstractfileformat.o \
		fileformat.o \
		pcapfileformat.o \
		pdmlfileformat.o \
		pdmlprotocol.o \
		pdmlprotocols.o \
		pdmlreader.o \
		protocolmanager.o \
		protocollist.o \
		protocollistiterator.o \
		streambase.o \
		mac.o \
		payload.o \
		eth2.o \
		dot3.o \
		llc.o \
		stp.o \
		qinq.o \
		lacp.o \
		lldp_tlv.o \
		dcbx.o \
		snap.o \
		vlan.o \
		svlan.o \
		arp.o \
		ip4.o \
		ip6.o \
		icmp.o \
		gmp.o \
		igmp.o \
		mld.o \
		tcp.o \
		udp.o \
		textproto.o \
		userscript.o \
		hexdump.o \
		sample.o \
		protocol.pb.o \
		fileformat.pb.o \
		mac.pb.o \
		payload.pb.o \
		eth2.pb.o \
		dot3.pb.o \
		llc.pb.o \
		stp.pb.o \
		qinq.pb.o \
		lacp.pb.o \
		lldp_tlv.pb.o \
		dcbx.pb.o \
		snap.pb.o \
		dot2llc.pb.o \
		dot2snap.pb.o \
		vlan.pb.o \
		svlan.pb.o \
		vlanstack.pb.o \
		arp.pb.o \
		ip4.pb.o \
		ip6.pb.o \
		ip6over4.pb.o \
		ip4over6.pb.o \
		ip4over4.pb.o \
		ip6over6.pb.o \
		icmp.pb.o \
		gmp.pb.o \
		igmp.pb.o \
		mld.pb.o \
		tcp.pb.o \
		udp.pb.o \
		textproto.pb.o \
		userscript.pb.o \
		hexdump.pb.o \
		sample.pb.o \
		moc_abstractfileformat.o \
		moc_pdmlreader.o \
		moc_mac.o \
		moc_payload.o \
		moc_eth2.o \
		moc_stp.o \
		moc_qinq.o \
		moc_lacp.o \
		moc_lldp_tlv.o \
		moc_dcbx.o \
		moc_dot3.o \
		moc_llc.o \
		moc_snap.o \
		moc_vlan.o \
		moc_arp.o \
		moc_ip4.o \
		moc_ip6.o \
		moc_ipv4addressdelegate.o \
		moc_ipv6addressdelegate.o \
		moc_icmp.o \
		moc_gmp.o \
		moc_igmp.o \
		moc_mld.o \
		moc_tcp.o \
		moc_udp.o \
		moc_textproto.o \
		moc_userscript.o \
		moc_hexdump.o \
		moc_sample.o
DIST          = /usr/share/qt4/mkspecs/common/unix.conf \
		/usr/share/qt4/mkspecs/common/linux.conf \
		/usr/share/qt4/mkspecs/common/gcc-base.conf \
		/usr/share/qt4/mkspecs/common/gcc-base-unix.conf \
		/usr/share/qt4/mkspecs/common/g++-base.conf \
		/usr/share/qt4/mkspecs/common/g++-unix.conf \
		/usr/share/qt4/mkspecs/qconfig.pri \
		/usr/share/qt4/mkspecs/modules/qt_webkit_version.pri \
		/usr/share/qt4/mkspecs/features/qt_functions.prf \
		/usr/share/qt4/mkspecs/features/qt_config.prf \
		/usr/share/qt4/mkspecs/features/exclusive_builds.prf \
		/usr/share/qt4/mkspecs/features/default_pre.prf \
		../protobuf.pri \
		/usr/share/qt4/mkspecs/features/release.prf \
		/usr/share/qt4/mkspecs/features/default_post.prf \
		/usr/share/qt4/mkspecs/features/staticlib.prf \
		/usr/share/qt4/mkspecs/features/static.prf \
		/usr/share/qt4/mkspecs/features/qt.prf \
		/usr/share/qt4/mkspecs/features/unix/thread.prf \
		/usr/share/qt4/mkspecs/features/moc.prf \
		/usr/share/qt4/mkspecs/features/unix/gdb_dwarf_index.prf \
		/usr/share/qt4/mkspecs/features/warn_on.prf \
		/usr/share/qt4/mkspecs/features/resources.prf \
		/usr/share/qt4/mkspecs/features/uic.prf \
		/usr/share/qt4/mkspecs/features/yacc.prf \
		/usr/share/qt4/mkspecs/features/lex.prf \
		/usr/share/qt4/mkspecs/features/include_source_dir.prf \
		ostproto.pro
QMAKE_TARGET  = ostproto
DESTDIR       = 
TARGET        = libostproto.a

first: all
####### Implicit rules

.SUFFIXES: .o .c .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o "$@" "$<"

####### Build rules

all: Makefile.ostproto $(TARGET) 

staticlib: $(TARGET)

$(TARGET): ui_pcapfileimport.h ui_mac.h ui_payload.h ui_eth2.h ui_dot3.h ui_llc.h ui_stp.h ui_qinq.h ui_lacp.h ui_lldp_tlv.h ui_dcbx.h ui_snap.h ui_vlan.h ui_arp.h ui_ip4.h ui_ip6.h ui_icmp.h ui_gmp.h ui_tcp.h ui_udp.h ui_textproto.h ui_userscript.h ui_hexdump.h ui_sample.h $(OBJECTS) $(OBJCOMP) 
	-$(DEL_FILE) $(TARGET)
	$(AR) $(TARGET) $(OBJECTS)


Makefile.ostproto: ostproto.pro  /usr/share/qt4/mkspecs/linux-g++/qmake.conf /usr/share/qt4/mkspecs/common/unix.conf \
		/usr/share/qt4/mkspecs/common/linux.conf \
		/usr/share/qt4/mkspecs/common/gcc-base.conf \
		/usr/share/qt4/mkspecs/common/gcc-base-unix.conf \
		/usr/share/qt4/mkspecs/common/g++-base.conf \
		/usr/share/qt4/mkspecs/common/g++-unix.conf \
		/usr/share/qt4/mkspecs/qconfig.pri \
		/usr/share/qt4/mkspecs/modules/qt_webkit_version.pri \
		/usr/share/qt4/mkspecs/features/qt_functions.prf \
		/usr/share/qt4/mkspecs/features/qt_config.prf \
		/usr/share/qt4/mkspecs/features/exclusive_builds.prf \
		/usr/share/qt4/mkspecs/features/default_pre.prf \
		../protobuf.pri \
		/usr/share/qt4/mkspecs/features/release.prf \
		/usr/share/qt4/mkspecs/features/default_post.prf \
		/usr/share/qt4/mkspecs/features/staticlib.prf \
		/usr/share/qt4/mkspecs/features/static.prf \
		/usr/share/qt4/mkspecs/features/qt.prf \
		/usr/share/qt4/mkspecs/features/unix/thread.prf \
		/usr/share/qt4/mkspecs/features/moc.prf \
		/usr/share/qt4/mkspecs/features/unix/gdb_dwarf_index.prf \
		/usr/share/qt4/mkspecs/features/warn_on.prf \
		/usr/share/qt4/mkspecs/features/resources.prf \
		/usr/share/qt4/mkspecs/features/uic.prf \
		/usr/share/qt4/mkspecs/features/yacc.prf \
		/usr/share/qt4/mkspecs/features/lex.prf \
		/usr/share/qt4/mkspecs/features/include_source_dir.prf \
		/usr/lib/x86_64-linux-gnu/libQtScript.prl \
		/usr/lib/x86_64-linux-gnu/libQtXml.prl \
		/usr/lib/x86_64-linux-gnu/libQtGui.prl \
		/usr/lib/x86_64-linux-gnu/libQtNetwork.prl \
		/usr/lib/x86_64-linux-gnu/libQtCore.prl
	$(QMAKE) -spec /usr/share/qt4/mkspecs/linux-g++ -o Makefile.ostproto ostproto.pro
/usr/share/qt4/mkspecs/common/unix.conf:
/usr/share/qt4/mkspecs/common/linux.conf:
/usr/share/qt4/mkspecs/common/gcc-base.conf:
/usr/share/qt4/mkspecs/common/gcc-base-unix.conf:
/usr/share/qt4/mkspecs/common/g++-base.conf:
/usr/share/qt4/mkspecs/common/g++-unix.conf:
/usr/share/qt4/mkspecs/qconfig.pri:
/usr/share/qt4/mkspecs/modules/qt_webkit_version.pri:
/usr/share/qt4/mkspecs/features/qt_functions.prf:
/usr/share/qt4/mkspecs/features/qt_config.prf:
/usr/share/qt4/mkspecs/features/exclusive_builds.prf:
/usr/share/qt4/mkspecs/features/default_pre.prf:
../protobuf.pri:
/usr/share/qt4/mkspecs/features/release.prf:
/usr/share/qt4/mkspecs/features/default_post.prf:
/usr/share/qt4/mkspecs/features/staticlib.prf:
/usr/share/qt4/mkspecs/features/static.prf:
/usr/share/qt4/mkspecs/features/qt.prf:
/usr/share/qt4/mkspecs/features/unix/thread.prf:
/usr/share/qt4/mkspecs/features/moc.prf:
/usr/share/qt4/mkspecs/features/unix/gdb_dwarf_index.prf:
/usr/share/qt4/mkspecs/features/warn_on.prf:
/usr/share/qt4/mkspecs/features/resources.prf:
/usr/share/qt4/mkspecs/features/uic.prf:
/usr/share/qt4/mkspecs/features/yacc.prf:
/usr/share/qt4/mkspecs/features/lex.prf:
/usr/share/qt4/mkspecs/features/include_source_dir.prf:
/usr/lib/x86_64-linux-gnu/libQtScript.prl:
/usr/lib/x86_64-linux-gnu/libQtXml.prl:
/usr/lib/x86_64-linux-gnu/libQtGui.prl:
/usr/lib/x86_64-linux-gnu/libQtNetwork.prl:
/usr/lib/x86_64-linux-gnu/libQtCore.prl:
qmake:  FORCE
	@$(QMAKE) -spec /usr/share/qt4/mkspecs/linux-g++ -o Makefile.ostproto ostproto.pro

dist: 
	@$(CHK_DIR_EXISTS) .tmp/ostproto1.0.0 || $(MKDIR) .tmp/ostproto1.0.0 
	$(COPY_FILE) --parents $(SOURCES) $(DIST) .tmp/ostproto1.0.0/ && $(COPY_FILE) --parents protocol.proto fileformat.proto mac.proto payload.proto eth2.proto dot3.proto llc.proto stp.proto qinq.proto lacp.proto lldp_tlv.proto dcbx.proto snap.proto dot2llc.proto dot2snap.proto vlan.proto svlan.proto vlanstack.proto arp.proto ip4.proto ip6.proto ip6over4.proto ip4over6.proto ip4over4.proto ip6over6.proto icmp.proto gmp.proto igmp.proto mld.proto tcp.proto udp.proto textproto.proto userscript.proto hexdump.proto sample.proto .tmp/ostproto1.0.0/ && $(COPY_FILE) --parents protocol.proto fileformat.proto mac.proto payload.proto eth2.proto dot3.proto llc.proto stp.proto qinq.proto lacp.proto lldp_tlv.proto dcbx.proto snap.proto dot2llc.proto dot2snap.proto vlan.proto svlan.proto vlanstack.proto arp.proto ip4.proto ip6.proto ip6over4.proto ip4over6.proto ip4over4.proto ip6over6.proto icmp.proto gmp.proto igmp.proto mld.proto tcp.proto udp.proto textproto.proto userscript.proto hexdump.proto sample.proto .tmp/ostproto1.0.0/ && $(COPY_FILE) --parents ostprotolib.h abstractprotocol.h comboprotocol.h abstractfileformat.h fileformat.h pcapfileformat.h pdmlfileformat.h pdmlprotocol.h pdmlprotocols.h pdmlreader.h protocolmanager.h protocollist.h protocollistiterator.h streambase.h mac.h payload.h eth2.h stp.h qinq.h lacp.h lldp_tlv.h dcbx.h dot3.h llc.h snap.h dot2llc.h dot2snap.h vlan.h svlan.h vlanstack.h arp.h ip4.h ip6.h ipv4addressdelegate.h ipv6addressdelegate.h ip6over4.h ip4over6.h ip4over4.h ip6over6.h icmp.h gmp.h igmp.h mld.h tcp.h udp.h textproto.h userscript.h hexdump.h sample.h .tmp/ostproto1.0.0/ && $(COPY_FILE) --parents ostprotolib.cpp abstractprotocol.cpp crc32c.cpp abstractfileformat.cpp fileformat.cpp pcapfileformat.cpp pdmlfileformat.cpp pdmlprotocol.cpp pdmlprotocols.cpp pdmlreader.cpp protocolmanager.cpp protocollist.cpp protocollistiterator.cpp streambase.cpp mac.cpp payload.cpp eth2.cpp dot3.cpp llc.cpp stp.cpp qinq.cpp lacp.cpp lldp_tlv.cpp dcbx.cpp snap.cpp vlan.cpp svlan.cpp arp.cpp ip4.cpp ip6.cpp icmp.cpp gmp.cpp igmp.cpp mld.cpp tcp.cpp udp.cpp textproto.cpp userscript.cpp hexdump.cpp sample.cpp .tmp/ostproto1.0.0/ && $(COPY_FILE) --parents pcapfileimport.ui mac.ui payload.ui eth2.ui dot3.ui llc.ui stp.ui qinq.ui lacp.ui lldp_tlv.ui dcbx.ui snap.ui vlan.ui arp.ui ip4.ui ip6.ui icmp.ui gmp.ui tcp.ui udp.ui textproto.ui userscript.ui hexdump.ui sample.ui .tmp/ostproto1.0.0/ && (cd `dirname .tmp/ostproto1.0.0` && $(TAR) ostproto1.0.0.tar ostproto1.0.0 && $(COMPRESS) ostproto1.0.0.tar) && $(MOVE) `dirname .tmp/ostproto1.0.0`/ostproto1.0.0.tar.gz . && $(DEL_FILE) -r .tmp/ostproto1.0.0


clean:compiler_clean 
	-$(DEL_FILE) $(OBJECTS)
	-$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
	-$(DEL_FILE) $(TARGET) 
	-$(DEL_FILE) object_script.*
	-$(DEL_FILE) Makefile.ostproto


check: first

mocclean: compiler_moc_header_clean compiler_moc_source_clean

mocables: compiler_moc_header_make_all compiler_moc_source_make_all

compiler_protobuf_decl_make_all: protocol.pb.h fileformat.pb.h mac.pb.h payload.pb.h eth2.pb.h dot3.pb.h llc.pb.h stp.pb.h qinq.pb.h lacp.pb.h lldp_tlv.pb.h dcbx.pb.h snap.pb.h dot2llc.pb.h dot2snap.pb.h vlan.pb.h svlan.pb.h vlanstack.pb.h arp.pb.h ip4.pb.h ip6.pb.h ip6over4.pb.h ip4over6.pb.h ip4over4.pb.h ip6over6.pb.h icmp.pb.h gmp.pb.h igmp.pb.h mld.pb.h tcp.pb.h udp.pb.h textproto.pb.h userscript.pb.h hexdump.pb.h sample.pb.h
compiler_protobuf_decl_clean:
	-$(DEL_FILE) protocol.pb.h fileformat.pb.h mac.pb.h payload.pb.h eth2.pb.h dot3.pb.h llc.pb.h stp.pb.h qinq.pb.h lacp.pb.h lldp_tlv.pb.h dcbx.pb.h snap.pb.h dot2llc.pb.h dot2snap.pb.h vlan.pb.h svlan.pb.h vlanstack.pb.h arp.pb.h ip4.pb.h ip6.pb.h ip6over4.pb.h ip4over6.pb.h ip4over4.pb.h ip6over6.pb.h icmp.pb.h gmp.pb.h igmp.pb.h mld.pb.h tcp.pb.h udp.pb.h textproto.pb.h userscript.pb.h hexdump.pb.h sample.pb.h
protocol.pb.h: protocol.proto
	protoc --cpp_out=. --proto_path=. protocol.proto

fileformat.pb.h: fileformat.proto
	protoc --cpp_out=. --proto_path=. fileformat.proto

mac.pb.h: mac.proto
	protoc --cpp_out=. --proto_path=. mac.proto

payload.pb.h: payload.proto
	protoc --cpp_out=. --proto_path=. payload.proto

eth2.pb.h: eth2.proto
	protoc --cpp_out=. --proto_path=. eth2.proto

dot3.pb.h: dot3.proto
	protoc --cpp_out=. --proto_path=. dot3.proto

llc.pb.h: llc.proto
	protoc --cpp_out=. --proto_path=. llc.proto

stp.pb.h: stp.proto
	protoc --cpp_out=. --proto_path=. stp.proto

qinq.pb.h: qinq.proto
	protoc --cpp_out=. --proto_path=. qinq.proto

lacp.pb.h: lacp.proto
	protoc --cpp_out=. --proto_path=. lacp.proto

lldp_tlv.pb.h: lldp_tlv.proto
	protoc --cpp_out=. --proto_path=. lldp_tlv.proto

dcbx.pb.h: dcbx.proto
	protoc --cpp_out=. --proto_path=. dcbx.proto

snap.pb.h: snap.proto
	protoc --cpp_out=. --proto_path=. snap.proto

dot2llc.pb.h: dot2llc.proto
	protoc --cpp_out=. --proto_path=. dot2llc.proto

dot2snap.pb.h: dot2snap.proto
	protoc --cpp_out=. --proto_path=. dot2snap.proto

vlan.pb.h: vlan.proto
	protoc --cpp_out=. --proto_path=. vlan.proto

svlan.pb.h: svlan.proto
	protoc --cpp_out=. --proto_path=. svlan.proto

vlanstack.pb.h: vlanstack.proto
	protoc --cpp_out=. --proto_path=. vlanstack.proto

arp.pb.h: arp.proto
	protoc --cpp_out=. --proto_path=. arp.proto

ip4.pb.h: ip4.proto
	protoc --cpp_out=. --proto_path=. ip4.proto

ip6.pb.h: ip6.proto
	protoc --cpp_out=. --proto_path=. ip6.proto

ip6over4.pb.h: ip6over4.proto
	protoc --cpp_out=. --proto_path=. ip6over4.proto

ip4over6.pb.h: ip4over6.proto
	protoc --cpp_out=. --proto_path=. ip4over6.proto

ip4over4.pb.h: ip4over4.proto
	protoc --cpp_out=. --proto_path=. ip4over4.proto

ip6over6.pb.h: ip6over6.proto
	protoc --cpp_out=. --proto_path=. ip6over6.proto

icmp.pb.h: icmp.proto
	protoc --cpp_out=. --proto_path=. icmp.proto

gmp.pb.h: gmp.proto
	protoc --cpp_out=. --proto_path=. gmp.proto

igmp.pb.h: igmp.proto
	protoc --cpp_out=. --proto_path=. igmp.proto

mld.pb.h: mld.proto
	protoc --cpp_out=. --proto_path=. mld.proto

tcp.pb.h: tcp.proto
	protoc --cpp_out=. --proto_path=. tcp.proto

udp.pb.h: udp.proto
	protoc --cpp_out=. --proto_path=. udp.proto

textproto.pb.h: textproto.proto
	protoc --cpp_out=. --proto_path=. textproto.proto

userscript.pb.h: userscript.proto
	protoc --cpp_out=. --proto_path=. userscript.proto

hexdump.pb.h: hexdump.proto
	protoc --cpp_out=. --proto_path=. hexdump.proto

sample.pb.h: sample.proto
	protoc --cpp_out=. --proto_path=. sample.proto

compiler_protobuf_impl_make_all: protocol.pb.cc fileformat.pb.cc mac.pb.cc payload.pb.cc eth2.pb.cc dot3.pb.cc llc.pb.cc stp.pb.cc qinq.pb.cc lacp.pb.cc lldp_tlv.pb.cc dcbx.pb.cc snap.pb.cc dot2llc.pb.cc dot2snap.pb.cc vlan.pb.cc svlan.pb.cc vlanstack.pb.cc arp.pb.cc ip4.pb.cc ip6.pb.cc ip6over4.pb.cc ip4over6.pb.cc ip4over4.pb.cc ip6over6.pb.cc icmp.pb.cc gmp.pb.cc igmp.pb.cc mld.pb.cc tcp.pb.cc udp.pb.cc textproto.pb.cc userscript.pb.cc hexdump.pb.cc sample.pb.cc
compiler_protobuf_impl_clean:
	-$(DEL_FILE) protocol.pb.cc fileformat.pb.cc mac.pb.cc payload.pb.cc eth2.pb.cc dot3.pb.cc llc.pb.cc stp.pb.cc qinq.pb.cc lacp.pb.cc lldp_tlv.pb.cc dcbx.pb.cc snap.pb.cc dot2llc.pb.cc dot2snap.pb.cc vlan.pb.cc svlan.pb.cc vlanstack.pb.cc arp.pb.cc ip4.pb.cc ip6.pb.cc ip6over4.pb.cc ip4over6.pb.cc ip4over4.pb.cc ip6over6.pb.cc icmp.pb.cc gmp.pb.cc igmp.pb.cc mld.pb.cc tcp.pb.cc udp.pb.cc textproto.pb.cc userscript.pb.cc hexdump.pb.cc sample.pb.cc
protocol.pb.cc: protocol.proto \
		protocol.pb.h
	


fileformat.pb.cc: fileformat.proto \
		fileformat.pb.h
	


mac.pb.cc: mac.proto \
		mac.pb.h
	


payload.pb.cc: payload.proto \
		payload.pb.h
	


eth2.pb.cc: eth2.proto \
		eth2.pb.h
	


dot3.pb.cc: dot3.proto \
		dot3.pb.h
	


llc.pb.cc: llc.proto \
		llc.pb.h
	


stp.pb.cc: stp.proto \
		stp.pb.h
	


qinq.pb.cc: qinq.proto \
		qinq.pb.h
	


lacp.pb.cc: lacp.proto \
		lacp.pb.h
	


lldp_tlv.pb.cc: lldp_tlv.proto \
		lldp_tlv.pb.h
	


dcbx.pb.cc: dcbx.proto \
		dcbx.pb.h
	


snap.pb.cc: snap.proto \
		snap.pb.h
	


dot2llc.pb.cc: dot2llc.proto \
		dot2llc.pb.h
	


dot2snap.pb.cc: dot2snap.proto \
		dot2snap.pb.h
	


vlan.pb.cc: vlan.proto \
		vlan.pb.h
	


svlan.pb.cc: svlan.proto \
		svlan.pb.h
	


vlanstack.pb.cc: vlanstack.proto \
		vlanstack.pb.h
	


arp.pb.cc: arp.proto \
		arp.pb.h
	


ip4.pb.cc: ip4.proto \
		ip4.pb.h
	


ip6.pb.cc: ip6.proto \
		ip6.pb.h
	


ip6over4.pb.cc: ip6over4.proto \
		ip6over4.pb.h
	


ip4over6.pb.cc: ip4over6.proto \
		ip4over6.pb.h
	


ip4over4.pb.cc: ip4over4.proto \
		ip4over4.pb.h
	


ip6over6.pb.cc: ip6over6.proto \
		ip6over6.pb.h
	


icmp.pb.cc: icmp.proto \
		icmp.pb.h
	


gmp.pb.cc: gmp.proto \
		gmp.pb.h
	


igmp.pb.cc: igmp.proto \
		igmp.pb.h
	


mld.pb.cc: mld.proto \
		mld.pb.h
	


tcp.pb.cc: tcp.proto \
		tcp.pb.h
	


udp.pb.cc: udp.proto \
		udp.pb.h
	


textproto.pb.cc: textproto.proto \
		textproto.pb.h
	


userscript.pb.cc: userscript.proto \
		userscript.pb.h
	


hexdump.pb.cc: hexdump.proto \
		hexdump.pb.h
	


sample.pb.cc: sample.proto \
		sample.pb.h
	


compiler_moc_header_make_all: moc_abstractfileformat.cpp moc_pdmlreader.cpp moc_mac.cpp moc_payload.cpp moc_eth2.cpp moc_stp.cpp moc_qinq.cpp moc_lacp.cpp moc_lldp_tlv.cpp moc_dcbx.cpp moc_dot3.cpp moc_llc.cpp moc_snap.cpp moc_vlan.cpp moc_arp.cpp moc_ip4.cpp moc_ip6.cpp moc_ipv4addressdelegate.cpp moc_ipv6addressdelegate.cpp moc_icmp.cpp moc_gmp.cpp moc_igmp.cpp moc_mld.cpp moc_tcp.cpp moc_udp.cpp moc_textproto.cpp moc_userscript.cpp moc_hexdump.cpp moc_sample.cpp
compiler_moc_header_clean:
	-$(DEL_FILE) moc_abstractfileformat.cpp moc_pdmlreader.cpp moc_mac.cpp moc_payload.cpp moc_eth2.cpp moc_stp.cpp moc_qinq.cpp moc_lacp.cpp moc_lldp_tlv.cpp moc_dcbx.cpp moc_dot3.cpp moc_llc.cpp moc_snap.cpp moc_vlan.cpp moc_arp.cpp moc_ip4.cpp moc_ip6.cpp moc_ipv4addressdelegate.cpp moc_ipv6addressdelegate.cpp moc_icmp.cpp moc_gmp.cpp moc_igmp.cpp moc_mld.cpp moc_tcp.cpp moc_udp.cpp moc_textproto.cpp moc_userscript.cpp moc_hexdump.cpp moc_sample.cpp
moc_abstractfileformat.cpp: protocol.pb.h \
		abstractfileformat.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) abstractfileformat.h -o moc_abstractfileformat.cpp

moc_pdmlreader.cpp: pdmlprotocol.h \
		protocol.pb.h \
		pdmlreader.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) pdmlreader.h -o moc_pdmlreader.cpp

moc_mac.cpp: abstractprotocol.h \
		protocol.pb.h \
		mac.pb.h \
		ui_mac.h \
		mac.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) mac.h -o moc_mac.cpp

moc_payload.cpp: abstractprotocol.h \
		protocol.pb.h \
		payload.pb.h \
		ui_payload.h \
		payload.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) payload.h -o moc_payload.cpp

moc_eth2.cpp: abstractprotocol.h \
		protocol.pb.h \
		eth2.pb.h \
		ui_eth2.h \
		eth2.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) eth2.h -o moc_eth2.cpp

moc_stp.cpp: stp.pb.h \
		protocol.pb.h \
		ui_stp.h \
		abstractprotocol.h \
		stp.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) stp.h -o moc_stp.cpp

moc_qinq.cpp: abstractprotocol.h \
		protocol.pb.h \
		qinq.pb.h \
		ui_qinq.h \
		qinq.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) qinq.h -o moc_qinq.cpp

moc_lacp.cpp: lacp.pb.h \
		protocol.pb.h \
		ui_lacp.h \
		abstractprotocol.h \
		lacp.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) lacp.h -o moc_lacp.cpp

moc_lldp_tlv.cpp: lldp_tlv.pb.h \
		protocol.pb.h \
		ui_lldp_tlv.h \
		abstractprotocol.h \
		lldp_tlv.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) lldp_tlv.h -o moc_lldp_tlv.cpp

moc_dcbx.cpp: dcbx.pb.h \
		protocol.pb.h \
		ui_dcbx.h \
		abstractprotocol.h \
		dcbx.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) dcbx.h -o moc_dcbx.cpp

moc_dot3.cpp: abstractprotocol.h \
		protocol.pb.h \
		dot3.pb.h \
		ui_dot3.h \
		dot3.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) dot3.h -o moc_dot3.cpp

moc_llc.cpp: abstractprotocol.h \
		protocol.pb.h \
		llc.pb.h \
		ui_llc.h \
		llc.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) llc.h -o moc_llc.cpp

moc_snap.cpp: abstractprotocol.h \
		protocol.pb.h \
		snap.pb.h \
		ui_snap.h \
		snap.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) snap.h -o moc_snap.cpp

moc_vlan.cpp: abstractprotocol.h \
		protocol.pb.h \
		vlan.pb.h \
		ui_vlan.h \
		vlan.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) vlan.h -o moc_vlan.cpp

moc_arp.cpp: arp.pb.h \
		protocol.pb.h \
		ui_arp.h \
		intcombobox.h \
		abstractprotocol.h \
		arp.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) arp.h -o moc_arp.cpp

moc_ip4.cpp: abstractprotocol.h \
		protocol.pb.h \
		ip4.pb.h \
		ui_ip4.h \
		ip4.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) ip4.h -o moc_ip4.cpp

moc_ip6.cpp: ip6.pb.h \
		protocol.pb.h \
		ui_ip6.h \
		abstractprotocol.h \
		ip6.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) ip6.h -o moc_ip6.cpp

moc_ipv4addressdelegate.cpp: ipv4addressdelegate.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) ipv4addressdelegate.h -o moc_ipv4addressdelegate.cpp

moc_ipv6addressdelegate.cpp: ipv6addressvalidator.h \
		ipv6addressdelegate.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) ipv6addressdelegate.h -o moc_ipv6addressdelegate.cpp

moc_icmp.cpp: icmp.pb.h \
		protocol.pb.h \
		ui_icmp.h \
		intcombobox.h \
		abstractprotocol.h \
		icmp.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) icmp.h -o moc_icmp.cpp

moc_gmp.cpp: gmp.pb.h \
		protocol.pb.h \
		ui_gmp.h \
		intcombobox.h \
		abstractprotocol.h \
		gmp.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) gmp.h -o moc_gmp.cpp

moc_igmp.cpp: igmp.pb.h \
		protocol.pb.h \
		gmp.pb.h \
		gmp.h \
		ui_gmp.h \
		intcombobox.h \
		abstractprotocol.h \
		igmp.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) igmp.h -o moc_igmp.cpp

moc_mld.cpp: mld.pb.h \
		protocol.pb.h \
		gmp.pb.h \
		gmp.h \
		ui_gmp.h \
		intcombobox.h \
		abstractprotocol.h \
		mld.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) mld.h -o moc_mld.cpp

moc_tcp.cpp: abstractprotocol.h \
		protocol.pb.h \
		tcp.pb.h \
		ui_tcp.h \
		tcp.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) tcp.h -o moc_tcp.cpp

moc_udp.cpp: abstractprotocol.h \
		protocol.pb.h \
		udp.pb.h \
		ui_udp.h \
		udp.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) udp.h -o moc_udp.cpp

moc_textproto.cpp: textproto.pb.h \
		protocol.pb.h \
		ui_textproto.h \
		intcombobox.h \
		abstractprotocol.h \
		textproto.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) textproto.h -o moc_textproto.cpp

moc_userscript.cpp: abstractprotocol.h \
		protocol.pb.h \
		userscript.pb.h \
		ui_userscript.h \
		userscript.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) userscript.h -o moc_userscript.cpp

moc_hexdump.cpp: hexdump.pb.h \
		protocol.pb.h \
		ui_hexdump.h \
		abstractprotocol.h \
		hexdump.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) hexdump.h -o moc_hexdump.cpp

moc_sample.cpp: sample.pb.h \
		protocol.pb.h \
		ui_sample.h \
		abstractprotocol.h \
		sample.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) sample.h -o moc_sample.cpp

compiler_rcc_make_all:
compiler_rcc_clean:
compiler_image_collection_make_all: qmake_image_collection.cpp
compiler_image_collection_clean:
	-$(DEL_FILE) qmake_image_collection.cpp
compiler_moc_source_make_all:
compiler_moc_source_clean:
compiler_uic_make_all: ui_pcapfileimport.h ui_mac.h ui_payload.h ui_eth2.h ui_dot3.h ui_llc.h ui_stp.h ui_qinq.h ui_lacp.h ui_lldp_tlv.h ui_dcbx.h ui_snap.h ui_vlan.h ui_arp.h ui_ip4.h ui_ip6.h ui_icmp.h ui_gmp.h ui_tcp.h ui_udp.h ui_textproto.h ui_userscript.h ui_hexdump.h ui_sample.h
compiler_uic_clean:
	-$(DEL_FILE) ui_pcapfileimport.h ui_mac.h ui_payload.h ui_eth2.h ui_dot3.h ui_llc.h ui_stp.h ui_qinq.h ui_lacp.h ui_lldp_tlv.h ui_dcbx.h ui_snap.h ui_vlan.h ui_arp.h ui_ip4.h ui_ip6.h ui_icmp.h ui_gmp.h ui_tcp.h ui_udp.h ui_textproto.h ui_userscript.h ui_hexdump.h ui_sample.h
ui_pcapfileimport.h: pcapfileimport.ui
	/usr/bin/uic-qt4 pcapfileimport.ui -o ui_pcapfileimport.h

ui_mac.h: mac.ui
	/usr/bin/uic-qt4 mac.ui -o ui_mac.h

ui_payload.h: payload.ui
	/usr/bin/uic-qt4 payload.ui -o ui_payload.h

ui_eth2.h: eth2.ui
	/usr/bin/uic-qt4 eth2.ui -o ui_eth2.h

ui_dot3.h: dot3.ui
	/usr/bin/uic-qt4 dot3.ui -o ui_dot3.h

ui_llc.h: llc.ui
	/usr/bin/uic-qt4 llc.ui -o ui_llc.h

ui_stp.h: stp.ui
	/usr/bin/uic-qt4 stp.ui -o ui_stp.h

ui_qinq.h: qinq.ui
	/usr/bin/uic-qt4 qinq.ui -o ui_qinq.h

ui_lacp.h: lacp.ui
	/usr/bin/uic-qt4 lacp.ui -o ui_lacp.h

ui_lldp_tlv.h: lldp_tlv.ui
	/usr/bin/uic-qt4 lldp_tlv.ui -o ui_lldp_tlv.h

ui_dcbx.h: dcbx.ui
	/usr/bin/uic-qt4 dcbx.ui -o ui_dcbx.h

ui_snap.h: snap.ui
	/usr/bin/uic-qt4 snap.ui -o ui_snap.h

ui_vlan.h: vlan.ui
	/usr/bin/uic-qt4 vlan.ui -o ui_vlan.h

ui_arp.h: arp.ui \
		intcombobox.h
	/usr/bin/uic-qt4 arp.ui -o ui_arp.h

ui_ip4.h: ip4.ui
	/usr/bin/uic-qt4 ip4.ui -o ui_ip4.h

ui_ip6.h: ip6.ui
	/usr/bin/uic-qt4 ip6.ui -o ui_ip6.h

ui_icmp.h: icmp.ui \
		intcombobox.h
	/usr/bin/uic-qt4 icmp.ui -o ui_icmp.h

ui_gmp.h: gmp.ui \
		intcombobox.h
	/usr/bin/uic-qt4 gmp.ui -o ui_gmp.h

ui_tcp.h: tcp.ui
	/usr/bin/uic-qt4 tcp.ui -o ui_tcp.h

ui_udp.h: udp.ui
	/usr/bin/uic-qt4 udp.ui -o ui_udp.h

ui_textproto.h: textproto.ui \
		intcombobox.h
	/usr/bin/uic-qt4 textproto.ui -o ui_textproto.h

ui_userscript.h: userscript.ui
	/usr/bin/uic-qt4 userscript.ui -o ui_userscript.h

ui_hexdump.h: hexdump.ui
	/usr/bin/uic-qt4 hexdump.ui -o ui_hexdump.h

ui_sample.h: sample.ui
	/usr/bin/uic-qt4 sample.ui -o ui_sample.h

compiler_yacc_decl_make_all:
compiler_yacc_decl_clean:
compiler_yacc_impl_make_all:
compiler_yacc_impl_clean:
compiler_lex_make_all:
compiler_lex_clean:
compiler_clean: compiler_protobuf_decl_clean compiler_protobuf_impl_clean compiler_moc_header_clean compiler_uic_clean 

####### Compile

ostprotolib.o: ostprotolib.cpp ostprotolib.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o ostprotolib.o ostprotolib.cpp

abstractprotocol.o: abstractprotocol.cpp abstractprotocol.h \
		protocol.pb.h \
		streambase.h \
		protocollistiterator.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o abstractprotocol.o abstractprotocol.cpp

crc32c.o: crc32c.cpp crc32c.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o crc32c.o crc32c.cpp

abstractfileformat.o: abstractfileformat.cpp abstractfileformat.h \
		protocol.pb.h \
		fileformat.h \
		fileformat.pb.h \
		pcapfileformat.h \
		ui_pcapfileimport.h \
		pdmlfileformat.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o abstractfileformat.o abstractfileformat.cpp

fileformat.o: fileformat.cpp fileformat.h \
		abstractfileformat.h \
		protocol.pb.h \
		fileformat.pb.h \
		crc32c.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o fileformat.o fileformat.cpp

pcapfileformat.o: pcapfileformat.cpp pcapfileformat.h \
		abstractfileformat.h \
		protocol.pb.h \
		ui_pcapfileimport.h \
		pdmlreader.h \
		pdmlprotocol.h \
		ostprotolib.h \
		streambase.h \
		hexdump.pb.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o pcapfileformat.o pcapfileformat.cpp

pdmlfileformat.o: pdmlfileformat.cpp pdmlfileformat.h \
		abstractfileformat.h \
		protocol.pb.h \
		ostprotolib.h \
		pdmlreader.h \
		pdmlprotocol.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o pdmlfileformat.o pdmlfileformat.cpp

pdmlprotocol.o: pdmlprotocol.cpp pdmlprotocol.h \
		protocol.pb.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o pdmlprotocol.o pdmlprotocol.cpp

pdmlprotocols.o: pdmlprotocols.cpp pdmlprotocols.h \
		pdmlprotocol.h \
		protocol.pb.h \
		arp.pb.h \
		eth2.pb.h \
		dot3.pb.h \
		gmp.pb.h \
		hexdump.pb.h \
		llc.pb.h \
		mac.pb.h \
		icmp.pb.h \
		igmp.pb.h \
		ip4.pb.h \
		ip6.pb.h \
		mld.pb.h \
		sample.pb.h \
		snap.pb.h \
		svlan.pb.h \
		vlan.pb.h \
		tcp.pb.h \
		textproto.pb.h \
		udp.pb.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o pdmlprotocols.o pdmlprotocols.cpp

pdmlreader.o: pdmlreader.cpp pdmlreader.h \
		pdmlprotocol.h \
		protocol.pb.h \
		abstractprotocol.h \
		hexdump.pb.h \
		pcapfileformat.h \
		abstractfileformat.h \
		ui_pcapfileimport.h \
		streambase.h \
		pdmlprotocols.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o pdmlreader.o pdmlreader.cpp

protocolmanager.o: protocolmanager.cpp protocolmanager.h \
		abstractprotocol.h \
		protocol.pb.h \
		mac.h \
		mac.pb.h \
		ui_mac.h \
		payload.h \
		payload.pb.h \
		ui_payload.h \
		eth2.h \
		eth2.pb.h \
		ui_eth2.h \
		dot3.h \
		dot3.pb.h \
		ui_dot3.h \
		llc.h \
		llc.pb.h \
		ui_llc.h \
		snap.h \
		snap.pb.h \
		ui_snap.h \
		dot2llc.h \
		comboprotocol.h \
		dot2snap.h \
		vlan.h \
		vlan.pb.h \
		ui_vlan.h \
		vlanstack.h \
		svlan.h \
		arp.h \
		arp.pb.h \
		ui_arp.h \
		intcombobox.h \
		ip4.h \
		ip4.pb.h \
		ui_ip4.h \
		ip6.h \
		ip6.pb.h \
		ui_ip6.h \
		ip6over4.h \
		ip4over6.h \
		ip4over4.h \
		ip4over4.pb.h \
		ip6over6.h \
		ip6over6.pb.h \
		icmp.h \
		icmp.pb.h \
		ui_icmp.h \
		igmp.h \
		igmp.pb.h \
		gmp.pb.h \
		gmp.h \
		ui_gmp.h \
		mld.h \
		mld.pb.h \
		tcp.h \
		tcp.pb.h \
		ui_tcp.h \
		udp.h \
		udp.pb.h \
		ui_udp.h \
		textproto.h \
		textproto.pb.h \
		ui_textproto.h \
		userscript.h \
		userscript.pb.h \
		ui_userscript.h \
		hexdump.h \
		hexdump.pb.h \
		ui_hexdump.h \
		sample.h \
		sample.pb.h \
		ui_sample.h \
		stp.h \
		stp.pb.h \
		ui_stp.h \
		qinq.h \
		qinq.pb.h \
		ui_qinq.h \
		dcbx.h \
		dcbx.pb.h \
		ui_dcbx.h \
		lacp.h \
		lacp.pb.h \
		ui_lacp.h \
		lldp_tlv.h \
		lldp_tlv.pb.h \
		ui_lldp_tlv.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o protocolmanager.o protocolmanager.cpp

protocollist.o: protocollist.cpp protocollist.h \
		abstractprotocol.h \
		protocol.pb.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o protocollist.o protocollist.cpp

protocollistiterator.o: protocollistiterator.cpp protocollistiterator.h \
		protocollist.h \
		abstractprotocol.h \
		protocol.pb.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o protocollistiterator.o protocollistiterator.cpp

streambase.o: streambase.cpp streambase.h \
		protocol.pb.h \
		abstractprotocol.h \
		protocollist.h \
		protocollistiterator.h \
		protocolmanager.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o streambase.o streambase.cpp

mac.o: mac.cpp mac.h \
		abstractprotocol.h \
		protocol.pb.h \
		mac.pb.h \
		ui_mac.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o mac.o mac.cpp

payload.o: payload.cpp payload.h \
		abstractprotocol.h \
		protocol.pb.h \
		payload.pb.h \
		ui_payload.h \
		streambase.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o payload.o payload.cpp

eth2.o: eth2.cpp eth2.h \
		abstractprotocol.h \
		protocol.pb.h \
		eth2.pb.h \
		ui_eth2.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o eth2.o eth2.cpp

dot3.o: dot3.cpp dot3.h \
		abstractprotocol.h \
		protocol.pb.h \
		dot3.pb.h \
		ui_dot3.h \
		streambase.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o dot3.o dot3.cpp

llc.o: llc.cpp llc.h \
		abstractprotocol.h \
		protocol.pb.h \
		llc.pb.h \
		ui_llc.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o llc.o llc.cpp

stp.o: stp.cpp stp.h \
		stp.pb.h \
		protocol.pb.h \
		ui_stp.h \
		abstractprotocol.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o stp.o stp.cpp

qinq.o: qinq.cpp qinq.h \
		abstractprotocol.h \
		protocol.pb.h \
		qinq.pb.h \
		ui_qinq.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o qinq.o qinq.cpp

lacp.o: lacp.cpp lacp.h \
		lacp.pb.h \
		protocol.pb.h \
		ui_lacp.h \
		abstractprotocol.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o lacp.o lacp.cpp

lldp_tlv.o: lldp_tlv.cpp lldp_tlv.h \
		lldp_tlv.pb.h \
		protocol.pb.h \
		ui_lldp_tlv.h \
		abstractprotocol.h \
		streambase.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o lldp_tlv.o lldp_tlv.cpp

dcbx.o: dcbx.cpp dcbx.h \
		dcbx.pb.h \
		protocol.pb.h \
		ui_dcbx.h \
		abstractprotocol.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o dcbx.o dcbx.cpp

snap.o: snap.cpp snap.h \
		abstractprotocol.h \
		protocol.pb.h \
		snap.pb.h \
		ui_snap.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o snap.o snap.cpp

vlan.o: vlan.cpp vlan.h \
		abstractprotocol.h \
		protocol.pb.h \
		vlan.pb.h \
		ui_vlan.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o vlan.o vlan.cpp

svlan.o: svlan.cpp svlan.h \
		vlan.h \
		abstractprotocol.h \
		protocol.pb.h \
		vlan.pb.h \
		ui_vlan.h \
		svlan.pb.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o svlan.o svlan.cpp

arp.o: arp.cpp arp.h \
		arp.pb.h \
		protocol.pb.h \
		ui_arp.h \
		intcombobox.h \
		abstractprotocol.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o arp.o arp.cpp

ip4.o: ip4.cpp ip4.h \
		abstractprotocol.h \
		protocol.pb.h \
		ip4.pb.h \
		ui_ip4.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o ip4.o ip4.cpp

ip6.o: ip6.cpp ip6.h \
		ip6.pb.h \
		protocol.pb.h \
		ui_ip6.h \
		abstractprotocol.h \
		ipv6addressvalidator.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o ip6.o ip6.cpp

icmp.o: icmp.cpp icmp.h \
		icmp.pb.h \
		protocol.pb.h \
		ui_icmp.h \
		intcombobox.h \
		abstractprotocol.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o icmp.o icmp.cpp

gmp.o: gmp.cpp gmp.h \
		gmp.pb.h \
		protocol.pb.h \
		ui_gmp.h \
		intcombobox.h \
		abstractprotocol.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o gmp.o gmp.cpp

igmp.o: igmp.cpp igmp.h \
		igmp.pb.h \
		protocol.pb.h \
		gmp.pb.h \
		gmp.h \
		ui_gmp.h \
		intcombobox.h \
		abstractprotocol.h \
		ipv4addressdelegate.h \
		iputils.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o igmp.o igmp.cpp

mld.o: mld.cpp mld.h \
		mld.pb.h \
		protocol.pb.h \
		gmp.pb.h \
		gmp.h \
		ui_gmp.h \
		intcombobox.h \
		abstractprotocol.h \
		ipv6addressdelegate.h \
		ipv6addressvalidator.h \
		iputils.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o mld.o mld.cpp

tcp.o: tcp.cpp tcp.h \
		abstractprotocol.h \
		protocol.pb.h \
		tcp.pb.h \
		ui_tcp.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o tcp.o tcp.cpp

udp.o: udp.cpp udp.h \
		abstractprotocol.h \
		protocol.pb.h \
		udp.pb.h \
		ui_udp.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o udp.o udp.cpp

textproto.o: textproto.cpp textproto.h \
		textproto.pb.h \
		protocol.pb.h \
		ui_textproto.h \
		intcombobox.h \
		abstractprotocol.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o textproto.o textproto.cpp

userscript.o: userscript.cpp userscript.h \
		abstractprotocol.h \
		protocol.pb.h \
		userscript.pb.h \
		ui_userscript.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o userscript.o userscript.cpp

hexdump.o: hexdump.cpp hexdump.h \
		hexdump.pb.h \
		protocol.pb.h \
		ui_hexdump.h \
		abstractprotocol.h \
		streambase.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o hexdump.o hexdump.cpp

sample.o: sample.cpp sample.h \
		sample.pb.h \
		protocol.pb.h \
		ui_sample.h \
		abstractprotocol.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o sample.o sample.cpp

protocol.pb.o: protocol.pb.cc 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o protocol.pb.o protocol.pb.cc

fileformat.pb.o: fileformat.pb.cc 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o fileformat.pb.o fileformat.pb.cc

mac.pb.o: mac.pb.cc 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o mac.pb.o mac.pb.cc

payload.pb.o: payload.pb.cc 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o payload.pb.o payload.pb.cc

eth2.pb.o: eth2.pb.cc 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o eth2.pb.o eth2.pb.cc

dot3.pb.o: dot3.pb.cc 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o dot3.pb.o dot3.pb.cc

llc.pb.o: llc.pb.cc 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o llc.pb.o llc.pb.cc

stp.pb.o: stp.pb.cc 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o stp.pb.o stp.pb.cc

qinq.pb.o: qinq.pb.cc 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o qinq.pb.o qinq.pb.cc

lacp.pb.o: lacp.pb.cc 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o lacp.pb.o lacp.pb.cc

lldp_tlv.pb.o: lldp_tlv.pb.cc 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o lldp_tlv.pb.o lldp_tlv.pb.cc

dcbx.pb.o: dcbx.pb.cc 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o dcbx.pb.o dcbx.pb.cc

snap.pb.o: snap.pb.cc 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o snap.pb.o snap.pb.cc

dot2llc.pb.o: dot2llc.pb.cc 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o dot2llc.pb.o dot2llc.pb.cc

dot2snap.pb.o: dot2snap.pb.cc 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o dot2snap.pb.o dot2snap.pb.cc

vlan.pb.o: vlan.pb.cc 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o vlan.pb.o vlan.pb.cc

svlan.pb.o: svlan.pb.cc 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o svlan.pb.o svlan.pb.cc

vlanstack.pb.o: vlanstack.pb.cc 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o vlanstack.pb.o vlanstack.pb.cc

arp.pb.o: arp.pb.cc 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o arp.pb.o arp.pb.cc

ip4.pb.o: ip4.pb.cc 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o ip4.pb.o ip4.pb.cc

ip6.pb.o: ip6.pb.cc 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o ip6.pb.o ip6.pb.cc

ip6over4.pb.o: ip6over4.pb.cc 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o ip6over4.pb.o ip6over4.pb.cc

ip4over6.pb.o: ip4over6.pb.cc 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o ip4over6.pb.o ip4over6.pb.cc

ip4over4.pb.o: ip4over4.pb.cc 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o ip4over4.pb.o ip4over4.pb.cc

ip6over6.pb.o: ip6over6.pb.cc 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o ip6over6.pb.o ip6over6.pb.cc

icmp.pb.o: icmp.pb.cc 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o icmp.pb.o icmp.pb.cc

gmp.pb.o: gmp.pb.cc 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o gmp.pb.o gmp.pb.cc

igmp.pb.o: igmp.pb.cc 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o igmp.pb.o igmp.pb.cc

mld.pb.o: mld.pb.cc 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o mld.pb.o mld.pb.cc

tcp.pb.o: tcp.pb.cc 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o tcp.pb.o tcp.pb.cc

udp.pb.o: udp.pb.cc 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o udp.pb.o udp.pb.cc

textproto.pb.o: textproto.pb.cc 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o textproto.pb.o textproto.pb.cc

userscript.pb.o: userscript.pb.cc 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o userscript.pb.o userscript.pb.cc

hexdump.pb.o: hexdump.pb.cc 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o hexdump.pb.o hexdump.pb.cc

sample.pb.o: sample.pb.cc 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o sample.pb.o sample.pb.cc

moc_abstractfileformat.o: moc_abstractfileformat.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_abstractfileformat.o moc_abstractfileformat.cpp

moc_pdmlreader.o: moc_pdmlreader.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_pdmlreader.o moc_pdmlreader.cpp

moc_mac.o: moc_mac.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_mac.o moc_mac.cpp

moc_payload.o: moc_payload.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_payload.o moc_payload.cpp

moc_eth2.o: moc_eth2.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_eth2.o moc_eth2.cpp

moc_stp.o: moc_stp.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_stp.o moc_stp.cpp

moc_qinq.o: moc_qinq.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_qinq.o moc_qinq.cpp

moc_lacp.o: moc_lacp.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_lacp.o moc_lacp.cpp

moc_lldp_tlv.o: moc_lldp_tlv.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_lldp_tlv.o moc_lldp_tlv.cpp

moc_dcbx.o: moc_dcbx.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_dcbx.o moc_dcbx.cpp

moc_dot3.o: moc_dot3.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_dot3.o moc_dot3.cpp

moc_llc.o: moc_llc.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_llc.o moc_llc.cpp

moc_snap.o: moc_snap.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_snap.o moc_snap.cpp

moc_vlan.o: moc_vlan.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_vlan.o moc_vlan.cpp

moc_arp.o: moc_arp.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_arp.o moc_arp.cpp

moc_ip4.o: moc_ip4.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_ip4.o moc_ip4.cpp

moc_ip6.o: moc_ip6.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_ip6.o moc_ip6.cpp

moc_ipv4addressdelegate.o: moc_ipv4addressdelegate.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_ipv4addressdelegate.o moc_ipv4addressdelegate.cpp

moc_ipv6addressdelegate.o: moc_ipv6addressdelegate.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_ipv6addressdelegate.o moc_ipv6addressdelegate.cpp

moc_icmp.o: moc_icmp.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_icmp.o moc_icmp.cpp

moc_gmp.o: moc_gmp.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_gmp.o moc_gmp.cpp

moc_igmp.o: moc_igmp.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_igmp.o moc_igmp.cpp

moc_mld.o: moc_mld.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_mld.o moc_mld.cpp

moc_tcp.o: moc_tcp.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_tcp.o moc_tcp.cpp

moc_udp.o: moc_udp.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_udp.o moc_udp.cpp

moc_textproto.o: moc_textproto.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_textproto.o moc_textproto.cpp

moc_userscript.o: moc_userscript.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_userscript.o moc_userscript.cpp

moc_hexdump.o: moc_hexdump.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_hexdump.o moc_hexdump.cpp

moc_sample.o: moc_sample.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_sample.o moc_sample.cpp

####### Install

install:   FORCE

uninstall:   FORCE

FORCE:

