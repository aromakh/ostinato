// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dcbx.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dcbx.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace OstProto {

namespace {

const ::google::protobuf::Descriptor* Dcbx_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dcbx_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_dcbx_2eproto() {
  protobuf_AddDesc_dcbx_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dcbx.proto");
  GOOGLE_CHECK(file != NULL);
  Dcbx_descriptor_ = file->message_type(0);
  static const int Dcbx_offsets_[28] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dcbx, tlv_type_len_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dcbx, oui802_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dcbx, subtype802_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dcbx, will_cbs_res_tcs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dcbx, prior_ass_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dcbx, tc_band_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dcbx, tsa_ass_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dcbx, tlv_type_len_r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dcbx, oui802_r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dcbx, subtype802_r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dcbx, reserved_r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dcbx, prior_ass_r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dcbx, tc_band_r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dcbx, tsa_ass_r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dcbx, tlv_type_len_p_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dcbx, oui802_p_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dcbx, subtype802_p_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dcbx, will_mbc_res_pfc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dcbx, pfc_enable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dcbx, tlv_type_len_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dcbx, oui802_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dcbx, subtype802_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dcbx, reserved_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dcbx, app_priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dcbx, is_c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dcbx, is_r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dcbx, is_p_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dcbx, is_a_),
  };
  Dcbx_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dcbx_descriptor_,
      Dcbx::default_instance_,
      Dcbx_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dcbx, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dcbx, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dcbx));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dcbx_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dcbx_descriptor_, &Dcbx::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dcbx_2eproto() {
  delete Dcbx::default_instance_;
  delete Dcbx_reflection_;
}

void protobuf_AddDesc_dcbx_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::OstProto::protobuf_AddDesc_protocol_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ndcbx.proto\022\010OstProto\032\016protocol.proto\"\323"
    "\004\n\004Dcbx\022\035\n\016tlv_type_len_c\030\001 \001(\r:\00565049\022\020"
    "\n\010oui802_c\030\002 \001(\r\022\024\n\014subtype802_c\030\003 \001(\r\022\030"
    "\n\020will_cbs_res_tcs\030\004 \001(\r\022\023\n\013prior_ass_c\030"
    "\005 \001(\r\022\021\n\ttc_band_c\030\006 \001(\004\022\021\n\ttsa_ass_c\030\007 "
    "\001(\004\022\035\n\016tlv_type_len_r\030\010 \001(\r:\00565049\022\020\n\010ou"
    "i802_r\030\t \001(\r\022\024\n\014subtype802_r\030\n \001(\r\022\022\n\nre"
    "served_r\030\013 \001(\r\022\023\n\013prior_ass_r\030\014 \001(\r\022\021\n\tt"
    "c_band_r\030\r \001(\004\022\021\n\ttsa_ass_r\030\016 \001(\004\022\035\n\016tlv"
    "_type_len_p\030\017 \001(\r:\00565030\022\020\n\010oui802_p\030\020 \001"
    "(\r\022\024\n\014subtype802_p\030\021 \001(\r\022\030\n\020will_mbc_res"
    "_pfc\030\022 \001(\r\022\022\n\npfc_enable\030\023 \001(\r\022\026\n\016tlv_ty"
    "pe_len_a\030\024 \001(\r\022\020\n\010oui802_a\030\025 \001(\r\022\024\n\014subt"
    "ype802_a\030\026 \001(\r\022\022\n\nreserved_a\030\027 \001(\r\022\030\n\014ap"
    "p_priority\030\030 \003(\004B\002\020\001\022\014\n\004is_c\030\031 \001(\010\022\014\n\004is"
    "_r\030\032 \001(\010\022\014\n\004is_p\030\033 \001(\010\022\014\n\004is_a\030\034 \001(\010:1\n\004"
    "dcbx\022\022.OstProto.Protocol\030\252\002 \001(\0132\016.OstPro"
    "to.Dcbx", 687);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dcbx.proto", &protobuf_RegisterTypes);
  Dcbx::default_instance_ = new Dcbx();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::OstProto::Protocol::default_instance(),
    298, 11, false, false,
    &::OstProto::Dcbx::default_instance());
  Dcbx::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dcbx_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dcbx_2eproto {
  StaticDescriptorInitializer_dcbx_2eproto() {
    protobuf_AddDesc_dcbx_2eproto();
  }
} static_descriptor_initializer_dcbx_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Dcbx::kTlvTypeLenCFieldNumber;
const int Dcbx::kOui802CFieldNumber;
const int Dcbx::kSubtype802CFieldNumber;
const int Dcbx::kWillCbsResTcsFieldNumber;
const int Dcbx::kPriorAssCFieldNumber;
const int Dcbx::kTcBandCFieldNumber;
const int Dcbx::kTsaAssCFieldNumber;
const int Dcbx::kTlvTypeLenRFieldNumber;
const int Dcbx::kOui802RFieldNumber;
const int Dcbx::kSubtype802RFieldNumber;
const int Dcbx::kReservedRFieldNumber;
const int Dcbx::kPriorAssRFieldNumber;
const int Dcbx::kTcBandRFieldNumber;
const int Dcbx::kTsaAssRFieldNumber;
const int Dcbx::kTlvTypeLenPFieldNumber;
const int Dcbx::kOui802PFieldNumber;
const int Dcbx::kSubtype802PFieldNumber;
const int Dcbx::kWillMbcResPfcFieldNumber;
const int Dcbx::kPfcEnableFieldNumber;
const int Dcbx::kTlvTypeLenAFieldNumber;
const int Dcbx::kOui802AFieldNumber;
const int Dcbx::kSubtype802AFieldNumber;
const int Dcbx::kReservedAFieldNumber;
const int Dcbx::kAppPriorityFieldNumber;
const int Dcbx::kIsCFieldNumber;
const int Dcbx::kIsRFieldNumber;
const int Dcbx::kIsPFieldNumber;
const int Dcbx::kIsAFieldNumber;
#endif  // !_MSC_VER

Dcbx::Dcbx()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Dcbx::InitAsDefaultInstance() {
}

Dcbx::Dcbx(const Dcbx& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Dcbx::SharedCtor() {
  _cached_size_ = 0;
  tlv_type_len_c_ = 65049u;
  oui802_c_ = 0u;
  subtype802_c_ = 0u;
  will_cbs_res_tcs_ = 0u;
  prior_ass_c_ = 0u;
  tc_band_c_ = GOOGLE_ULONGLONG(0);
  tsa_ass_c_ = GOOGLE_ULONGLONG(0);
  tlv_type_len_r_ = 65049u;
  oui802_r_ = 0u;
  subtype802_r_ = 0u;
  reserved_r_ = 0u;
  prior_ass_r_ = 0u;
  tc_band_r_ = GOOGLE_ULONGLONG(0);
  tsa_ass_r_ = GOOGLE_ULONGLONG(0);
  tlv_type_len_p_ = 65030u;
  oui802_p_ = 0u;
  subtype802_p_ = 0u;
  will_mbc_res_pfc_ = 0u;
  pfc_enable_ = 0u;
  tlv_type_len_a_ = 0u;
  oui802_a_ = 0u;
  subtype802_a_ = 0u;
  reserved_a_ = 0u;
  is_c_ = false;
  is_r_ = false;
  is_p_ = false;
  is_a_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dcbx::~Dcbx() {
  SharedDtor();
}

void Dcbx::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Dcbx::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dcbx::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dcbx_descriptor_;
}

const Dcbx& Dcbx::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dcbx_2eproto();
  return *default_instance_;
}

Dcbx* Dcbx::default_instance_ = NULL;

Dcbx* Dcbx::New() const {
  return new Dcbx;
}

void Dcbx::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tlv_type_len_c_ = 65049u;
    oui802_c_ = 0u;
    subtype802_c_ = 0u;
    will_cbs_res_tcs_ = 0u;
    prior_ass_c_ = 0u;
    tc_band_c_ = GOOGLE_ULONGLONG(0);
    tsa_ass_c_ = GOOGLE_ULONGLONG(0);
    tlv_type_len_r_ = 65049u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    oui802_r_ = 0u;
    subtype802_r_ = 0u;
    reserved_r_ = 0u;
    prior_ass_r_ = 0u;
    tc_band_r_ = GOOGLE_ULONGLONG(0);
    tsa_ass_r_ = GOOGLE_ULONGLONG(0);
    tlv_type_len_p_ = 65030u;
    oui802_p_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    subtype802_p_ = 0u;
    will_mbc_res_pfc_ = 0u;
    pfc_enable_ = 0u;
    tlv_type_len_a_ = 0u;
    oui802_a_ = 0u;
    subtype802_a_ = 0u;
    reserved_a_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    is_c_ = false;
    is_r_ = false;
    is_p_ = false;
    is_a_ = false;
  }
  app_priority_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dcbx::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tlv_type_len_c = 1 [default = 65049];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tlv_type_len_c_)));
          set_has_tlv_type_len_c();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_oui802_c;
        break;
      }

      // optional uint32 oui802_c = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oui802_c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oui802_c_)));
          set_has_oui802_c();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_subtype802_c;
        break;
      }

      // optional uint32 subtype802_c = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subtype802_c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subtype802_c_)));
          set_has_subtype802_c();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_will_cbs_res_tcs;
        break;
      }

      // optional uint32 will_cbs_res_tcs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_will_cbs_res_tcs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &will_cbs_res_tcs_)));
          set_has_will_cbs_res_tcs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_prior_ass_c;
        break;
      }

      // optional uint32 prior_ass_c = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prior_ass_c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prior_ass_c_)));
          set_has_prior_ass_c();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_tc_band_c;
        break;
      }

      // optional uint64 tc_band_c = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tc_band_c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tc_band_c_)));
          set_has_tc_band_c();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_tsa_ass_c;
        break;
      }

      // optional uint64 tsa_ass_c = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tsa_ass_c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tsa_ass_c_)));
          set_has_tsa_ass_c();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_tlv_type_len_r;
        break;
      }

      // optional uint32 tlv_type_len_r = 8 [default = 65049];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tlv_type_len_r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tlv_type_len_r_)));
          set_has_tlv_type_len_r();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_oui802_r;
        break;
      }

      // optional uint32 oui802_r = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oui802_r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oui802_r_)));
          set_has_oui802_r();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_subtype802_r;
        break;
      }

      // optional uint32 subtype802_r = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subtype802_r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subtype802_r_)));
          set_has_subtype802_r();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_reserved_r;
        break;
      }

      // optional uint32 reserved_r = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reserved_r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reserved_r_)));
          set_has_reserved_r();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_prior_ass_r;
        break;
      }

      // optional uint32 prior_ass_r = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prior_ass_r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prior_ass_r_)));
          set_has_prior_ass_r();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_tc_band_r;
        break;
      }

      // optional uint64 tc_band_r = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tc_band_r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tc_band_r_)));
          set_has_tc_band_r();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_tsa_ass_r;
        break;
      }

      // optional uint64 tsa_ass_r = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tsa_ass_r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tsa_ass_r_)));
          set_has_tsa_ass_r();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_tlv_type_len_p;
        break;
      }

      // optional uint32 tlv_type_len_p = 15 [default = 65030];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tlv_type_len_p:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tlv_type_len_p_)));
          set_has_tlv_type_len_p();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_oui802_p;
        break;
      }

      // optional uint32 oui802_p = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oui802_p:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oui802_p_)));
          set_has_oui802_p();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_subtype802_p;
        break;
      }

      // optional uint32 subtype802_p = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subtype802_p:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subtype802_p_)));
          set_has_subtype802_p();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_will_mbc_res_pfc;
        break;
      }

      // optional uint32 will_mbc_res_pfc = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_will_mbc_res_pfc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &will_mbc_res_pfc_)));
          set_has_will_mbc_res_pfc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_pfc_enable;
        break;
      }

      // optional uint32 pfc_enable = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pfc_enable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pfc_enable_)));
          set_has_pfc_enable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_tlv_type_len_a;
        break;
      }

      // optional uint32 tlv_type_len_a = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tlv_type_len_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tlv_type_len_a_)));
          set_has_tlv_type_len_a();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_oui802_a;
        break;
      }

      // optional uint32 oui802_a = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oui802_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oui802_a_)));
          set_has_oui802_a();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_subtype802_a;
        break;
      }

      // optional uint32 subtype802_a = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subtype802_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subtype802_a_)));
          set_has_subtype802_a();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_reserved_a;
        break;
      }

      // optional uint32 reserved_a = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reserved_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reserved_a_)));
          set_has_reserved_a();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_app_priority;
        break;
      }

      // repeated uint64 app_priority = 24 [packed = true];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_app_priority())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 194, input, this->mutable_app_priority())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_is_c;
        break;
      }

      // optional bool is_c = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_c_)));
          set_has_is_c();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_is_r;
        break;
      }

      // optional bool is_r = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_r_)));
          set_has_is_r();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_is_p;
        break;
      }

      // optional bool is_p = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_p:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_p_)));
          set_has_is_p();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_is_a;
        break;
      }

      // optional bool is_a = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_a_)));
          set_has_is_a();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Dcbx::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 tlv_type_len_c = 1 [default = 65049];
  if (has_tlv_type_len_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tlv_type_len_c(), output);
  }

  // optional uint32 oui802_c = 2;
  if (has_oui802_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->oui802_c(), output);
  }

  // optional uint32 subtype802_c = 3;
  if (has_subtype802_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->subtype802_c(), output);
  }

  // optional uint32 will_cbs_res_tcs = 4;
  if (has_will_cbs_res_tcs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->will_cbs_res_tcs(), output);
  }

  // optional uint32 prior_ass_c = 5;
  if (has_prior_ass_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->prior_ass_c(), output);
  }

  // optional uint64 tc_band_c = 6;
  if (has_tc_band_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->tc_band_c(), output);
  }

  // optional uint64 tsa_ass_c = 7;
  if (has_tsa_ass_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->tsa_ass_c(), output);
  }

  // optional uint32 tlv_type_len_r = 8 [default = 65049];
  if (has_tlv_type_len_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->tlv_type_len_r(), output);
  }

  // optional uint32 oui802_r = 9;
  if (has_oui802_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->oui802_r(), output);
  }

  // optional uint32 subtype802_r = 10;
  if (has_subtype802_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->subtype802_r(), output);
  }

  // optional uint32 reserved_r = 11;
  if (has_reserved_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->reserved_r(), output);
  }

  // optional uint32 prior_ass_r = 12;
  if (has_prior_ass_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->prior_ass_r(), output);
  }

  // optional uint64 tc_band_r = 13;
  if (has_tc_band_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->tc_band_r(), output);
  }

  // optional uint64 tsa_ass_r = 14;
  if (has_tsa_ass_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->tsa_ass_r(), output);
  }

  // optional uint32 tlv_type_len_p = 15 [default = 65030];
  if (has_tlv_type_len_p()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->tlv_type_len_p(), output);
  }

  // optional uint32 oui802_p = 16;
  if (has_oui802_p()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->oui802_p(), output);
  }

  // optional uint32 subtype802_p = 17;
  if (has_subtype802_p()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->subtype802_p(), output);
  }

  // optional uint32 will_mbc_res_pfc = 18;
  if (has_will_mbc_res_pfc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->will_mbc_res_pfc(), output);
  }

  // optional uint32 pfc_enable = 19;
  if (has_pfc_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->pfc_enable(), output);
  }

  // optional uint32 tlv_type_len_a = 20;
  if (has_tlv_type_len_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->tlv_type_len_a(), output);
  }

  // optional uint32 oui802_a = 21;
  if (has_oui802_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->oui802_a(), output);
  }

  // optional uint32 subtype802_a = 22;
  if (has_subtype802_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->subtype802_a(), output);
  }

  // optional uint32 reserved_a = 23;
  if (has_reserved_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->reserved_a(), output);
  }

  // repeated uint64 app_priority = 24 [packed = true];
  if (this->app_priority_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(24, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_app_priority_cached_byte_size_);
  }
  for (int i = 0; i < this->app_priority_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->app_priority(i), output);
  }

  // optional bool is_c = 25;
  if (has_is_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->is_c(), output);
  }

  // optional bool is_r = 26;
  if (has_is_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->is_r(), output);
  }

  // optional bool is_p = 27;
  if (has_is_p()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->is_p(), output);
  }

  // optional bool is_a = 28;
  if (has_is_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->is_a(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Dcbx::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 tlv_type_len_c = 1 [default = 65049];
  if (has_tlv_type_len_c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tlv_type_len_c(), target);
  }

  // optional uint32 oui802_c = 2;
  if (has_oui802_c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->oui802_c(), target);
  }

  // optional uint32 subtype802_c = 3;
  if (has_subtype802_c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->subtype802_c(), target);
  }

  // optional uint32 will_cbs_res_tcs = 4;
  if (has_will_cbs_res_tcs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->will_cbs_res_tcs(), target);
  }

  // optional uint32 prior_ass_c = 5;
  if (has_prior_ass_c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->prior_ass_c(), target);
  }

  // optional uint64 tc_band_c = 6;
  if (has_tc_band_c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->tc_band_c(), target);
  }

  // optional uint64 tsa_ass_c = 7;
  if (has_tsa_ass_c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->tsa_ass_c(), target);
  }

  // optional uint32 tlv_type_len_r = 8 [default = 65049];
  if (has_tlv_type_len_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->tlv_type_len_r(), target);
  }

  // optional uint32 oui802_r = 9;
  if (has_oui802_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->oui802_r(), target);
  }

  // optional uint32 subtype802_r = 10;
  if (has_subtype802_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->subtype802_r(), target);
  }

  // optional uint32 reserved_r = 11;
  if (has_reserved_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->reserved_r(), target);
  }

  // optional uint32 prior_ass_r = 12;
  if (has_prior_ass_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->prior_ass_r(), target);
  }

  // optional uint64 tc_band_r = 13;
  if (has_tc_band_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->tc_band_r(), target);
  }

  // optional uint64 tsa_ass_r = 14;
  if (has_tsa_ass_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->tsa_ass_r(), target);
  }

  // optional uint32 tlv_type_len_p = 15 [default = 65030];
  if (has_tlv_type_len_p()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->tlv_type_len_p(), target);
  }

  // optional uint32 oui802_p = 16;
  if (has_oui802_p()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->oui802_p(), target);
  }

  // optional uint32 subtype802_p = 17;
  if (has_subtype802_p()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->subtype802_p(), target);
  }

  // optional uint32 will_mbc_res_pfc = 18;
  if (has_will_mbc_res_pfc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->will_mbc_res_pfc(), target);
  }

  // optional uint32 pfc_enable = 19;
  if (has_pfc_enable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->pfc_enable(), target);
  }

  // optional uint32 tlv_type_len_a = 20;
  if (has_tlv_type_len_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->tlv_type_len_a(), target);
  }

  // optional uint32 oui802_a = 21;
  if (has_oui802_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->oui802_a(), target);
  }

  // optional uint32 subtype802_a = 22;
  if (has_subtype802_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->subtype802_a(), target);
  }

  // optional uint32 reserved_a = 23;
  if (has_reserved_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->reserved_a(), target);
  }

  // repeated uint64 app_priority = 24 [packed = true];
  if (this->app_priority_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      24,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _app_priority_cached_byte_size_, target);
  }
  for (int i = 0; i < this->app_priority_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->app_priority(i), target);
  }

  // optional bool is_c = 25;
  if (has_is_c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->is_c(), target);
  }

  // optional bool is_r = 26;
  if (has_is_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->is_r(), target);
  }

  // optional bool is_p = 27;
  if (has_is_p()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->is_p(), target);
  }

  // optional bool is_a = 28;
  if (has_is_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->is_a(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Dcbx::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 tlv_type_len_c = 1 [default = 65049];
    if (has_tlv_type_len_c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tlv_type_len_c());
    }

    // optional uint32 oui802_c = 2;
    if (has_oui802_c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oui802_c());
    }

    // optional uint32 subtype802_c = 3;
    if (has_subtype802_c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subtype802_c());
    }

    // optional uint32 will_cbs_res_tcs = 4;
    if (has_will_cbs_res_tcs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->will_cbs_res_tcs());
    }

    // optional uint32 prior_ass_c = 5;
    if (has_prior_ass_c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prior_ass_c());
    }

    // optional uint64 tc_band_c = 6;
    if (has_tc_band_c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tc_band_c());
    }

    // optional uint64 tsa_ass_c = 7;
    if (has_tsa_ass_c()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tsa_ass_c());
    }

    // optional uint32 tlv_type_len_r = 8 [default = 65049];
    if (has_tlv_type_len_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tlv_type_len_r());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 oui802_r = 9;
    if (has_oui802_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oui802_r());
    }

    // optional uint32 subtype802_r = 10;
    if (has_subtype802_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subtype802_r());
    }

    // optional uint32 reserved_r = 11;
    if (has_reserved_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reserved_r());
    }

    // optional uint32 prior_ass_r = 12;
    if (has_prior_ass_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prior_ass_r());
    }

    // optional uint64 tc_band_r = 13;
    if (has_tc_band_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tc_band_r());
    }

    // optional uint64 tsa_ass_r = 14;
    if (has_tsa_ass_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tsa_ass_r());
    }

    // optional uint32 tlv_type_len_p = 15 [default = 65030];
    if (has_tlv_type_len_p()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tlv_type_len_p());
    }

    // optional uint32 oui802_p = 16;
    if (has_oui802_p()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oui802_p());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 subtype802_p = 17;
    if (has_subtype802_p()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subtype802_p());
    }

    // optional uint32 will_mbc_res_pfc = 18;
    if (has_will_mbc_res_pfc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->will_mbc_res_pfc());
    }

    // optional uint32 pfc_enable = 19;
    if (has_pfc_enable()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pfc_enable());
    }

    // optional uint32 tlv_type_len_a = 20;
    if (has_tlv_type_len_a()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tlv_type_len_a());
    }

    // optional uint32 oui802_a = 21;
    if (has_oui802_a()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oui802_a());
    }

    // optional uint32 subtype802_a = 22;
    if (has_subtype802_a()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subtype802_a());
    }

    // optional uint32 reserved_a = 23;
    if (has_reserved_a()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reserved_a());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bool is_c = 25;
    if (has_is_c()) {
      total_size += 2 + 1;
    }

    // optional bool is_r = 26;
    if (has_is_r()) {
      total_size += 2 + 1;
    }

    // optional bool is_p = 27;
    if (has_is_p()) {
      total_size += 2 + 1;
    }

    // optional bool is_a = 28;
    if (has_is_a()) {
      total_size += 2 + 1;
    }

  }
  // repeated uint64 app_priority = 24 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->app_priority_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->app_priority(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _app_priority_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dcbx::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dcbx* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dcbx*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dcbx::MergeFrom(const Dcbx& from) {
  GOOGLE_CHECK_NE(&from, this);
  app_priority_.MergeFrom(from.app_priority_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tlv_type_len_c()) {
      set_tlv_type_len_c(from.tlv_type_len_c());
    }
    if (from.has_oui802_c()) {
      set_oui802_c(from.oui802_c());
    }
    if (from.has_subtype802_c()) {
      set_subtype802_c(from.subtype802_c());
    }
    if (from.has_will_cbs_res_tcs()) {
      set_will_cbs_res_tcs(from.will_cbs_res_tcs());
    }
    if (from.has_prior_ass_c()) {
      set_prior_ass_c(from.prior_ass_c());
    }
    if (from.has_tc_band_c()) {
      set_tc_band_c(from.tc_band_c());
    }
    if (from.has_tsa_ass_c()) {
      set_tsa_ass_c(from.tsa_ass_c());
    }
    if (from.has_tlv_type_len_r()) {
      set_tlv_type_len_r(from.tlv_type_len_r());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_oui802_r()) {
      set_oui802_r(from.oui802_r());
    }
    if (from.has_subtype802_r()) {
      set_subtype802_r(from.subtype802_r());
    }
    if (from.has_reserved_r()) {
      set_reserved_r(from.reserved_r());
    }
    if (from.has_prior_ass_r()) {
      set_prior_ass_r(from.prior_ass_r());
    }
    if (from.has_tc_band_r()) {
      set_tc_band_r(from.tc_band_r());
    }
    if (from.has_tsa_ass_r()) {
      set_tsa_ass_r(from.tsa_ass_r());
    }
    if (from.has_tlv_type_len_p()) {
      set_tlv_type_len_p(from.tlv_type_len_p());
    }
    if (from.has_oui802_p()) {
      set_oui802_p(from.oui802_p());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_subtype802_p()) {
      set_subtype802_p(from.subtype802_p());
    }
    if (from.has_will_mbc_res_pfc()) {
      set_will_mbc_res_pfc(from.will_mbc_res_pfc());
    }
    if (from.has_pfc_enable()) {
      set_pfc_enable(from.pfc_enable());
    }
    if (from.has_tlv_type_len_a()) {
      set_tlv_type_len_a(from.tlv_type_len_a());
    }
    if (from.has_oui802_a()) {
      set_oui802_a(from.oui802_a());
    }
    if (from.has_subtype802_a()) {
      set_subtype802_a(from.subtype802_a());
    }
    if (from.has_reserved_a()) {
      set_reserved_a(from.reserved_a());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_is_c()) {
      set_is_c(from.is_c());
    }
    if (from.has_is_r()) {
      set_is_r(from.is_r());
    }
    if (from.has_is_p()) {
      set_is_p(from.is_p());
    }
    if (from.has_is_a()) {
      set_is_a(from.is_a());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dcbx::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dcbx::CopyFrom(const Dcbx& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dcbx::IsInitialized() const {

  return true;
}

void Dcbx::Swap(Dcbx* other) {
  if (other != this) {
    std::swap(tlv_type_len_c_, other->tlv_type_len_c_);
    std::swap(oui802_c_, other->oui802_c_);
    std::swap(subtype802_c_, other->subtype802_c_);
    std::swap(will_cbs_res_tcs_, other->will_cbs_res_tcs_);
    std::swap(prior_ass_c_, other->prior_ass_c_);
    std::swap(tc_band_c_, other->tc_band_c_);
    std::swap(tsa_ass_c_, other->tsa_ass_c_);
    std::swap(tlv_type_len_r_, other->tlv_type_len_r_);
    std::swap(oui802_r_, other->oui802_r_);
    std::swap(subtype802_r_, other->subtype802_r_);
    std::swap(reserved_r_, other->reserved_r_);
    std::swap(prior_ass_r_, other->prior_ass_r_);
    std::swap(tc_band_r_, other->tc_band_r_);
    std::swap(tsa_ass_r_, other->tsa_ass_r_);
    std::swap(tlv_type_len_p_, other->tlv_type_len_p_);
    std::swap(oui802_p_, other->oui802_p_);
    std::swap(subtype802_p_, other->subtype802_p_);
    std::swap(will_mbc_res_pfc_, other->will_mbc_res_pfc_);
    std::swap(pfc_enable_, other->pfc_enable_);
    std::swap(tlv_type_len_a_, other->tlv_type_len_a_);
    std::swap(oui802_a_, other->oui802_a_);
    std::swap(subtype802_a_, other->subtype802_a_);
    std::swap(reserved_a_, other->reserved_a_);
    app_priority_.Swap(&other->app_priority_);
    std::swap(is_c_, other->is_c_);
    std::swap(is_r_, other->is_r_);
    std::swap(is_p_, other->is_p_);
    std::swap(is_a_, other->is_a_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dcbx::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dcbx_descriptor_;
  metadata.reflection = Dcbx_reflection_;
  return metadata;
}

::google::protobuf::internal::ExtensionIdentifier< ::OstProto::Protocol,
    ::google::protobuf::internal::MessageTypeTraits< ::OstProto::Dcbx >, 11, false >
  dcbx(kDcbxFieldNumber, ::OstProto::Dcbx::default_instance());

// @@protoc_insertion_point(namespace_scope)

}  // namespace OstProto

// @@protoc_insertion_point(global_scope)
