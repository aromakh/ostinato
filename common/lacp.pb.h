// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lacp.proto

#ifndef PROTOBUF_lacp_2eproto__INCLUDED
#define PROTOBUF_lacp_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "protocol.pb.h"
// @@protoc_insertion_point(includes)

namespace OstProto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_lacp_2eproto();
void protobuf_AssignDesc_lacp_2eproto();
void protobuf_ShutdownFile_lacp_2eproto();

class Lacp;

// ===================================================================

class Lacp : public ::google::protobuf::Message {
 public:
  Lacp();
  virtual ~Lacp();

  Lacp(const Lacp& from);

  inline Lacp& operator=(const Lacp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Lacp& default_instance();

  void Swap(Lacp* other);

  // implements Message ----------------------------------------------

  Lacp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Lacp& from);
  void MergeFrom(const Lacp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 proto_subtype = 1 [default = 1];
  inline bool has_proto_subtype() const;
  inline void clear_proto_subtype();
  static const int kProtoSubtypeFieldNumber = 1;
  inline ::google::protobuf::uint32 proto_subtype() const;
  inline void set_proto_subtype(::google::protobuf::uint32 value);

  // optional uint32 proto_ver_num = 2 [default = 1];
  inline bool has_proto_ver_num() const;
  inline void clear_proto_ver_num();
  static const int kProtoVerNumFieldNumber = 2;
  inline ::google::protobuf::uint32 proto_ver_num() const;
  inline void set_proto_ver_num(::google::protobuf::uint32 value);

  // optional uint32 proto_TLV_typeA = 3 [default = 1];
  inline bool has_proto_tlv_typea() const;
  inline void clear_proto_tlv_typea();
  static const int kProtoTLVTypeAFieldNumber = 3;
  inline ::google::protobuf::uint32 proto_tlv_typea() const;
  inline void set_proto_tlv_typea(::google::protobuf::uint32 value);

  // optional uint32 proto_Act_info_len = 4 [default = 20];
  inline bool has_proto_act_info_len() const;
  inline void clear_proto_act_info_len();
  static const int kProtoActInfoLenFieldNumber = 4;
  inline ::google::protobuf::uint32 proto_act_info_len() const;
  inline void set_proto_act_info_len(::google::protobuf::uint32 value);

  // optional uint32 proto_Act_sys_prior = 5;
  inline bool has_proto_act_sys_prior() const;
  inline void clear_proto_act_sys_prior();
  static const int kProtoActSysPriorFieldNumber = 5;
  inline ::google::protobuf::uint32 proto_act_sys_prior() const;
  inline void set_proto_act_sys_prior(::google::protobuf::uint32 value);

  // optional uint64 proto_Asys = 6;
  inline bool has_proto_asys() const;
  inline void clear_proto_asys();
  static const int kProtoAsysFieldNumber = 6;
  inline ::google::protobuf::uint64 proto_asys() const;
  inline void set_proto_asys(::google::protobuf::uint64 value);

  // optional uint32 proto_Akey = 7;
  inline bool has_proto_akey() const;
  inline void clear_proto_akey();
  static const int kProtoAkeyFieldNumber = 7;
  inline ::google::protobuf::uint32 proto_akey() const;
  inline void set_proto_akey(::google::protobuf::uint32 value);

  // optional uint32 proto_Aport_prior = 8;
  inline bool has_proto_aport_prior() const;
  inline void clear_proto_aport_prior();
  static const int kProtoAportPriorFieldNumber = 8;
  inline ::google::protobuf::uint32 proto_aport_prior() const;
  inline void set_proto_aport_prior(::google::protobuf::uint32 value);

  // optional uint32 proto_Aport = 9;
  inline bool has_proto_aport() const;
  inline void clear_proto_aport();
  static const int kProtoAportFieldNumber = 9;
  inline ::google::protobuf::uint32 proto_aport() const;
  inline void set_proto_aport(::google::protobuf::uint32 value);

  // optional uint32 proto_Astate = 10;
  inline bool has_proto_astate() const;
  inline void clear_proto_astate();
  static const int kProtoAstateFieldNumber = 10;
  inline ::google::protobuf::uint32 proto_astate() const;
  inline void set_proto_astate(::google::protobuf::uint32 value);

  // optional uint32 proto_Areserved = 11 [default = 0];
  inline bool has_proto_areserved() const;
  inline void clear_proto_areserved();
  static const int kProtoAreservedFieldNumber = 11;
  inline ::google::protobuf::uint32 proto_areserved() const;
  inline void set_proto_areserved(::google::protobuf::uint32 value);

  // optional uint32 proto_TLV_typeP = 12 [default = 2];
  inline bool has_proto_tlv_typep() const;
  inline void clear_proto_tlv_typep();
  static const int kProtoTLVTypePFieldNumber = 12;
  inline ::google::protobuf::uint32 proto_tlv_typep() const;
  inline void set_proto_tlv_typep(::google::protobuf::uint32 value);

  // optional uint32 proto_Par_info_len = 13 [default = 20];
  inline bool has_proto_par_info_len() const;
  inline void clear_proto_par_info_len();
  static const int kProtoParInfoLenFieldNumber = 13;
  inline ::google::protobuf::uint32 proto_par_info_len() const;
  inline void set_proto_par_info_len(::google::protobuf::uint32 value);

  // optional uint32 proto_Pstate = 14;
  inline bool has_proto_pstate() const;
  inline void clear_proto_pstate();
  static const int kProtoPstateFieldNumber = 14;
  inline ::google::protobuf::uint32 proto_pstate() const;
  inline void set_proto_pstate(::google::protobuf::uint32 value);

  // optional uint32 proto_Par_sys_prior = 15;
  inline bool has_proto_par_sys_prior() const;
  inline void clear_proto_par_sys_prior();
  static const int kProtoParSysPriorFieldNumber = 15;
  inline ::google::protobuf::uint32 proto_par_sys_prior() const;
  inline void set_proto_par_sys_prior(::google::protobuf::uint32 value);

  // optional uint64 proto_Psys = 16;
  inline bool has_proto_psys() const;
  inline void clear_proto_psys();
  static const int kProtoPsysFieldNumber = 16;
  inline ::google::protobuf::uint64 proto_psys() const;
  inline void set_proto_psys(::google::protobuf::uint64 value);

  // optional uint32 proto_Pkey = 17;
  inline bool has_proto_pkey() const;
  inline void clear_proto_pkey();
  static const int kProtoPkeyFieldNumber = 17;
  inline ::google::protobuf::uint32 proto_pkey() const;
  inline void set_proto_pkey(::google::protobuf::uint32 value);

  // optional uint32 proto_Pport_prior = 18;
  inline bool has_proto_pport_prior() const;
  inline void clear_proto_pport_prior();
  static const int kProtoPportPriorFieldNumber = 18;
  inline ::google::protobuf::uint32 proto_pport_prior() const;
  inline void set_proto_pport_prior(::google::protobuf::uint32 value);

  // optional uint32 proto_Pport = 19;
  inline bool has_proto_pport() const;
  inline void clear_proto_pport();
  static const int kProtoPportFieldNumber = 19;
  inline ::google::protobuf::uint32 proto_pport() const;
  inline void set_proto_pport(::google::protobuf::uint32 value);

  // optional uint32 proto_Preserved = 20 [default = 0];
  inline bool has_proto_preserved() const;
  inline void clear_proto_preserved();
  static const int kProtoPreservedFieldNumber = 20;
  inline ::google::protobuf::uint32 proto_preserved() const;
  inline void set_proto_preserved(::google::protobuf::uint32 value);

  // optional uint32 proto_TLV_typeC = 21 [default = 3];
  inline bool has_proto_tlv_typec() const;
  inline void clear_proto_tlv_typec();
  static const int kProtoTLVTypeCFieldNumber = 21;
  inline ::google::protobuf::uint32 proto_tlv_typec() const;
  inline void set_proto_tlv_typec(::google::protobuf::uint32 value);

  // optional uint32 proto_Coll_info_len = 22 [default = 16];
  inline bool has_proto_coll_info_len() const;
  inline void clear_proto_coll_info_len();
  static const int kProtoCollInfoLenFieldNumber = 22;
  inline ::google::protobuf::uint32 proto_coll_info_len() const;
  inline void set_proto_coll_info_len(::google::protobuf::uint32 value);

  // optional uint32 proto_CollMaxDelay = 23;
  inline bool has_proto_collmaxdelay() const;
  inline void clear_proto_collmaxdelay();
  static const int kProtoCollMaxDelayFieldNumber = 23;
  inline ::google::protobuf::uint32 proto_collmaxdelay() const;
  inline void set_proto_collmaxdelay(::google::protobuf::uint32 value);

  // optional uint64 proto_Creserved0 = 24 [default = 0];
  inline bool has_proto_creserved0() const;
  inline void clear_proto_creserved0();
  static const int kProtoCreserved0FieldNumber = 24;
  inline ::google::protobuf::uint64 proto_creserved0() const;
  inline void set_proto_creserved0(::google::protobuf::uint64 value);

  // optional uint64 proto_Creserved1 = 25 [default = 0];
  inline bool has_proto_creserved1() const;
  inline void clear_proto_creserved1();
  static const int kProtoCreserved1FieldNumber = 25;
  inline ::google::protobuf::uint64 proto_creserved1() const;
  inline void set_proto_creserved1(::google::protobuf::uint64 value);

  // optional uint32 proto_TLV_typeTerm = 26 [default = 0];
  inline bool has_proto_tlv_typeterm() const;
  inline void clear_proto_tlv_typeterm();
  static const int kProtoTLVTypeTermFieldNumber = 26;
  inline ::google::protobuf::uint32 proto_tlv_typeterm() const;
  inline void set_proto_tlv_typeterm(::google::protobuf::uint32 value);

  // optional uint32 proto_Term_len = 27 [default = 0];
  inline bool has_proto_term_len() const;
  inline void clear_proto_term_len();
  static const int kProtoTermLenFieldNumber = 27;
  inline ::google::protobuf::uint32 proto_term_len() const;
  inline void set_proto_term_len(::google::protobuf::uint32 value);

  // optional uint64 proto_reserved0 = 28 [default = 0];
  inline bool has_proto_reserved0() const;
  inline void clear_proto_reserved0();
  static const int kProtoReserved0FieldNumber = 28;
  inline ::google::protobuf::uint64 proto_reserved0() const;
  inline void set_proto_reserved0(::google::protobuf::uint64 value);

  // optional uint64 proto_reserved1 = 29 [default = 0];
  inline bool has_proto_reserved1() const;
  inline void clear_proto_reserved1();
  static const int kProtoReserved1FieldNumber = 29;
  inline ::google::protobuf::uint64 proto_reserved1() const;
  inline void set_proto_reserved1(::google::protobuf::uint64 value);

  // optional uint64 proto_reserved2 = 30 [default = 0];
  inline bool has_proto_reserved2() const;
  inline void clear_proto_reserved2();
  static const int kProtoReserved2FieldNumber = 30;
  inline ::google::protobuf::uint64 proto_reserved2() const;
  inline void set_proto_reserved2(::google::protobuf::uint64 value);

  // optional uint64 proto_reserved3 = 31 [default = 0];
  inline bool has_proto_reserved3() const;
  inline void clear_proto_reserved3();
  static const int kProtoReserved3FieldNumber = 31;
  inline ::google::protobuf::uint64 proto_reserved3() const;
  inline void set_proto_reserved3(::google::protobuf::uint64 value);

  // optional uint64 proto_reserved4 = 32 [default = 0];
  inline bool has_proto_reserved4() const;
  inline void clear_proto_reserved4();
  static const int kProtoReserved4FieldNumber = 32;
  inline ::google::protobuf::uint64 proto_reserved4() const;
  inline void set_proto_reserved4(::google::protobuf::uint64 value);

  // optional uint64 proto_reserved5 = 33 [default = 0];
  inline bool has_proto_reserved5() const;
  inline void clear_proto_reserved5();
  static const int kProtoReserved5FieldNumber = 33;
  inline ::google::protobuf::uint64 proto_reserved5() const;
  inline void set_proto_reserved5(::google::protobuf::uint64 value);

  // optional uint64 proto_reserved6 = 34 [default = 0];
  inline bool has_proto_reserved6() const;
  inline void clear_proto_reserved6();
  static const int kProtoReserved6FieldNumber = 34;
  inline ::google::protobuf::uint64 proto_reserved6() const;
  inline void set_proto_reserved6(::google::protobuf::uint64 value);

  // optional uint64 proto_FCS = 35 [default = 0];
  inline bool has_proto_fcs() const;
  inline void clear_proto_fcs();
  static const int kProtoFCSFieldNumber = 35;
  inline ::google::protobuf::uint64 proto_fcs() const;
  inline void set_proto_fcs(::google::protobuf::uint64 value);

  // optional bool proto_is_subtype = 36;
  inline bool has_proto_is_subtype() const;
  inline void clear_proto_is_subtype();
  static const int kProtoIsSubtypeFieldNumber = 36;
  inline bool proto_is_subtype() const;
  inline void set_proto_is_subtype(bool value);

  // optional bool proto_is_version = 37;
  inline bool has_proto_is_version() const;
  inline void clear_proto_is_version();
  static const int kProtoIsVersionFieldNumber = 37;
  inline bool proto_is_version() const;
  inline void set_proto_is_version(bool value);

  // optional bool proto_is_tlv_a = 38;
  inline bool has_proto_is_tlv_a() const;
  inline void clear_proto_is_tlv_a();
  static const int kProtoIsTlvAFieldNumber = 38;
  inline bool proto_is_tlv_a() const;
  inline void set_proto_is_tlv_a(bool value);

  // optional bool proto_is_actor_info = 39;
  inline bool has_proto_is_actor_info() const;
  inline void clear_proto_is_actor_info();
  static const int kProtoIsActorInfoFieldNumber = 39;
  inline bool proto_is_actor_info() const;
  inline void set_proto_is_actor_info(bool value);

  // optional bool proto_is_tlv_p = 40;
  inline bool has_proto_is_tlv_p() const;
  inline void clear_proto_is_tlv_p();
  static const int kProtoIsTlvPFieldNumber = 40;
  inline bool proto_is_tlv_p() const;
  inline void set_proto_is_tlv_p(bool value);

  // optional bool proto_is_partner_info = 41;
  inline bool has_proto_is_partner_info() const;
  inline void clear_proto_is_partner_info();
  static const int kProtoIsPartnerInfoFieldNumber = 41;
  inline bool proto_is_partner_info() const;
  inline void set_proto_is_partner_info(bool value);

  // optional bool proto_is_tlv_c = 42;
  inline bool has_proto_is_tlv_c() const;
  inline void clear_proto_is_tlv_c();
  static const int kProtoIsTlvCFieldNumber = 42;
  inline bool proto_is_tlv_c() const;
  inline void set_proto_is_tlv_c(bool value);

  // optional bool proto_is_collector_info = 43;
  inline bool has_proto_is_collector_info() const;
  inline void clear_proto_is_collector_info();
  static const int kProtoIsCollectorInfoFieldNumber = 43;
  inline bool proto_is_collector_info() const;
  inline void set_proto_is_collector_info(bool value);

  // optional bool proto_is_tlv_t = 44;
  inline bool has_proto_is_tlv_t() const;
  inline void clear_proto_is_tlv_t();
  static const int kProtoIsTlvTFieldNumber = 44;
  inline bool proto_is_tlv_t() const;
  inline void set_proto_is_tlv_t(bool value);

  // optional bool proto_is_terminator_len = 45;
  inline bool has_proto_is_terminator_len() const;
  inline void clear_proto_is_terminator_len();
  static const int kProtoIsTerminatorLenFieldNumber = 45;
  inline bool proto_is_terminator_len() const;
  inline void set_proto_is_terminator_len(bool value);

  // @@protoc_insertion_point(class_scope:OstProto.Lacp)
 private:
  inline void set_has_proto_subtype();
  inline void clear_has_proto_subtype();
  inline void set_has_proto_ver_num();
  inline void clear_has_proto_ver_num();
  inline void set_has_proto_tlv_typea();
  inline void clear_has_proto_tlv_typea();
  inline void set_has_proto_act_info_len();
  inline void clear_has_proto_act_info_len();
  inline void set_has_proto_act_sys_prior();
  inline void clear_has_proto_act_sys_prior();
  inline void set_has_proto_asys();
  inline void clear_has_proto_asys();
  inline void set_has_proto_akey();
  inline void clear_has_proto_akey();
  inline void set_has_proto_aport_prior();
  inline void clear_has_proto_aport_prior();
  inline void set_has_proto_aport();
  inline void clear_has_proto_aport();
  inline void set_has_proto_astate();
  inline void clear_has_proto_astate();
  inline void set_has_proto_areserved();
  inline void clear_has_proto_areserved();
  inline void set_has_proto_tlv_typep();
  inline void clear_has_proto_tlv_typep();
  inline void set_has_proto_par_info_len();
  inline void clear_has_proto_par_info_len();
  inline void set_has_proto_pstate();
  inline void clear_has_proto_pstate();
  inline void set_has_proto_par_sys_prior();
  inline void clear_has_proto_par_sys_prior();
  inline void set_has_proto_psys();
  inline void clear_has_proto_psys();
  inline void set_has_proto_pkey();
  inline void clear_has_proto_pkey();
  inline void set_has_proto_pport_prior();
  inline void clear_has_proto_pport_prior();
  inline void set_has_proto_pport();
  inline void clear_has_proto_pport();
  inline void set_has_proto_preserved();
  inline void clear_has_proto_preserved();
  inline void set_has_proto_tlv_typec();
  inline void clear_has_proto_tlv_typec();
  inline void set_has_proto_coll_info_len();
  inline void clear_has_proto_coll_info_len();
  inline void set_has_proto_collmaxdelay();
  inline void clear_has_proto_collmaxdelay();
  inline void set_has_proto_creserved0();
  inline void clear_has_proto_creserved0();
  inline void set_has_proto_creserved1();
  inline void clear_has_proto_creserved1();
  inline void set_has_proto_tlv_typeterm();
  inline void clear_has_proto_tlv_typeterm();
  inline void set_has_proto_term_len();
  inline void clear_has_proto_term_len();
  inline void set_has_proto_reserved0();
  inline void clear_has_proto_reserved0();
  inline void set_has_proto_reserved1();
  inline void clear_has_proto_reserved1();
  inline void set_has_proto_reserved2();
  inline void clear_has_proto_reserved2();
  inline void set_has_proto_reserved3();
  inline void clear_has_proto_reserved3();
  inline void set_has_proto_reserved4();
  inline void clear_has_proto_reserved4();
  inline void set_has_proto_reserved5();
  inline void clear_has_proto_reserved5();
  inline void set_has_proto_reserved6();
  inline void clear_has_proto_reserved6();
  inline void set_has_proto_fcs();
  inline void clear_has_proto_fcs();
  inline void set_has_proto_is_subtype();
  inline void clear_has_proto_is_subtype();
  inline void set_has_proto_is_version();
  inline void clear_has_proto_is_version();
  inline void set_has_proto_is_tlv_a();
  inline void clear_has_proto_is_tlv_a();
  inline void set_has_proto_is_actor_info();
  inline void clear_has_proto_is_actor_info();
  inline void set_has_proto_is_tlv_p();
  inline void clear_has_proto_is_tlv_p();
  inline void set_has_proto_is_partner_info();
  inline void clear_has_proto_is_partner_info();
  inline void set_has_proto_is_tlv_c();
  inline void clear_has_proto_is_tlv_c();
  inline void set_has_proto_is_collector_info();
  inline void clear_has_proto_is_collector_info();
  inline void set_has_proto_is_tlv_t();
  inline void clear_has_proto_is_tlv_t();
  inline void set_has_proto_is_terminator_len();
  inline void clear_has_proto_is_terminator_len();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 proto_subtype_;
  ::google::protobuf::uint32 proto_ver_num_;
  ::google::protobuf::uint32 proto_tlv_typea_;
  ::google::protobuf::uint32 proto_act_info_len_;
  ::google::protobuf::uint64 proto_asys_;
  ::google::protobuf::uint32 proto_act_sys_prior_;
  ::google::protobuf::uint32 proto_akey_;
  ::google::protobuf::uint32 proto_aport_prior_;
  ::google::protobuf::uint32 proto_aport_;
  ::google::protobuf::uint32 proto_astate_;
  ::google::protobuf::uint32 proto_areserved_;
  ::google::protobuf::uint32 proto_tlv_typep_;
  ::google::protobuf::uint32 proto_par_info_len_;
  ::google::protobuf::uint32 proto_pstate_;
  ::google::protobuf::uint32 proto_par_sys_prior_;
  ::google::protobuf::uint64 proto_psys_;
  ::google::protobuf::uint32 proto_pkey_;
  ::google::protobuf::uint32 proto_pport_prior_;
  ::google::protobuf::uint32 proto_pport_;
  ::google::protobuf::uint32 proto_preserved_;
  ::google::protobuf::uint32 proto_tlv_typec_;
  ::google::protobuf::uint32 proto_coll_info_len_;
  ::google::protobuf::uint64 proto_creserved0_;
  ::google::protobuf::uint32 proto_collmaxdelay_;
  ::google::protobuf::uint32 proto_tlv_typeterm_;
  ::google::protobuf::uint64 proto_creserved1_;
  ::google::protobuf::uint64 proto_reserved0_;
  ::google::protobuf::uint64 proto_reserved1_;
  ::google::protobuf::uint64 proto_reserved2_;
  ::google::protobuf::uint64 proto_reserved3_;
  ::google::protobuf::uint64 proto_reserved4_;
  ::google::protobuf::uint64 proto_reserved5_;
  ::google::protobuf::uint64 proto_reserved6_;
  ::google::protobuf::uint64 proto_fcs_;
  ::google::protobuf::uint32 proto_term_len_;
  bool proto_is_subtype_;
  bool proto_is_version_;
  bool proto_is_tlv_a_;
  bool proto_is_actor_info_;
  bool proto_is_tlv_p_;
  bool proto_is_partner_info_;
  bool proto_is_tlv_c_;
  bool proto_is_collector_info_;
  bool proto_is_tlv_t_;
  bool proto_is_terminator_len_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(45 + 31) / 32];

  friend void  protobuf_AddDesc_lacp_2eproto();
  friend void protobuf_AssignDesc_lacp_2eproto();
  friend void protobuf_ShutdownFile_lacp_2eproto();

  void InitAsDefaultInstance();
  static Lacp* default_instance_;
};
// ===================================================================

static const int kLacpFieldNumber = 299;
extern ::google::protobuf::internal::ExtensionIdentifier< ::OstProto::Protocol,
    ::google::protobuf::internal::MessageTypeTraits< ::OstProto::Lacp >, 11, false >
  lacp;

// ===================================================================

// Lacp

// optional uint32 proto_subtype = 1 [default = 1];
inline bool Lacp::has_proto_subtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Lacp::set_has_proto_subtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Lacp::clear_has_proto_subtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Lacp::clear_proto_subtype() {
  proto_subtype_ = 1u;
  clear_has_proto_subtype();
}
inline ::google::protobuf::uint32 Lacp::proto_subtype() const {
  return proto_subtype_;
}
inline void Lacp::set_proto_subtype(::google::protobuf::uint32 value) {
  set_has_proto_subtype();
  proto_subtype_ = value;
}

// optional uint32 proto_ver_num = 2 [default = 1];
inline bool Lacp::has_proto_ver_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Lacp::set_has_proto_ver_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Lacp::clear_has_proto_ver_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Lacp::clear_proto_ver_num() {
  proto_ver_num_ = 1u;
  clear_has_proto_ver_num();
}
inline ::google::protobuf::uint32 Lacp::proto_ver_num() const {
  return proto_ver_num_;
}
inline void Lacp::set_proto_ver_num(::google::protobuf::uint32 value) {
  set_has_proto_ver_num();
  proto_ver_num_ = value;
}

// optional uint32 proto_TLV_typeA = 3 [default = 1];
inline bool Lacp::has_proto_tlv_typea() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Lacp::set_has_proto_tlv_typea() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Lacp::clear_has_proto_tlv_typea() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Lacp::clear_proto_tlv_typea() {
  proto_tlv_typea_ = 1u;
  clear_has_proto_tlv_typea();
}
inline ::google::protobuf::uint32 Lacp::proto_tlv_typea() const {
  return proto_tlv_typea_;
}
inline void Lacp::set_proto_tlv_typea(::google::protobuf::uint32 value) {
  set_has_proto_tlv_typea();
  proto_tlv_typea_ = value;
}

// optional uint32 proto_Act_info_len = 4 [default = 20];
inline bool Lacp::has_proto_act_info_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Lacp::set_has_proto_act_info_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Lacp::clear_has_proto_act_info_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Lacp::clear_proto_act_info_len() {
  proto_act_info_len_ = 20u;
  clear_has_proto_act_info_len();
}
inline ::google::protobuf::uint32 Lacp::proto_act_info_len() const {
  return proto_act_info_len_;
}
inline void Lacp::set_proto_act_info_len(::google::protobuf::uint32 value) {
  set_has_proto_act_info_len();
  proto_act_info_len_ = value;
}

// optional uint32 proto_Act_sys_prior = 5;
inline bool Lacp::has_proto_act_sys_prior() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Lacp::set_has_proto_act_sys_prior() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Lacp::clear_has_proto_act_sys_prior() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Lacp::clear_proto_act_sys_prior() {
  proto_act_sys_prior_ = 0u;
  clear_has_proto_act_sys_prior();
}
inline ::google::protobuf::uint32 Lacp::proto_act_sys_prior() const {
  return proto_act_sys_prior_;
}
inline void Lacp::set_proto_act_sys_prior(::google::protobuf::uint32 value) {
  set_has_proto_act_sys_prior();
  proto_act_sys_prior_ = value;
}

// optional uint64 proto_Asys = 6;
inline bool Lacp::has_proto_asys() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Lacp::set_has_proto_asys() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Lacp::clear_has_proto_asys() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Lacp::clear_proto_asys() {
  proto_asys_ = GOOGLE_ULONGLONG(0);
  clear_has_proto_asys();
}
inline ::google::protobuf::uint64 Lacp::proto_asys() const {
  return proto_asys_;
}
inline void Lacp::set_proto_asys(::google::protobuf::uint64 value) {
  set_has_proto_asys();
  proto_asys_ = value;
}

// optional uint32 proto_Akey = 7;
inline bool Lacp::has_proto_akey() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Lacp::set_has_proto_akey() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Lacp::clear_has_proto_akey() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Lacp::clear_proto_akey() {
  proto_akey_ = 0u;
  clear_has_proto_akey();
}
inline ::google::protobuf::uint32 Lacp::proto_akey() const {
  return proto_akey_;
}
inline void Lacp::set_proto_akey(::google::protobuf::uint32 value) {
  set_has_proto_akey();
  proto_akey_ = value;
}

// optional uint32 proto_Aport_prior = 8;
inline bool Lacp::has_proto_aport_prior() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Lacp::set_has_proto_aport_prior() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Lacp::clear_has_proto_aport_prior() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Lacp::clear_proto_aport_prior() {
  proto_aport_prior_ = 0u;
  clear_has_proto_aport_prior();
}
inline ::google::protobuf::uint32 Lacp::proto_aport_prior() const {
  return proto_aport_prior_;
}
inline void Lacp::set_proto_aport_prior(::google::protobuf::uint32 value) {
  set_has_proto_aport_prior();
  proto_aport_prior_ = value;
}

// optional uint32 proto_Aport = 9;
inline bool Lacp::has_proto_aport() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Lacp::set_has_proto_aport() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Lacp::clear_has_proto_aport() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Lacp::clear_proto_aport() {
  proto_aport_ = 0u;
  clear_has_proto_aport();
}
inline ::google::protobuf::uint32 Lacp::proto_aport() const {
  return proto_aport_;
}
inline void Lacp::set_proto_aport(::google::protobuf::uint32 value) {
  set_has_proto_aport();
  proto_aport_ = value;
}

// optional uint32 proto_Astate = 10;
inline bool Lacp::has_proto_astate() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Lacp::set_has_proto_astate() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Lacp::clear_has_proto_astate() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Lacp::clear_proto_astate() {
  proto_astate_ = 0u;
  clear_has_proto_astate();
}
inline ::google::protobuf::uint32 Lacp::proto_astate() const {
  return proto_astate_;
}
inline void Lacp::set_proto_astate(::google::protobuf::uint32 value) {
  set_has_proto_astate();
  proto_astate_ = value;
}

// optional uint32 proto_Areserved = 11 [default = 0];
inline bool Lacp::has_proto_areserved() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Lacp::set_has_proto_areserved() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Lacp::clear_has_proto_areserved() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Lacp::clear_proto_areserved() {
  proto_areserved_ = 0u;
  clear_has_proto_areserved();
}
inline ::google::protobuf::uint32 Lacp::proto_areserved() const {
  return proto_areserved_;
}
inline void Lacp::set_proto_areserved(::google::protobuf::uint32 value) {
  set_has_proto_areserved();
  proto_areserved_ = value;
}

// optional uint32 proto_TLV_typeP = 12 [default = 2];
inline bool Lacp::has_proto_tlv_typep() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Lacp::set_has_proto_tlv_typep() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Lacp::clear_has_proto_tlv_typep() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Lacp::clear_proto_tlv_typep() {
  proto_tlv_typep_ = 2u;
  clear_has_proto_tlv_typep();
}
inline ::google::protobuf::uint32 Lacp::proto_tlv_typep() const {
  return proto_tlv_typep_;
}
inline void Lacp::set_proto_tlv_typep(::google::protobuf::uint32 value) {
  set_has_proto_tlv_typep();
  proto_tlv_typep_ = value;
}

// optional uint32 proto_Par_info_len = 13 [default = 20];
inline bool Lacp::has_proto_par_info_len() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Lacp::set_has_proto_par_info_len() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Lacp::clear_has_proto_par_info_len() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Lacp::clear_proto_par_info_len() {
  proto_par_info_len_ = 20u;
  clear_has_proto_par_info_len();
}
inline ::google::protobuf::uint32 Lacp::proto_par_info_len() const {
  return proto_par_info_len_;
}
inline void Lacp::set_proto_par_info_len(::google::protobuf::uint32 value) {
  set_has_proto_par_info_len();
  proto_par_info_len_ = value;
}

// optional uint32 proto_Pstate = 14;
inline bool Lacp::has_proto_pstate() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Lacp::set_has_proto_pstate() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Lacp::clear_has_proto_pstate() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Lacp::clear_proto_pstate() {
  proto_pstate_ = 0u;
  clear_has_proto_pstate();
}
inline ::google::protobuf::uint32 Lacp::proto_pstate() const {
  return proto_pstate_;
}
inline void Lacp::set_proto_pstate(::google::protobuf::uint32 value) {
  set_has_proto_pstate();
  proto_pstate_ = value;
}

// optional uint32 proto_Par_sys_prior = 15;
inline bool Lacp::has_proto_par_sys_prior() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Lacp::set_has_proto_par_sys_prior() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Lacp::clear_has_proto_par_sys_prior() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Lacp::clear_proto_par_sys_prior() {
  proto_par_sys_prior_ = 0u;
  clear_has_proto_par_sys_prior();
}
inline ::google::protobuf::uint32 Lacp::proto_par_sys_prior() const {
  return proto_par_sys_prior_;
}
inline void Lacp::set_proto_par_sys_prior(::google::protobuf::uint32 value) {
  set_has_proto_par_sys_prior();
  proto_par_sys_prior_ = value;
}

// optional uint64 proto_Psys = 16;
inline bool Lacp::has_proto_psys() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Lacp::set_has_proto_psys() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Lacp::clear_has_proto_psys() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Lacp::clear_proto_psys() {
  proto_psys_ = GOOGLE_ULONGLONG(0);
  clear_has_proto_psys();
}
inline ::google::protobuf::uint64 Lacp::proto_psys() const {
  return proto_psys_;
}
inline void Lacp::set_proto_psys(::google::protobuf::uint64 value) {
  set_has_proto_psys();
  proto_psys_ = value;
}

// optional uint32 proto_Pkey = 17;
inline bool Lacp::has_proto_pkey() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Lacp::set_has_proto_pkey() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Lacp::clear_has_proto_pkey() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Lacp::clear_proto_pkey() {
  proto_pkey_ = 0u;
  clear_has_proto_pkey();
}
inline ::google::protobuf::uint32 Lacp::proto_pkey() const {
  return proto_pkey_;
}
inline void Lacp::set_proto_pkey(::google::protobuf::uint32 value) {
  set_has_proto_pkey();
  proto_pkey_ = value;
}

// optional uint32 proto_Pport_prior = 18;
inline bool Lacp::has_proto_pport_prior() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Lacp::set_has_proto_pport_prior() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Lacp::clear_has_proto_pport_prior() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Lacp::clear_proto_pport_prior() {
  proto_pport_prior_ = 0u;
  clear_has_proto_pport_prior();
}
inline ::google::protobuf::uint32 Lacp::proto_pport_prior() const {
  return proto_pport_prior_;
}
inline void Lacp::set_proto_pport_prior(::google::protobuf::uint32 value) {
  set_has_proto_pport_prior();
  proto_pport_prior_ = value;
}

// optional uint32 proto_Pport = 19;
inline bool Lacp::has_proto_pport() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Lacp::set_has_proto_pport() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Lacp::clear_has_proto_pport() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Lacp::clear_proto_pport() {
  proto_pport_ = 0u;
  clear_has_proto_pport();
}
inline ::google::protobuf::uint32 Lacp::proto_pport() const {
  return proto_pport_;
}
inline void Lacp::set_proto_pport(::google::protobuf::uint32 value) {
  set_has_proto_pport();
  proto_pport_ = value;
}

// optional uint32 proto_Preserved = 20 [default = 0];
inline bool Lacp::has_proto_preserved() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Lacp::set_has_proto_preserved() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Lacp::clear_has_proto_preserved() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Lacp::clear_proto_preserved() {
  proto_preserved_ = 0u;
  clear_has_proto_preserved();
}
inline ::google::protobuf::uint32 Lacp::proto_preserved() const {
  return proto_preserved_;
}
inline void Lacp::set_proto_preserved(::google::protobuf::uint32 value) {
  set_has_proto_preserved();
  proto_preserved_ = value;
}

// optional uint32 proto_TLV_typeC = 21 [default = 3];
inline bool Lacp::has_proto_tlv_typec() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Lacp::set_has_proto_tlv_typec() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Lacp::clear_has_proto_tlv_typec() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Lacp::clear_proto_tlv_typec() {
  proto_tlv_typec_ = 3u;
  clear_has_proto_tlv_typec();
}
inline ::google::protobuf::uint32 Lacp::proto_tlv_typec() const {
  return proto_tlv_typec_;
}
inline void Lacp::set_proto_tlv_typec(::google::protobuf::uint32 value) {
  set_has_proto_tlv_typec();
  proto_tlv_typec_ = value;
}

// optional uint32 proto_Coll_info_len = 22 [default = 16];
inline bool Lacp::has_proto_coll_info_len() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Lacp::set_has_proto_coll_info_len() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Lacp::clear_has_proto_coll_info_len() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Lacp::clear_proto_coll_info_len() {
  proto_coll_info_len_ = 16u;
  clear_has_proto_coll_info_len();
}
inline ::google::protobuf::uint32 Lacp::proto_coll_info_len() const {
  return proto_coll_info_len_;
}
inline void Lacp::set_proto_coll_info_len(::google::protobuf::uint32 value) {
  set_has_proto_coll_info_len();
  proto_coll_info_len_ = value;
}

// optional uint32 proto_CollMaxDelay = 23;
inline bool Lacp::has_proto_collmaxdelay() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Lacp::set_has_proto_collmaxdelay() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Lacp::clear_has_proto_collmaxdelay() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Lacp::clear_proto_collmaxdelay() {
  proto_collmaxdelay_ = 0u;
  clear_has_proto_collmaxdelay();
}
inline ::google::protobuf::uint32 Lacp::proto_collmaxdelay() const {
  return proto_collmaxdelay_;
}
inline void Lacp::set_proto_collmaxdelay(::google::protobuf::uint32 value) {
  set_has_proto_collmaxdelay();
  proto_collmaxdelay_ = value;
}

// optional uint64 proto_Creserved0 = 24 [default = 0];
inline bool Lacp::has_proto_creserved0() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Lacp::set_has_proto_creserved0() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Lacp::clear_has_proto_creserved0() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Lacp::clear_proto_creserved0() {
  proto_creserved0_ = GOOGLE_ULONGLONG(0);
  clear_has_proto_creserved0();
}
inline ::google::protobuf::uint64 Lacp::proto_creserved0() const {
  return proto_creserved0_;
}
inline void Lacp::set_proto_creserved0(::google::protobuf::uint64 value) {
  set_has_proto_creserved0();
  proto_creserved0_ = value;
}

// optional uint64 proto_Creserved1 = 25 [default = 0];
inline bool Lacp::has_proto_creserved1() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Lacp::set_has_proto_creserved1() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Lacp::clear_has_proto_creserved1() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Lacp::clear_proto_creserved1() {
  proto_creserved1_ = GOOGLE_ULONGLONG(0);
  clear_has_proto_creserved1();
}
inline ::google::protobuf::uint64 Lacp::proto_creserved1() const {
  return proto_creserved1_;
}
inline void Lacp::set_proto_creserved1(::google::protobuf::uint64 value) {
  set_has_proto_creserved1();
  proto_creserved1_ = value;
}

// optional uint32 proto_TLV_typeTerm = 26 [default = 0];
inline bool Lacp::has_proto_tlv_typeterm() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Lacp::set_has_proto_tlv_typeterm() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Lacp::clear_has_proto_tlv_typeterm() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Lacp::clear_proto_tlv_typeterm() {
  proto_tlv_typeterm_ = 0u;
  clear_has_proto_tlv_typeterm();
}
inline ::google::protobuf::uint32 Lacp::proto_tlv_typeterm() const {
  return proto_tlv_typeterm_;
}
inline void Lacp::set_proto_tlv_typeterm(::google::protobuf::uint32 value) {
  set_has_proto_tlv_typeterm();
  proto_tlv_typeterm_ = value;
}

// optional uint32 proto_Term_len = 27 [default = 0];
inline bool Lacp::has_proto_term_len() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void Lacp::set_has_proto_term_len() {
  _has_bits_[0] |= 0x04000000u;
}
inline void Lacp::clear_has_proto_term_len() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void Lacp::clear_proto_term_len() {
  proto_term_len_ = 0u;
  clear_has_proto_term_len();
}
inline ::google::protobuf::uint32 Lacp::proto_term_len() const {
  return proto_term_len_;
}
inline void Lacp::set_proto_term_len(::google::protobuf::uint32 value) {
  set_has_proto_term_len();
  proto_term_len_ = value;
}

// optional uint64 proto_reserved0 = 28 [default = 0];
inline bool Lacp::has_proto_reserved0() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void Lacp::set_has_proto_reserved0() {
  _has_bits_[0] |= 0x08000000u;
}
inline void Lacp::clear_has_proto_reserved0() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void Lacp::clear_proto_reserved0() {
  proto_reserved0_ = GOOGLE_ULONGLONG(0);
  clear_has_proto_reserved0();
}
inline ::google::protobuf::uint64 Lacp::proto_reserved0() const {
  return proto_reserved0_;
}
inline void Lacp::set_proto_reserved0(::google::protobuf::uint64 value) {
  set_has_proto_reserved0();
  proto_reserved0_ = value;
}

// optional uint64 proto_reserved1 = 29 [default = 0];
inline bool Lacp::has_proto_reserved1() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void Lacp::set_has_proto_reserved1() {
  _has_bits_[0] |= 0x10000000u;
}
inline void Lacp::clear_has_proto_reserved1() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void Lacp::clear_proto_reserved1() {
  proto_reserved1_ = GOOGLE_ULONGLONG(0);
  clear_has_proto_reserved1();
}
inline ::google::protobuf::uint64 Lacp::proto_reserved1() const {
  return proto_reserved1_;
}
inline void Lacp::set_proto_reserved1(::google::protobuf::uint64 value) {
  set_has_proto_reserved1();
  proto_reserved1_ = value;
}

// optional uint64 proto_reserved2 = 30 [default = 0];
inline bool Lacp::has_proto_reserved2() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void Lacp::set_has_proto_reserved2() {
  _has_bits_[0] |= 0x20000000u;
}
inline void Lacp::clear_has_proto_reserved2() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void Lacp::clear_proto_reserved2() {
  proto_reserved2_ = GOOGLE_ULONGLONG(0);
  clear_has_proto_reserved2();
}
inline ::google::protobuf::uint64 Lacp::proto_reserved2() const {
  return proto_reserved2_;
}
inline void Lacp::set_proto_reserved2(::google::protobuf::uint64 value) {
  set_has_proto_reserved2();
  proto_reserved2_ = value;
}

// optional uint64 proto_reserved3 = 31 [default = 0];
inline bool Lacp::has_proto_reserved3() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void Lacp::set_has_proto_reserved3() {
  _has_bits_[0] |= 0x40000000u;
}
inline void Lacp::clear_has_proto_reserved3() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void Lacp::clear_proto_reserved3() {
  proto_reserved3_ = GOOGLE_ULONGLONG(0);
  clear_has_proto_reserved3();
}
inline ::google::protobuf::uint64 Lacp::proto_reserved3() const {
  return proto_reserved3_;
}
inline void Lacp::set_proto_reserved3(::google::protobuf::uint64 value) {
  set_has_proto_reserved3();
  proto_reserved3_ = value;
}

// optional uint64 proto_reserved4 = 32 [default = 0];
inline bool Lacp::has_proto_reserved4() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void Lacp::set_has_proto_reserved4() {
  _has_bits_[0] |= 0x80000000u;
}
inline void Lacp::clear_has_proto_reserved4() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void Lacp::clear_proto_reserved4() {
  proto_reserved4_ = GOOGLE_ULONGLONG(0);
  clear_has_proto_reserved4();
}
inline ::google::protobuf::uint64 Lacp::proto_reserved4() const {
  return proto_reserved4_;
}
inline void Lacp::set_proto_reserved4(::google::protobuf::uint64 value) {
  set_has_proto_reserved4();
  proto_reserved4_ = value;
}

// optional uint64 proto_reserved5 = 33 [default = 0];
inline bool Lacp::has_proto_reserved5() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void Lacp::set_has_proto_reserved5() {
  _has_bits_[1] |= 0x00000001u;
}
inline void Lacp::clear_has_proto_reserved5() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void Lacp::clear_proto_reserved5() {
  proto_reserved5_ = GOOGLE_ULONGLONG(0);
  clear_has_proto_reserved5();
}
inline ::google::protobuf::uint64 Lacp::proto_reserved5() const {
  return proto_reserved5_;
}
inline void Lacp::set_proto_reserved5(::google::protobuf::uint64 value) {
  set_has_proto_reserved5();
  proto_reserved5_ = value;
}

// optional uint64 proto_reserved6 = 34 [default = 0];
inline bool Lacp::has_proto_reserved6() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void Lacp::set_has_proto_reserved6() {
  _has_bits_[1] |= 0x00000002u;
}
inline void Lacp::clear_has_proto_reserved6() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void Lacp::clear_proto_reserved6() {
  proto_reserved6_ = GOOGLE_ULONGLONG(0);
  clear_has_proto_reserved6();
}
inline ::google::protobuf::uint64 Lacp::proto_reserved6() const {
  return proto_reserved6_;
}
inline void Lacp::set_proto_reserved6(::google::protobuf::uint64 value) {
  set_has_proto_reserved6();
  proto_reserved6_ = value;
}

// optional uint64 proto_FCS = 35 [default = 0];
inline bool Lacp::has_proto_fcs() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void Lacp::set_has_proto_fcs() {
  _has_bits_[1] |= 0x00000004u;
}
inline void Lacp::clear_has_proto_fcs() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void Lacp::clear_proto_fcs() {
  proto_fcs_ = GOOGLE_ULONGLONG(0);
  clear_has_proto_fcs();
}
inline ::google::protobuf::uint64 Lacp::proto_fcs() const {
  return proto_fcs_;
}
inline void Lacp::set_proto_fcs(::google::protobuf::uint64 value) {
  set_has_proto_fcs();
  proto_fcs_ = value;
}

// optional bool proto_is_subtype = 36;
inline bool Lacp::has_proto_is_subtype() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void Lacp::set_has_proto_is_subtype() {
  _has_bits_[1] |= 0x00000008u;
}
inline void Lacp::clear_has_proto_is_subtype() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void Lacp::clear_proto_is_subtype() {
  proto_is_subtype_ = false;
  clear_has_proto_is_subtype();
}
inline bool Lacp::proto_is_subtype() const {
  return proto_is_subtype_;
}
inline void Lacp::set_proto_is_subtype(bool value) {
  set_has_proto_is_subtype();
  proto_is_subtype_ = value;
}

// optional bool proto_is_version = 37;
inline bool Lacp::has_proto_is_version() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void Lacp::set_has_proto_is_version() {
  _has_bits_[1] |= 0x00000010u;
}
inline void Lacp::clear_has_proto_is_version() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void Lacp::clear_proto_is_version() {
  proto_is_version_ = false;
  clear_has_proto_is_version();
}
inline bool Lacp::proto_is_version() const {
  return proto_is_version_;
}
inline void Lacp::set_proto_is_version(bool value) {
  set_has_proto_is_version();
  proto_is_version_ = value;
}

// optional bool proto_is_tlv_a = 38;
inline bool Lacp::has_proto_is_tlv_a() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void Lacp::set_has_proto_is_tlv_a() {
  _has_bits_[1] |= 0x00000020u;
}
inline void Lacp::clear_has_proto_is_tlv_a() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void Lacp::clear_proto_is_tlv_a() {
  proto_is_tlv_a_ = false;
  clear_has_proto_is_tlv_a();
}
inline bool Lacp::proto_is_tlv_a() const {
  return proto_is_tlv_a_;
}
inline void Lacp::set_proto_is_tlv_a(bool value) {
  set_has_proto_is_tlv_a();
  proto_is_tlv_a_ = value;
}

// optional bool proto_is_actor_info = 39;
inline bool Lacp::has_proto_is_actor_info() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void Lacp::set_has_proto_is_actor_info() {
  _has_bits_[1] |= 0x00000040u;
}
inline void Lacp::clear_has_proto_is_actor_info() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void Lacp::clear_proto_is_actor_info() {
  proto_is_actor_info_ = false;
  clear_has_proto_is_actor_info();
}
inline bool Lacp::proto_is_actor_info() const {
  return proto_is_actor_info_;
}
inline void Lacp::set_proto_is_actor_info(bool value) {
  set_has_proto_is_actor_info();
  proto_is_actor_info_ = value;
}

// optional bool proto_is_tlv_p = 40;
inline bool Lacp::has_proto_is_tlv_p() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void Lacp::set_has_proto_is_tlv_p() {
  _has_bits_[1] |= 0x00000080u;
}
inline void Lacp::clear_has_proto_is_tlv_p() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void Lacp::clear_proto_is_tlv_p() {
  proto_is_tlv_p_ = false;
  clear_has_proto_is_tlv_p();
}
inline bool Lacp::proto_is_tlv_p() const {
  return proto_is_tlv_p_;
}
inline void Lacp::set_proto_is_tlv_p(bool value) {
  set_has_proto_is_tlv_p();
  proto_is_tlv_p_ = value;
}

// optional bool proto_is_partner_info = 41;
inline bool Lacp::has_proto_is_partner_info() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void Lacp::set_has_proto_is_partner_info() {
  _has_bits_[1] |= 0x00000100u;
}
inline void Lacp::clear_has_proto_is_partner_info() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void Lacp::clear_proto_is_partner_info() {
  proto_is_partner_info_ = false;
  clear_has_proto_is_partner_info();
}
inline bool Lacp::proto_is_partner_info() const {
  return proto_is_partner_info_;
}
inline void Lacp::set_proto_is_partner_info(bool value) {
  set_has_proto_is_partner_info();
  proto_is_partner_info_ = value;
}

// optional bool proto_is_tlv_c = 42;
inline bool Lacp::has_proto_is_tlv_c() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void Lacp::set_has_proto_is_tlv_c() {
  _has_bits_[1] |= 0x00000200u;
}
inline void Lacp::clear_has_proto_is_tlv_c() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void Lacp::clear_proto_is_tlv_c() {
  proto_is_tlv_c_ = false;
  clear_has_proto_is_tlv_c();
}
inline bool Lacp::proto_is_tlv_c() const {
  return proto_is_tlv_c_;
}
inline void Lacp::set_proto_is_tlv_c(bool value) {
  set_has_proto_is_tlv_c();
  proto_is_tlv_c_ = value;
}

// optional bool proto_is_collector_info = 43;
inline bool Lacp::has_proto_is_collector_info() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void Lacp::set_has_proto_is_collector_info() {
  _has_bits_[1] |= 0x00000400u;
}
inline void Lacp::clear_has_proto_is_collector_info() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void Lacp::clear_proto_is_collector_info() {
  proto_is_collector_info_ = false;
  clear_has_proto_is_collector_info();
}
inline bool Lacp::proto_is_collector_info() const {
  return proto_is_collector_info_;
}
inline void Lacp::set_proto_is_collector_info(bool value) {
  set_has_proto_is_collector_info();
  proto_is_collector_info_ = value;
}

// optional bool proto_is_tlv_t = 44;
inline bool Lacp::has_proto_is_tlv_t() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void Lacp::set_has_proto_is_tlv_t() {
  _has_bits_[1] |= 0x00000800u;
}
inline void Lacp::clear_has_proto_is_tlv_t() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void Lacp::clear_proto_is_tlv_t() {
  proto_is_tlv_t_ = false;
  clear_has_proto_is_tlv_t();
}
inline bool Lacp::proto_is_tlv_t() const {
  return proto_is_tlv_t_;
}
inline void Lacp::set_proto_is_tlv_t(bool value) {
  set_has_proto_is_tlv_t();
  proto_is_tlv_t_ = value;
}

// optional bool proto_is_terminator_len = 45;
inline bool Lacp::has_proto_is_terminator_len() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void Lacp::set_has_proto_is_terminator_len() {
  _has_bits_[1] |= 0x00001000u;
}
inline void Lacp::clear_has_proto_is_terminator_len() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void Lacp::clear_proto_is_terminator_len() {
  proto_is_terminator_len_ = false;
  clear_has_proto_is_terminator_len();
}
inline bool Lacp::proto_is_terminator_len() const {
  return proto_is_terminator_len_;
}
inline void Lacp::set_proto_is_terminator_len(bool value) {
  set_has_proto_is_terminator_len();
  proto_is_terminator_len_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace OstProto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_lacp_2eproto__INCLUDED
