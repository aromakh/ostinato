// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lldp_tlv.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "lldp_tlv.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace OstProto {

namespace {

const ::google::protobuf::Descriptor* Lldp_tlv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Lldp_tlv_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_lldp_5ftlv_2eproto() {
  protobuf_AddDesc_lldp_5ftlv_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "lldp_tlv.proto");
  GOOGLE_CHECK(file != NULL);
  Lldp_tlv_descriptor_ = file->message_type(0);
  static const int Lldp_tlv_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lldp_tlv, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lldp_tlv, len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lldp_tlv, content_),
  };
  Lldp_tlv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Lldp_tlv_descriptor_,
      Lldp_tlv::default_instance_,
      Lldp_tlv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lldp_tlv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Lldp_tlv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Lldp_tlv));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_lldp_5ftlv_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Lldp_tlv_descriptor_, &Lldp_tlv::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_lldp_5ftlv_2eproto() {
  delete Lldp_tlv::default_instance_;
  delete Lldp_tlv_reflection_;
}

void protobuf_AddDesc_lldp_5ftlv_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::OstProto::protobuf_AddDesc_protocol_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016lldp_tlv.proto\022\010OstProto\032\016protocol.pro"
    "to\"4\n\010Lldp_tlv\022\n\n\002id\030\001 \001(\r\022\013\n\003len\030\002 \001(\r\022"
    "\017\n\007content\030\003 \001(\014:9\n\010lldp_tlv\022\022.OstProto."
    "Protocol\030\323\001 \001(\0132\022.OstProto.Lldp_tlv", 155);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "lldp_tlv.proto", &protobuf_RegisterTypes);
  Lldp_tlv::default_instance_ = new Lldp_tlv();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::OstProto::Protocol::default_instance(),
    211, 11, false, false,
    &::OstProto::Lldp_tlv::default_instance());
  Lldp_tlv::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_lldp_5ftlv_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_lldp_5ftlv_2eproto {
  StaticDescriptorInitializer_lldp_5ftlv_2eproto() {
    protobuf_AddDesc_lldp_5ftlv_2eproto();
  }
} static_descriptor_initializer_lldp_5ftlv_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Lldp_tlv::kIdFieldNumber;
const int Lldp_tlv::kLenFieldNumber;
const int Lldp_tlv::kContentFieldNumber;
#endif  // !_MSC_VER

Lldp_tlv::Lldp_tlv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Lldp_tlv::InitAsDefaultInstance() {
}

Lldp_tlv::Lldp_tlv(const Lldp_tlv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Lldp_tlv::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  len_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Lldp_tlv::~Lldp_tlv() {
  SharedDtor();
}

void Lldp_tlv::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void Lldp_tlv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Lldp_tlv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Lldp_tlv_descriptor_;
}

const Lldp_tlv& Lldp_tlv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lldp_5ftlv_2eproto();
  return *default_instance_;
}

Lldp_tlv* Lldp_tlv::default_instance_ = NULL;

Lldp_tlv* Lldp_tlv::New() const {
  return new Lldp_tlv;
}

void Lldp_tlv::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    len_ = 0u;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Lldp_tlv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_len;
        break;
      }

      // optional uint32 len = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // optional bytes content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Lldp_tlv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 len = 2;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->len(), output);
  }

  // optional bytes content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Lldp_tlv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 len = 2;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->len(), target);
  }

  // optional bytes content = 3;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Lldp_tlv::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 len = 2;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->len());
    }

    // optional bytes content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Lldp_tlv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Lldp_tlv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Lldp_tlv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Lldp_tlv::MergeFrom(const Lldp_tlv& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Lldp_tlv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lldp_tlv::CopyFrom(const Lldp_tlv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lldp_tlv::IsInitialized() const {

  return true;
}

void Lldp_tlv::Swap(Lldp_tlv* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(len_, other->len_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Lldp_tlv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Lldp_tlv_descriptor_;
  metadata.reflection = Lldp_tlv_reflection_;
  return metadata;
}

::google::protobuf::internal::ExtensionIdentifier< ::OstProto::Protocol,
    ::google::protobuf::internal::MessageTypeTraits< ::OstProto::Lldp_tlv >, 11, false >
  lldp_tlv(kLldpTlvFieldNumber, ::OstProto::Lldp_tlv::default_instance());

// @@protoc_insertion_point(namespace_scope)

}  // namespace OstProto

// @@protoc_insertion_point(global_scope)
