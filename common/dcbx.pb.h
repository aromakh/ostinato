// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dcbx.proto

#ifndef PROTOBUF_dcbx_2eproto__INCLUDED
#define PROTOBUF_dcbx_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "protocol.pb.h"
// @@protoc_insertion_point(includes)

namespace OstProto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_dcbx_2eproto();
void protobuf_AssignDesc_dcbx_2eproto();
void protobuf_ShutdownFile_dcbx_2eproto();

class Dcbx;

// ===================================================================

class Dcbx : public ::google::protobuf::Message {
 public:
  Dcbx();
  virtual ~Dcbx();

  Dcbx(const Dcbx& from);

  inline Dcbx& operator=(const Dcbx& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Dcbx& default_instance();

  void Swap(Dcbx* other);

  // implements Message ----------------------------------------------

  Dcbx* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Dcbx& from);
  void MergeFrom(const Dcbx& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 tlv_type_len_c = 1 [default = 65049];
  inline bool has_tlv_type_len_c() const;
  inline void clear_tlv_type_len_c();
  static const int kTlvTypeLenCFieldNumber = 1;
  inline ::google::protobuf::uint32 tlv_type_len_c() const;
  inline void set_tlv_type_len_c(::google::protobuf::uint32 value);

  // optional uint32 oui802_c = 2;
  inline bool has_oui802_c() const;
  inline void clear_oui802_c();
  static const int kOui802CFieldNumber = 2;
  inline ::google::protobuf::uint32 oui802_c() const;
  inline void set_oui802_c(::google::protobuf::uint32 value);

  // optional uint32 subtype802_c = 3;
  inline bool has_subtype802_c() const;
  inline void clear_subtype802_c();
  static const int kSubtype802CFieldNumber = 3;
  inline ::google::protobuf::uint32 subtype802_c() const;
  inline void set_subtype802_c(::google::protobuf::uint32 value);

  // optional uint32 will_cbs_res_tcs = 4;
  inline bool has_will_cbs_res_tcs() const;
  inline void clear_will_cbs_res_tcs();
  static const int kWillCbsResTcsFieldNumber = 4;
  inline ::google::protobuf::uint32 will_cbs_res_tcs() const;
  inline void set_will_cbs_res_tcs(::google::protobuf::uint32 value);

  // optional uint32 prior_ass_c = 5;
  inline bool has_prior_ass_c() const;
  inline void clear_prior_ass_c();
  static const int kPriorAssCFieldNumber = 5;
  inline ::google::protobuf::uint32 prior_ass_c() const;
  inline void set_prior_ass_c(::google::protobuf::uint32 value);

  // optional uint64 tc_band_c = 6;
  inline bool has_tc_band_c() const;
  inline void clear_tc_band_c();
  static const int kTcBandCFieldNumber = 6;
  inline ::google::protobuf::uint64 tc_band_c() const;
  inline void set_tc_band_c(::google::protobuf::uint64 value);

  // optional uint64 tsa_ass_c = 7;
  inline bool has_tsa_ass_c() const;
  inline void clear_tsa_ass_c();
  static const int kTsaAssCFieldNumber = 7;
  inline ::google::protobuf::uint64 tsa_ass_c() const;
  inline void set_tsa_ass_c(::google::protobuf::uint64 value);

  // optional uint32 tlv_type_len_r = 8 [default = 65049];
  inline bool has_tlv_type_len_r() const;
  inline void clear_tlv_type_len_r();
  static const int kTlvTypeLenRFieldNumber = 8;
  inline ::google::protobuf::uint32 tlv_type_len_r() const;
  inline void set_tlv_type_len_r(::google::protobuf::uint32 value);

  // optional uint32 oui802_r = 9;
  inline bool has_oui802_r() const;
  inline void clear_oui802_r();
  static const int kOui802RFieldNumber = 9;
  inline ::google::protobuf::uint32 oui802_r() const;
  inline void set_oui802_r(::google::protobuf::uint32 value);

  // optional uint32 subtype802_r = 10;
  inline bool has_subtype802_r() const;
  inline void clear_subtype802_r();
  static const int kSubtype802RFieldNumber = 10;
  inline ::google::protobuf::uint32 subtype802_r() const;
  inline void set_subtype802_r(::google::protobuf::uint32 value);

  // optional uint32 reserved_r = 11;
  inline bool has_reserved_r() const;
  inline void clear_reserved_r();
  static const int kReservedRFieldNumber = 11;
  inline ::google::protobuf::uint32 reserved_r() const;
  inline void set_reserved_r(::google::protobuf::uint32 value);

  // optional uint32 prior_ass_r = 12;
  inline bool has_prior_ass_r() const;
  inline void clear_prior_ass_r();
  static const int kPriorAssRFieldNumber = 12;
  inline ::google::protobuf::uint32 prior_ass_r() const;
  inline void set_prior_ass_r(::google::protobuf::uint32 value);

  // optional uint64 tc_band_r = 13;
  inline bool has_tc_band_r() const;
  inline void clear_tc_band_r();
  static const int kTcBandRFieldNumber = 13;
  inline ::google::protobuf::uint64 tc_band_r() const;
  inline void set_tc_band_r(::google::protobuf::uint64 value);

  // optional uint64 tsa_ass_r = 14;
  inline bool has_tsa_ass_r() const;
  inline void clear_tsa_ass_r();
  static const int kTsaAssRFieldNumber = 14;
  inline ::google::protobuf::uint64 tsa_ass_r() const;
  inline void set_tsa_ass_r(::google::protobuf::uint64 value);

  // optional uint32 tlv_type_len_p = 15 [default = 65030];
  inline bool has_tlv_type_len_p() const;
  inline void clear_tlv_type_len_p();
  static const int kTlvTypeLenPFieldNumber = 15;
  inline ::google::protobuf::uint32 tlv_type_len_p() const;
  inline void set_tlv_type_len_p(::google::protobuf::uint32 value);

  // optional uint32 oui802_p = 16;
  inline bool has_oui802_p() const;
  inline void clear_oui802_p();
  static const int kOui802PFieldNumber = 16;
  inline ::google::protobuf::uint32 oui802_p() const;
  inline void set_oui802_p(::google::protobuf::uint32 value);

  // optional uint32 subtype802_p = 17;
  inline bool has_subtype802_p() const;
  inline void clear_subtype802_p();
  static const int kSubtype802PFieldNumber = 17;
  inline ::google::protobuf::uint32 subtype802_p() const;
  inline void set_subtype802_p(::google::protobuf::uint32 value);

  // optional uint32 will_mbc_res_pfc = 18;
  inline bool has_will_mbc_res_pfc() const;
  inline void clear_will_mbc_res_pfc();
  static const int kWillMbcResPfcFieldNumber = 18;
  inline ::google::protobuf::uint32 will_mbc_res_pfc() const;
  inline void set_will_mbc_res_pfc(::google::protobuf::uint32 value);

  // optional uint32 pfc_enable = 19;
  inline bool has_pfc_enable() const;
  inline void clear_pfc_enable();
  static const int kPfcEnableFieldNumber = 19;
  inline ::google::protobuf::uint32 pfc_enable() const;
  inline void set_pfc_enable(::google::protobuf::uint32 value);

  // optional uint32 tlv_type_len_a = 20;
  inline bool has_tlv_type_len_a() const;
  inline void clear_tlv_type_len_a();
  static const int kTlvTypeLenAFieldNumber = 20;
  inline ::google::protobuf::uint32 tlv_type_len_a() const;
  inline void set_tlv_type_len_a(::google::protobuf::uint32 value);

  // optional uint32 oui802_a = 21;
  inline bool has_oui802_a() const;
  inline void clear_oui802_a();
  static const int kOui802AFieldNumber = 21;
  inline ::google::protobuf::uint32 oui802_a() const;
  inline void set_oui802_a(::google::protobuf::uint32 value);

  // optional uint32 subtype802_a = 22;
  inline bool has_subtype802_a() const;
  inline void clear_subtype802_a();
  static const int kSubtype802AFieldNumber = 22;
  inline ::google::protobuf::uint32 subtype802_a() const;
  inline void set_subtype802_a(::google::protobuf::uint32 value);

  // optional uint32 reserved_a = 23;
  inline bool has_reserved_a() const;
  inline void clear_reserved_a();
  static const int kReservedAFieldNumber = 23;
  inline ::google::protobuf::uint32 reserved_a() const;
  inline void set_reserved_a(::google::protobuf::uint32 value);

  // repeated uint64 app_priority = 24 [packed = true];
  inline int app_priority_size() const;
  inline void clear_app_priority();
  static const int kAppPriorityFieldNumber = 24;
  inline ::google::protobuf::uint64 app_priority(int index) const;
  inline void set_app_priority(int index, ::google::protobuf::uint64 value);
  inline void add_app_priority(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      app_priority() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_app_priority();

  // optional bool is_c = 25;
  inline bool has_is_c() const;
  inline void clear_is_c();
  static const int kIsCFieldNumber = 25;
  inline bool is_c() const;
  inline void set_is_c(bool value);

  // optional bool is_r = 26;
  inline bool has_is_r() const;
  inline void clear_is_r();
  static const int kIsRFieldNumber = 26;
  inline bool is_r() const;
  inline void set_is_r(bool value);

  // optional bool is_p = 27;
  inline bool has_is_p() const;
  inline void clear_is_p();
  static const int kIsPFieldNumber = 27;
  inline bool is_p() const;
  inline void set_is_p(bool value);

  // optional bool is_a = 28;
  inline bool has_is_a() const;
  inline void clear_is_a();
  static const int kIsAFieldNumber = 28;
  inline bool is_a() const;
  inline void set_is_a(bool value);

  // @@protoc_insertion_point(class_scope:OstProto.Dcbx)
 private:
  inline void set_has_tlv_type_len_c();
  inline void clear_has_tlv_type_len_c();
  inline void set_has_oui802_c();
  inline void clear_has_oui802_c();
  inline void set_has_subtype802_c();
  inline void clear_has_subtype802_c();
  inline void set_has_will_cbs_res_tcs();
  inline void clear_has_will_cbs_res_tcs();
  inline void set_has_prior_ass_c();
  inline void clear_has_prior_ass_c();
  inline void set_has_tc_band_c();
  inline void clear_has_tc_band_c();
  inline void set_has_tsa_ass_c();
  inline void clear_has_tsa_ass_c();
  inline void set_has_tlv_type_len_r();
  inline void clear_has_tlv_type_len_r();
  inline void set_has_oui802_r();
  inline void clear_has_oui802_r();
  inline void set_has_subtype802_r();
  inline void clear_has_subtype802_r();
  inline void set_has_reserved_r();
  inline void clear_has_reserved_r();
  inline void set_has_prior_ass_r();
  inline void clear_has_prior_ass_r();
  inline void set_has_tc_band_r();
  inline void clear_has_tc_band_r();
  inline void set_has_tsa_ass_r();
  inline void clear_has_tsa_ass_r();
  inline void set_has_tlv_type_len_p();
  inline void clear_has_tlv_type_len_p();
  inline void set_has_oui802_p();
  inline void clear_has_oui802_p();
  inline void set_has_subtype802_p();
  inline void clear_has_subtype802_p();
  inline void set_has_will_mbc_res_pfc();
  inline void clear_has_will_mbc_res_pfc();
  inline void set_has_pfc_enable();
  inline void clear_has_pfc_enable();
  inline void set_has_tlv_type_len_a();
  inline void clear_has_tlv_type_len_a();
  inline void set_has_oui802_a();
  inline void clear_has_oui802_a();
  inline void set_has_subtype802_a();
  inline void clear_has_subtype802_a();
  inline void set_has_reserved_a();
  inline void clear_has_reserved_a();
  inline void set_has_is_c();
  inline void clear_has_is_c();
  inline void set_has_is_r();
  inline void clear_has_is_r();
  inline void set_has_is_p();
  inline void clear_has_is_p();
  inline void set_has_is_a();
  inline void clear_has_is_a();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 tlv_type_len_c_;
  ::google::protobuf::uint32 oui802_c_;
  ::google::protobuf::uint32 subtype802_c_;
  ::google::protobuf::uint32 will_cbs_res_tcs_;
  ::google::protobuf::uint64 tc_band_c_;
  ::google::protobuf::uint32 prior_ass_c_;
  ::google::protobuf::uint32 tlv_type_len_r_;
  ::google::protobuf::uint64 tsa_ass_c_;
  ::google::protobuf::uint32 oui802_r_;
  ::google::protobuf::uint32 subtype802_r_;
  ::google::protobuf::uint32 reserved_r_;
  ::google::protobuf::uint32 prior_ass_r_;
  ::google::protobuf::uint64 tc_band_r_;
  ::google::protobuf::uint64 tsa_ass_r_;
  ::google::protobuf::uint32 tlv_type_len_p_;
  ::google::protobuf::uint32 oui802_p_;
  ::google::protobuf::uint32 subtype802_p_;
  ::google::protobuf::uint32 will_mbc_res_pfc_;
  ::google::protobuf::uint32 pfc_enable_;
  ::google::protobuf::uint32 tlv_type_len_a_;
  ::google::protobuf::uint32 oui802_a_;
  ::google::protobuf::uint32 subtype802_a_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > app_priority_;
  mutable int _app_priority_cached_byte_size_;
  ::google::protobuf::uint32 reserved_a_;
  bool is_c_;
  bool is_r_;
  bool is_p_;
  bool is_a_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(28 + 31) / 32];

  friend void  protobuf_AddDesc_dcbx_2eproto();
  friend void protobuf_AssignDesc_dcbx_2eproto();
  friend void protobuf_ShutdownFile_dcbx_2eproto();

  void InitAsDefaultInstance();
  static Dcbx* default_instance_;
};
// ===================================================================

static const int kDcbxFieldNumber = 298;
extern ::google::protobuf::internal::ExtensionIdentifier< ::OstProto::Protocol,
    ::google::protobuf::internal::MessageTypeTraits< ::OstProto::Dcbx >, 11, false >
  dcbx;

// ===================================================================

// Dcbx

// optional uint32 tlv_type_len_c = 1 [default = 65049];
inline bool Dcbx::has_tlv_type_len_c() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dcbx::set_has_tlv_type_len_c() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Dcbx::clear_has_tlv_type_len_c() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Dcbx::clear_tlv_type_len_c() {
  tlv_type_len_c_ = 65049u;
  clear_has_tlv_type_len_c();
}
inline ::google::protobuf::uint32 Dcbx::tlv_type_len_c() const {
  return tlv_type_len_c_;
}
inline void Dcbx::set_tlv_type_len_c(::google::protobuf::uint32 value) {
  set_has_tlv_type_len_c();
  tlv_type_len_c_ = value;
}

// optional uint32 oui802_c = 2;
inline bool Dcbx::has_oui802_c() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Dcbx::set_has_oui802_c() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Dcbx::clear_has_oui802_c() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Dcbx::clear_oui802_c() {
  oui802_c_ = 0u;
  clear_has_oui802_c();
}
inline ::google::protobuf::uint32 Dcbx::oui802_c() const {
  return oui802_c_;
}
inline void Dcbx::set_oui802_c(::google::protobuf::uint32 value) {
  set_has_oui802_c();
  oui802_c_ = value;
}

// optional uint32 subtype802_c = 3;
inline bool Dcbx::has_subtype802_c() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Dcbx::set_has_subtype802_c() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Dcbx::clear_has_subtype802_c() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Dcbx::clear_subtype802_c() {
  subtype802_c_ = 0u;
  clear_has_subtype802_c();
}
inline ::google::protobuf::uint32 Dcbx::subtype802_c() const {
  return subtype802_c_;
}
inline void Dcbx::set_subtype802_c(::google::protobuf::uint32 value) {
  set_has_subtype802_c();
  subtype802_c_ = value;
}

// optional uint32 will_cbs_res_tcs = 4;
inline bool Dcbx::has_will_cbs_res_tcs() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Dcbx::set_has_will_cbs_res_tcs() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Dcbx::clear_has_will_cbs_res_tcs() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Dcbx::clear_will_cbs_res_tcs() {
  will_cbs_res_tcs_ = 0u;
  clear_has_will_cbs_res_tcs();
}
inline ::google::protobuf::uint32 Dcbx::will_cbs_res_tcs() const {
  return will_cbs_res_tcs_;
}
inline void Dcbx::set_will_cbs_res_tcs(::google::protobuf::uint32 value) {
  set_has_will_cbs_res_tcs();
  will_cbs_res_tcs_ = value;
}

// optional uint32 prior_ass_c = 5;
inline bool Dcbx::has_prior_ass_c() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Dcbx::set_has_prior_ass_c() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Dcbx::clear_has_prior_ass_c() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Dcbx::clear_prior_ass_c() {
  prior_ass_c_ = 0u;
  clear_has_prior_ass_c();
}
inline ::google::protobuf::uint32 Dcbx::prior_ass_c() const {
  return prior_ass_c_;
}
inline void Dcbx::set_prior_ass_c(::google::protobuf::uint32 value) {
  set_has_prior_ass_c();
  prior_ass_c_ = value;
}

// optional uint64 tc_band_c = 6;
inline bool Dcbx::has_tc_band_c() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Dcbx::set_has_tc_band_c() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Dcbx::clear_has_tc_band_c() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Dcbx::clear_tc_band_c() {
  tc_band_c_ = GOOGLE_ULONGLONG(0);
  clear_has_tc_band_c();
}
inline ::google::protobuf::uint64 Dcbx::tc_band_c() const {
  return tc_band_c_;
}
inline void Dcbx::set_tc_band_c(::google::protobuf::uint64 value) {
  set_has_tc_band_c();
  tc_band_c_ = value;
}

// optional uint64 tsa_ass_c = 7;
inline bool Dcbx::has_tsa_ass_c() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Dcbx::set_has_tsa_ass_c() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Dcbx::clear_has_tsa_ass_c() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Dcbx::clear_tsa_ass_c() {
  tsa_ass_c_ = GOOGLE_ULONGLONG(0);
  clear_has_tsa_ass_c();
}
inline ::google::protobuf::uint64 Dcbx::tsa_ass_c() const {
  return tsa_ass_c_;
}
inline void Dcbx::set_tsa_ass_c(::google::protobuf::uint64 value) {
  set_has_tsa_ass_c();
  tsa_ass_c_ = value;
}

// optional uint32 tlv_type_len_r = 8 [default = 65049];
inline bool Dcbx::has_tlv_type_len_r() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Dcbx::set_has_tlv_type_len_r() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Dcbx::clear_has_tlv_type_len_r() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Dcbx::clear_tlv_type_len_r() {
  tlv_type_len_r_ = 65049u;
  clear_has_tlv_type_len_r();
}
inline ::google::protobuf::uint32 Dcbx::tlv_type_len_r() const {
  return tlv_type_len_r_;
}
inline void Dcbx::set_tlv_type_len_r(::google::protobuf::uint32 value) {
  set_has_tlv_type_len_r();
  tlv_type_len_r_ = value;
}

// optional uint32 oui802_r = 9;
inline bool Dcbx::has_oui802_r() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Dcbx::set_has_oui802_r() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Dcbx::clear_has_oui802_r() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Dcbx::clear_oui802_r() {
  oui802_r_ = 0u;
  clear_has_oui802_r();
}
inline ::google::protobuf::uint32 Dcbx::oui802_r() const {
  return oui802_r_;
}
inline void Dcbx::set_oui802_r(::google::protobuf::uint32 value) {
  set_has_oui802_r();
  oui802_r_ = value;
}

// optional uint32 subtype802_r = 10;
inline bool Dcbx::has_subtype802_r() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Dcbx::set_has_subtype802_r() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Dcbx::clear_has_subtype802_r() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Dcbx::clear_subtype802_r() {
  subtype802_r_ = 0u;
  clear_has_subtype802_r();
}
inline ::google::protobuf::uint32 Dcbx::subtype802_r() const {
  return subtype802_r_;
}
inline void Dcbx::set_subtype802_r(::google::protobuf::uint32 value) {
  set_has_subtype802_r();
  subtype802_r_ = value;
}

// optional uint32 reserved_r = 11;
inline bool Dcbx::has_reserved_r() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Dcbx::set_has_reserved_r() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Dcbx::clear_has_reserved_r() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Dcbx::clear_reserved_r() {
  reserved_r_ = 0u;
  clear_has_reserved_r();
}
inline ::google::protobuf::uint32 Dcbx::reserved_r() const {
  return reserved_r_;
}
inline void Dcbx::set_reserved_r(::google::protobuf::uint32 value) {
  set_has_reserved_r();
  reserved_r_ = value;
}

// optional uint32 prior_ass_r = 12;
inline bool Dcbx::has_prior_ass_r() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Dcbx::set_has_prior_ass_r() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Dcbx::clear_has_prior_ass_r() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Dcbx::clear_prior_ass_r() {
  prior_ass_r_ = 0u;
  clear_has_prior_ass_r();
}
inline ::google::protobuf::uint32 Dcbx::prior_ass_r() const {
  return prior_ass_r_;
}
inline void Dcbx::set_prior_ass_r(::google::protobuf::uint32 value) {
  set_has_prior_ass_r();
  prior_ass_r_ = value;
}

// optional uint64 tc_band_r = 13;
inline bool Dcbx::has_tc_band_r() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Dcbx::set_has_tc_band_r() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Dcbx::clear_has_tc_band_r() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Dcbx::clear_tc_band_r() {
  tc_band_r_ = GOOGLE_ULONGLONG(0);
  clear_has_tc_band_r();
}
inline ::google::protobuf::uint64 Dcbx::tc_band_r() const {
  return tc_band_r_;
}
inline void Dcbx::set_tc_band_r(::google::protobuf::uint64 value) {
  set_has_tc_band_r();
  tc_band_r_ = value;
}

// optional uint64 tsa_ass_r = 14;
inline bool Dcbx::has_tsa_ass_r() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Dcbx::set_has_tsa_ass_r() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Dcbx::clear_has_tsa_ass_r() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Dcbx::clear_tsa_ass_r() {
  tsa_ass_r_ = GOOGLE_ULONGLONG(0);
  clear_has_tsa_ass_r();
}
inline ::google::protobuf::uint64 Dcbx::tsa_ass_r() const {
  return tsa_ass_r_;
}
inline void Dcbx::set_tsa_ass_r(::google::protobuf::uint64 value) {
  set_has_tsa_ass_r();
  tsa_ass_r_ = value;
}

// optional uint32 tlv_type_len_p = 15 [default = 65030];
inline bool Dcbx::has_tlv_type_len_p() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Dcbx::set_has_tlv_type_len_p() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Dcbx::clear_has_tlv_type_len_p() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Dcbx::clear_tlv_type_len_p() {
  tlv_type_len_p_ = 65030u;
  clear_has_tlv_type_len_p();
}
inline ::google::protobuf::uint32 Dcbx::tlv_type_len_p() const {
  return tlv_type_len_p_;
}
inline void Dcbx::set_tlv_type_len_p(::google::protobuf::uint32 value) {
  set_has_tlv_type_len_p();
  tlv_type_len_p_ = value;
}

// optional uint32 oui802_p = 16;
inline bool Dcbx::has_oui802_p() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Dcbx::set_has_oui802_p() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Dcbx::clear_has_oui802_p() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Dcbx::clear_oui802_p() {
  oui802_p_ = 0u;
  clear_has_oui802_p();
}
inline ::google::protobuf::uint32 Dcbx::oui802_p() const {
  return oui802_p_;
}
inline void Dcbx::set_oui802_p(::google::protobuf::uint32 value) {
  set_has_oui802_p();
  oui802_p_ = value;
}

// optional uint32 subtype802_p = 17;
inline bool Dcbx::has_subtype802_p() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Dcbx::set_has_subtype802_p() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Dcbx::clear_has_subtype802_p() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Dcbx::clear_subtype802_p() {
  subtype802_p_ = 0u;
  clear_has_subtype802_p();
}
inline ::google::protobuf::uint32 Dcbx::subtype802_p() const {
  return subtype802_p_;
}
inline void Dcbx::set_subtype802_p(::google::protobuf::uint32 value) {
  set_has_subtype802_p();
  subtype802_p_ = value;
}

// optional uint32 will_mbc_res_pfc = 18;
inline bool Dcbx::has_will_mbc_res_pfc() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Dcbx::set_has_will_mbc_res_pfc() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Dcbx::clear_has_will_mbc_res_pfc() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Dcbx::clear_will_mbc_res_pfc() {
  will_mbc_res_pfc_ = 0u;
  clear_has_will_mbc_res_pfc();
}
inline ::google::protobuf::uint32 Dcbx::will_mbc_res_pfc() const {
  return will_mbc_res_pfc_;
}
inline void Dcbx::set_will_mbc_res_pfc(::google::protobuf::uint32 value) {
  set_has_will_mbc_res_pfc();
  will_mbc_res_pfc_ = value;
}

// optional uint32 pfc_enable = 19;
inline bool Dcbx::has_pfc_enable() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Dcbx::set_has_pfc_enable() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Dcbx::clear_has_pfc_enable() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Dcbx::clear_pfc_enable() {
  pfc_enable_ = 0u;
  clear_has_pfc_enable();
}
inline ::google::protobuf::uint32 Dcbx::pfc_enable() const {
  return pfc_enable_;
}
inline void Dcbx::set_pfc_enable(::google::protobuf::uint32 value) {
  set_has_pfc_enable();
  pfc_enable_ = value;
}

// optional uint32 tlv_type_len_a = 20;
inline bool Dcbx::has_tlv_type_len_a() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Dcbx::set_has_tlv_type_len_a() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Dcbx::clear_has_tlv_type_len_a() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Dcbx::clear_tlv_type_len_a() {
  tlv_type_len_a_ = 0u;
  clear_has_tlv_type_len_a();
}
inline ::google::protobuf::uint32 Dcbx::tlv_type_len_a() const {
  return tlv_type_len_a_;
}
inline void Dcbx::set_tlv_type_len_a(::google::protobuf::uint32 value) {
  set_has_tlv_type_len_a();
  tlv_type_len_a_ = value;
}

// optional uint32 oui802_a = 21;
inline bool Dcbx::has_oui802_a() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Dcbx::set_has_oui802_a() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Dcbx::clear_has_oui802_a() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Dcbx::clear_oui802_a() {
  oui802_a_ = 0u;
  clear_has_oui802_a();
}
inline ::google::protobuf::uint32 Dcbx::oui802_a() const {
  return oui802_a_;
}
inline void Dcbx::set_oui802_a(::google::protobuf::uint32 value) {
  set_has_oui802_a();
  oui802_a_ = value;
}

// optional uint32 subtype802_a = 22;
inline bool Dcbx::has_subtype802_a() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Dcbx::set_has_subtype802_a() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Dcbx::clear_has_subtype802_a() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Dcbx::clear_subtype802_a() {
  subtype802_a_ = 0u;
  clear_has_subtype802_a();
}
inline ::google::protobuf::uint32 Dcbx::subtype802_a() const {
  return subtype802_a_;
}
inline void Dcbx::set_subtype802_a(::google::protobuf::uint32 value) {
  set_has_subtype802_a();
  subtype802_a_ = value;
}

// optional uint32 reserved_a = 23;
inline bool Dcbx::has_reserved_a() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Dcbx::set_has_reserved_a() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Dcbx::clear_has_reserved_a() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Dcbx::clear_reserved_a() {
  reserved_a_ = 0u;
  clear_has_reserved_a();
}
inline ::google::protobuf::uint32 Dcbx::reserved_a() const {
  return reserved_a_;
}
inline void Dcbx::set_reserved_a(::google::protobuf::uint32 value) {
  set_has_reserved_a();
  reserved_a_ = value;
}

// repeated uint64 app_priority = 24 [packed = true];
inline int Dcbx::app_priority_size() const {
  return app_priority_.size();
}
inline void Dcbx::clear_app_priority() {
  app_priority_.Clear();
}
inline ::google::protobuf::uint64 Dcbx::app_priority(int index) const {
  return app_priority_.Get(index);
}
inline void Dcbx::set_app_priority(int index, ::google::protobuf::uint64 value) {
  app_priority_.Set(index, value);
}
inline void Dcbx::add_app_priority(::google::protobuf::uint64 value) {
  app_priority_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Dcbx::app_priority() const {
  return app_priority_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Dcbx::mutable_app_priority() {
  return &app_priority_;
}

// optional bool is_c = 25;
inline bool Dcbx::has_is_c() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Dcbx::set_has_is_c() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Dcbx::clear_has_is_c() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Dcbx::clear_is_c() {
  is_c_ = false;
  clear_has_is_c();
}
inline bool Dcbx::is_c() const {
  return is_c_;
}
inline void Dcbx::set_is_c(bool value) {
  set_has_is_c();
  is_c_ = value;
}

// optional bool is_r = 26;
inline bool Dcbx::has_is_r() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Dcbx::set_has_is_r() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Dcbx::clear_has_is_r() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Dcbx::clear_is_r() {
  is_r_ = false;
  clear_has_is_r();
}
inline bool Dcbx::is_r() const {
  return is_r_;
}
inline void Dcbx::set_is_r(bool value) {
  set_has_is_r();
  is_r_ = value;
}

// optional bool is_p = 27;
inline bool Dcbx::has_is_p() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void Dcbx::set_has_is_p() {
  _has_bits_[0] |= 0x04000000u;
}
inline void Dcbx::clear_has_is_p() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void Dcbx::clear_is_p() {
  is_p_ = false;
  clear_has_is_p();
}
inline bool Dcbx::is_p() const {
  return is_p_;
}
inline void Dcbx::set_is_p(bool value) {
  set_has_is_p();
  is_p_ = value;
}

// optional bool is_a = 28;
inline bool Dcbx::has_is_a() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void Dcbx::set_has_is_a() {
  _has_bits_[0] |= 0x08000000u;
}
inline void Dcbx::clear_has_is_a() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void Dcbx::clear_is_a() {
  is_a_ = false;
  clear_has_is_a();
}
inline bool Dcbx::is_a() const {
  return is_a_;
}
inline void Dcbx::set_is_a(bool value) {
  set_has_is_a();
  is_a_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace OstProto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dcbx_2eproto__INCLUDED
