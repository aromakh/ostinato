// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stp.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "stp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace OstProto {

namespace {

const ::google::protobuf::Descriptor* Stp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Stp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_stp_2eproto() {
  protobuf_AddDesc_stp_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "stp.proto");
  GOOGLE_CHECK(file != NULL);
  Stp_descriptor_ = file->message_type(0);
  static const int Stp_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stp, protocol_identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stp, protocol_version_identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stp, protocol_bpdu_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stp, protocol_flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stp, protocol_root_system_id_extension_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stp, protocol_root_system_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stp, protocol_root_path_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stp, protocol_bridge_identifier_id_extension_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stp, protocol_bridge_identifier_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stp, protocol_port_identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stp, protocol_message_age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stp, protocol_max_age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stp, protocol_hello_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stp, protocol_forward_delay_),
  };
  Stp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Stp_descriptor_,
      Stp::default_instance_,
      Stp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Stp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Stp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_stp_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Stp_descriptor_, &Stp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_stp_2eproto() {
  delete Stp::default_instance_;
  delete Stp_reflection_;
}

void protobuf_AddDesc_stp_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::OstProto::protobuf_AddDesc_protocol_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tstp.proto\022\010OstProto\032\016protocol.proto\"\340\003"
    "\n\003Stp\022\036\n\023protocol_identifier\030\001 \001(\r:\0010\022&\n"
    "\033protocol_version_identifier\030\002 \001(\r:\0010\022\035\n"
    "\022protocol_bpdu_type\030\003 \001(\r:\0010\022\026\n\016protocol"
    "_flags\030\004 \001(\r\022)\n!protocol_root_system_id_"
    "extension\030\005 \001(\r\022\037\n\027protocol_root_system_"
    "id\030\006 \001(\004\022\037\n\027protocol_root_path_cost\030\007 \001("
    "\004\022/\n\'protocol_bridge_identifier_id_exten"
    "sion\030\010 \001(\r\022%\n\035protocol_bridge_identifier"
    "_id\030\t \001(\004\022 \n\030protocol_port_identifier\030\n "
    "\001(\r\022\034\n\024protocol_message_age\030\013 \001(\r\022\030\n\020pro"
    "tocol_max_age\030\014 \001(\r\022\033\n\023protocol_hello_ti"
    "me\030\r \001(\r\022\036\n\026protocol_forward_delay\030\016 \001(\r"
    ":/\n\003stp\022\022.OstProto.Protocol\030\321\001 \001(\0132\r.Ost"
    "Proto.Stp", 569);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "stp.proto", &protobuf_RegisterTypes);
  Stp::default_instance_ = new Stp();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::OstProto::Protocol::default_instance(),
    209, 11, false, false,
    &::OstProto::Stp::default_instance());
  Stp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_stp_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_stp_2eproto {
  StaticDescriptorInitializer_stp_2eproto() {
    protobuf_AddDesc_stp_2eproto();
  }
} static_descriptor_initializer_stp_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Stp::kProtocolIdentifierFieldNumber;
const int Stp::kProtocolVersionIdentifierFieldNumber;
const int Stp::kProtocolBpduTypeFieldNumber;
const int Stp::kProtocolFlagsFieldNumber;
const int Stp::kProtocolRootSystemIdExtensionFieldNumber;
const int Stp::kProtocolRootSystemIdFieldNumber;
const int Stp::kProtocolRootPathCostFieldNumber;
const int Stp::kProtocolBridgeIdentifierIdExtensionFieldNumber;
const int Stp::kProtocolBridgeIdentifierIdFieldNumber;
const int Stp::kProtocolPortIdentifierFieldNumber;
const int Stp::kProtocolMessageAgeFieldNumber;
const int Stp::kProtocolMaxAgeFieldNumber;
const int Stp::kProtocolHelloTimeFieldNumber;
const int Stp::kProtocolForwardDelayFieldNumber;
#endif  // !_MSC_VER

Stp::Stp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Stp::InitAsDefaultInstance() {
}

Stp::Stp(const Stp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Stp::SharedCtor() {
  _cached_size_ = 0;
  protocol_identifier_ = 0u;
  protocol_version_identifier_ = 0u;
  protocol_bpdu_type_ = 0u;
  protocol_flags_ = 0u;
  protocol_root_system_id_extension_ = 0u;
  protocol_root_system_id_ = GOOGLE_ULONGLONG(0);
  protocol_root_path_cost_ = GOOGLE_ULONGLONG(0);
  protocol_bridge_identifier_id_extension_ = 0u;
  protocol_bridge_identifier_id_ = GOOGLE_ULONGLONG(0);
  protocol_port_identifier_ = 0u;
  protocol_message_age_ = 0u;
  protocol_max_age_ = 0u;
  protocol_hello_time_ = 0u;
  protocol_forward_delay_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Stp::~Stp() {
  SharedDtor();
}

void Stp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Stp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Stp_descriptor_;
}

const Stp& Stp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_stp_2eproto();
  return *default_instance_;
}

Stp* Stp::default_instance_ = NULL;

Stp* Stp::New() const {
  return new Stp;
}

void Stp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    protocol_identifier_ = 0u;
    protocol_version_identifier_ = 0u;
    protocol_bpdu_type_ = 0u;
    protocol_flags_ = 0u;
    protocol_root_system_id_extension_ = 0u;
    protocol_root_system_id_ = GOOGLE_ULONGLONG(0);
    protocol_root_path_cost_ = GOOGLE_ULONGLONG(0);
    protocol_bridge_identifier_id_extension_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    protocol_bridge_identifier_id_ = GOOGLE_ULONGLONG(0);
    protocol_port_identifier_ = 0u;
    protocol_message_age_ = 0u;
    protocol_max_age_ = 0u;
    protocol_hello_time_ = 0u;
    protocol_forward_delay_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Stp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 protocol_identifier = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_identifier_)));
          set_has_protocol_identifier();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_protocol_version_identifier;
        break;
      }

      // optional uint32 protocol_version_identifier = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_protocol_version_identifier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_version_identifier_)));
          set_has_protocol_version_identifier();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_protocol_bpdu_type;
        break;
      }

      // optional uint32 protocol_bpdu_type = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_protocol_bpdu_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_bpdu_type_)));
          set_has_protocol_bpdu_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_protocol_flags;
        break;
      }

      // optional uint32 protocol_flags = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_protocol_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_flags_)));
          set_has_protocol_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_protocol_root_system_id_extension;
        break;
      }

      // optional uint32 protocol_root_system_id_extension = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_protocol_root_system_id_extension:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_root_system_id_extension_)));
          set_has_protocol_root_system_id_extension();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_protocol_root_system_id;
        break;
      }

      // optional uint64 protocol_root_system_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_protocol_root_system_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &protocol_root_system_id_)));
          set_has_protocol_root_system_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_protocol_root_path_cost;
        break;
      }

      // optional uint64 protocol_root_path_cost = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_protocol_root_path_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &protocol_root_path_cost_)));
          set_has_protocol_root_path_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_protocol_bridge_identifier_id_extension;
        break;
      }

      // optional uint32 protocol_bridge_identifier_id_extension = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_protocol_bridge_identifier_id_extension:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_bridge_identifier_id_extension_)));
          set_has_protocol_bridge_identifier_id_extension();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_protocol_bridge_identifier_id;
        break;
      }

      // optional uint64 protocol_bridge_identifier_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_protocol_bridge_identifier_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &protocol_bridge_identifier_id_)));
          set_has_protocol_bridge_identifier_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_protocol_port_identifier;
        break;
      }

      // optional uint32 protocol_port_identifier = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_protocol_port_identifier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_port_identifier_)));
          set_has_protocol_port_identifier();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_protocol_message_age;
        break;
      }

      // optional uint32 protocol_message_age = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_protocol_message_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_message_age_)));
          set_has_protocol_message_age();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_protocol_max_age;
        break;
      }

      // optional uint32 protocol_max_age = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_protocol_max_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_max_age_)));
          set_has_protocol_max_age();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_protocol_hello_time;
        break;
      }

      // optional uint32 protocol_hello_time = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_protocol_hello_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_hello_time_)));
          set_has_protocol_hello_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_protocol_forward_delay;
        break;
      }

      // optional uint32 protocol_forward_delay = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_protocol_forward_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_forward_delay_)));
          set_has_protocol_forward_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Stp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 protocol_identifier = 1 [default = 0];
  if (has_protocol_identifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->protocol_identifier(), output);
  }

  // optional uint32 protocol_version_identifier = 2 [default = 0];
  if (has_protocol_version_identifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->protocol_version_identifier(), output);
  }

  // optional uint32 protocol_bpdu_type = 3 [default = 0];
  if (has_protocol_bpdu_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->protocol_bpdu_type(), output);
  }

  // optional uint32 protocol_flags = 4;
  if (has_protocol_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->protocol_flags(), output);
  }

  // optional uint32 protocol_root_system_id_extension = 5;
  if (has_protocol_root_system_id_extension()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->protocol_root_system_id_extension(), output);
  }

  // optional uint64 protocol_root_system_id = 6;
  if (has_protocol_root_system_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->protocol_root_system_id(), output);
  }

  // optional uint64 protocol_root_path_cost = 7;
  if (has_protocol_root_path_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->protocol_root_path_cost(), output);
  }

  // optional uint32 protocol_bridge_identifier_id_extension = 8;
  if (has_protocol_bridge_identifier_id_extension()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->protocol_bridge_identifier_id_extension(), output);
  }

  // optional uint64 protocol_bridge_identifier_id = 9;
  if (has_protocol_bridge_identifier_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->protocol_bridge_identifier_id(), output);
  }

  // optional uint32 protocol_port_identifier = 10;
  if (has_protocol_port_identifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->protocol_port_identifier(), output);
  }

  // optional uint32 protocol_message_age = 11;
  if (has_protocol_message_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->protocol_message_age(), output);
  }

  // optional uint32 protocol_max_age = 12;
  if (has_protocol_max_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->protocol_max_age(), output);
  }

  // optional uint32 protocol_hello_time = 13;
  if (has_protocol_hello_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->protocol_hello_time(), output);
  }

  // optional uint32 protocol_forward_delay = 14;
  if (has_protocol_forward_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->protocol_forward_delay(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Stp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 protocol_identifier = 1 [default = 0];
  if (has_protocol_identifier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->protocol_identifier(), target);
  }

  // optional uint32 protocol_version_identifier = 2 [default = 0];
  if (has_protocol_version_identifier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->protocol_version_identifier(), target);
  }

  // optional uint32 protocol_bpdu_type = 3 [default = 0];
  if (has_protocol_bpdu_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->protocol_bpdu_type(), target);
  }

  // optional uint32 protocol_flags = 4;
  if (has_protocol_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->protocol_flags(), target);
  }

  // optional uint32 protocol_root_system_id_extension = 5;
  if (has_protocol_root_system_id_extension()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->protocol_root_system_id_extension(), target);
  }

  // optional uint64 protocol_root_system_id = 6;
  if (has_protocol_root_system_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->protocol_root_system_id(), target);
  }

  // optional uint64 protocol_root_path_cost = 7;
  if (has_protocol_root_path_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->protocol_root_path_cost(), target);
  }

  // optional uint32 protocol_bridge_identifier_id_extension = 8;
  if (has_protocol_bridge_identifier_id_extension()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->protocol_bridge_identifier_id_extension(), target);
  }

  // optional uint64 protocol_bridge_identifier_id = 9;
  if (has_protocol_bridge_identifier_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->protocol_bridge_identifier_id(), target);
  }

  // optional uint32 protocol_port_identifier = 10;
  if (has_protocol_port_identifier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->protocol_port_identifier(), target);
  }

  // optional uint32 protocol_message_age = 11;
  if (has_protocol_message_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->protocol_message_age(), target);
  }

  // optional uint32 protocol_max_age = 12;
  if (has_protocol_max_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->protocol_max_age(), target);
  }

  // optional uint32 protocol_hello_time = 13;
  if (has_protocol_hello_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->protocol_hello_time(), target);
  }

  // optional uint32 protocol_forward_delay = 14;
  if (has_protocol_forward_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->protocol_forward_delay(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Stp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 protocol_identifier = 1 [default = 0];
    if (has_protocol_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocol_identifier());
    }

    // optional uint32 protocol_version_identifier = 2 [default = 0];
    if (has_protocol_version_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocol_version_identifier());
    }

    // optional uint32 protocol_bpdu_type = 3 [default = 0];
    if (has_protocol_bpdu_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocol_bpdu_type());
    }

    // optional uint32 protocol_flags = 4;
    if (has_protocol_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocol_flags());
    }

    // optional uint32 protocol_root_system_id_extension = 5;
    if (has_protocol_root_system_id_extension()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocol_root_system_id_extension());
    }

    // optional uint64 protocol_root_system_id = 6;
    if (has_protocol_root_system_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->protocol_root_system_id());
    }

    // optional uint64 protocol_root_path_cost = 7;
    if (has_protocol_root_path_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->protocol_root_path_cost());
    }

    // optional uint32 protocol_bridge_identifier_id_extension = 8;
    if (has_protocol_bridge_identifier_id_extension()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocol_bridge_identifier_id_extension());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 protocol_bridge_identifier_id = 9;
    if (has_protocol_bridge_identifier_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->protocol_bridge_identifier_id());
    }

    // optional uint32 protocol_port_identifier = 10;
    if (has_protocol_port_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocol_port_identifier());
    }

    // optional uint32 protocol_message_age = 11;
    if (has_protocol_message_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocol_message_age());
    }

    // optional uint32 protocol_max_age = 12;
    if (has_protocol_max_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocol_max_age());
    }

    // optional uint32 protocol_hello_time = 13;
    if (has_protocol_hello_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocol_hello_time());
    }

    // optional uint32 protocol_forward_delay = 14;
    if (has_protocol_forward_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocol_forward_delay());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Stp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Stp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Stp::MergeFrom(const Stp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protocol_identifier()) {
      set_protocol_identifier(from.protocol_identifier());
    }
    if (from.has_protocol_version_identifier()) {
      set_protocol_version_identifier(from.protocol_version_identifier());
    }
    if (from.has_protocol_bpdu_type()) {
      set_protocol_bpdu_type(from.protocol_bpdu_type());
    }
    if (from.has_protocol_flags()) {
      set_protocol_flags(from.protocol_flags());
    }
    if (from.has_protocol_root_system_id_extension()) {
      set_protocol_root_system_id_extension(from.protocol_root_system_id_extension());
    }
    if (from.has_protocol_root_system_id()) {
      set_protocol_root_system_id(from.protocol_root_system_id());
    }
    if (from.has_protocol_root_path_cost()) {
      set_protocol_root_path_cost(from.protocol_root_path_cost());
    }
    if (from.has_protocol_bridge_identifier_id_extension()) {
      set_protocol_bridge_identifier_id_extension(from.protocol_bridge_identifier_id_extension());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_protocol_bridge_identifier_id()) {
      set_protocol_bridge_identifier_id(from.protocol_bridge_identifier_id());
    }
    if (from.has_protocol_port_identifier()) {
      set_protocol_port_identifier(from.protocol_port_identifier());
    }
    if (from.has_protocol_message_age()) {
      set_protocol_message_age(from.protocol_message_age());
    }
    if (from.has_protocol_max_age()) {
      set_protocol_max_age(from.protocol_max_age());
    }
    if (from.has_protocol_hello_time()) {
      set_protocol_hello_time(from.protocol_hello_time());
    }
    if (from.has_protocol_forward_delay()) {
      set_protocol_forward_delay(from.protocol_forward_delay());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Stp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stp::CopyFrom(const Stp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stp::IsInitialized() const {

  return true;
}

void Stp::Swap(Stp* other) {
  if (other != this) {
    std::swap(protocol_identifier_, other->protocol_identifier_);
    std::swap(protocol_version_identifier_, other->protocol_version_identifier_);
    std::swap(protocol_bpdu_type_, other->protocol_bpdu_type_);
    std::swap(protocol_flags_, other->protocol_flags_);
    std::swap(protocol_root_system_id_extension_, other->protocol_root_system_id_extension_);
    std::swap(protocol_root_system_id_, other->protocol_root_system_id_);
    std::swap(protocol_root_path_cost_, other->protocol_root_path_cost_);
    std::swap(protocol_bridge_identifier_id_extension_, other->protocol_bridge_identifier_id_extension_);
    std::swap(protocol_bridge_identifier_id_, other->protocol_bridge_identifier_id_);
    std::swap(protocol_port_identifier_, other->protocol_port_identifier_);
    std::swap(protocol_message_age_, other->protocol_message_age_);
    std::swap(protocol_max_age_, other->protocol_max_age_);
    std::swap(protocol_hello_time_, other->protocol_hello_time_);
    std::swap(protocol_forward_delay_, other->protocol_forward_delay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Stp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Stp_descriptor_;
  metadata.reflection = Stp_reflection_;
  return metadata;
}

::google::protobuf::internal::ExtensionIdentifier< ::OstProto::Protocol,
    ::google::protobuf::internal::MessageTypeTraits< ::OstProto::Stp >, 11, false >
  stp(kStpFieldNumber, ::OstProto::Stp::default_instance());

// @@protoc_insertion_point(namespace_scope)

}  // namespace OstProto

// @@protoc_insertion_point(global_scope)
