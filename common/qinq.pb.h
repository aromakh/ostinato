// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: qinq.proto

#ifndef PROTOBUF_qinq_2eproto__INCLUDED
#define PROTOBUF_qinq_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "protocol.pb.h"
// @@protoc_insertion_point(includes)

namespace OstProto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_qinq_2eproto();
void protobuf_AssignDesc_qinq_2eproto();
void protobuf_ShutdownFile_qinq_2eproto();

class Qinq;

// ===================================================================

class Qinq : public ::google::protobuf::Message {
 public:
  Qinq();
  virtual ~Qinq();

  Qinq(const Qinq& from);

  inline Qinq& operator=(const Qinq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Qinq& default_instance();

  void Swap(Qinq* other);

  // implements Message ----------------------------------------------

  Qinq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Qinq& from);
  void MergeFrom(const Qinq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool is_override_tpid = 1;
  inline bool has_is_override_tpid() const;
  inline void clear_is_override_tpid();
  static const int kIsOverrideTpidFieldNumber = 1;
  inline bool is_override_tpid() const;
  inline void set_is_override_tpid(bool value);

  // optional bool is_override_vlan_tpid = 2;
  inline bool has_is_override_vlan_tpid() const;
  inline void clear_is_override_vlan_tpid();
  static const int kIsOverrideVlanTpidFieldNumber = 2;
  inline bool is_override_vlan_tpid() const;
  inline void set_is_override_vlan_tpid(bool value);

  // optional uint32 qinq_tpid = 3;
  inline bool has_qinq_tpid() const;
  inline void clear_qinq_tpid();
  static const int kQinqTpidFieldNumber = 3;
  inline ::google::protobuf::uint32 qinq_tpid() const;
  inline void set_qinq_tpid(::google::protobuf::uint32 value);

  // optional uint32 qinq_vlan_tag = 4;
  inline bool has_qinq_vlan_tag() const;
  inline void clear_qinq_vlan_tag();
  static const int kQinqVlanTagFieldNumber = 4;
  inline ::google::protobuf::uint32 qinq_vlan_tag() const;
  inline void set_qinq_vlan_tag(::google::protobuf::uint32 value);

  // optional uint32 vlan_tpid = 5;
  inline bool has_vlan_tpid() const;
  inline void clear_vlan_tpid();
  static const int kVlanTpidFieldNumber = 5;
  inline ::google::protobuf::uint32 vlan_tpid() const;
  inline void set_vlan_tpid(::google::protobuf::uint32 value);

  // optional uint32 vlan_vlan_tag = 6;
  inline bool has_vlan_vlan_tag() const;
  inline void clear_vlan_vlan_tag();
  static const int kVlanVlanTagFieldNumber = 6;
  inline ::google::protobuf::uint32 vlan_vlan_tag() const;
  inline void set_vlan_vlan_tag(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:OstProto.Qinq)
 private:
  inline void set_has_is_override_tpid();
  inline void clear_has_is_override_tpid();
  inline void set_has_is_override_vlan_tpid();
  inline void clear_has_is_override_vlan_tpid();
  inline void set_has_qinq_tpid();
  inline void clear_has_qinq_tpid();
  inline void set_has_qinq_vlan_tag();
  inline void clear_has_qinq_vlan_tag();
  inline void set_has_vlan_tpid();
  inline void clear_has_vlan_tpid();
  inline void set_has_vlan_vlan_tag();
  inline void clear_has_vlan_vlan_tag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool is_override_tpid_;
  bool is_override_vlan_tpid_;
  ::google::protobuf::uint32 qinq_tpid_;
  ::google::protobuf::uint32 qinq_vlan_tag_;
  ::google::protobuf::uint32 vlan_tpid_;
  ::google::protobuf::uint32 vlan_vlan_tag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_qinq_2eproto();
  friend void protobuf_AssignDesc_qinq_2eproto();
  friend void protobuf_ShutdownFile_qinq_2eproto();

  void InitAsDefaultInstance();
  static Qinq* default_instance_;
};
// ===================================================================

static const int kQinqFieldNumber = 210;
extern ::google::protobuf::internal::ExtensionIdentifier< ::OstProto::Protocol,
    ::google::protobuf::internal::MessageTypeTraits< ::OstProto::Qinq >, 11, false >
  qinq;

// ===================================================================

// Qinq

// optional bool is_override_tpid = 1;
inline bool Qinq::has_is_override_tpid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Qinq::set_has_is_override_tpid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Qinq::clear_has_is_override_tpid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Qinq::clear_is_override_tpid() {
  is_override_tpid_ = false;
  clear_has_is_override_tpid();
}
inline bool Qinq::is_override_tpid() const {
  return is_override_tpid_;
}
inline void Qinq::set_is_override_tpid(bool value) {
  set_has_is_override_tpid();
  is_override_tpid_ = value;
}

// optional bool is_override_vlan_tpid = 2;
inline bool Qinq::has_is_override_vlan_tpid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Qinq::set_has_is_override_vlan_tpid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Qinq::clear_has_is_override_vlan_tpid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Qinq::clear_is_override_vlan_tpid() {
  is_override_vlan_tpid_ = false;
  clear_has_is_override_vlan_tpid();
}
inline bool Qinq::is_override_vlan_tpid() const {
  return is_override_vlan_tpid_;
}
inline void Qinq::set_is_override_vlan_tpid(bool value) {
  set_has_is_override_vlan_tpid();
  is_override_vlan_tpid_ = value;
}

// optional uint32 qinq_tpid = 3;
inline bool Qinq::has_qinq_tpid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Qinq::set_has_qinq_tpid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Qinq::clear_has_qinq_tpid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Qinq::clear_qinq_tpid() {
  qinq_tpid_ = 0u;
  clear_has_qinq_tpid();
}
inline ::google::protobuf::uint32 Qinq::qinq_tpid() const {
  return qinq_tpid_;
}
inline void Qinq::set_qinq_tpid(::google::protobuf::uint32 value) {
  set_has_qinq_tpid();
  qinq_tpid_ = value;
}

// optional uint32 qinq_vlan_tag = 4;
inline bool Qinq::has_qinq_vlan_tag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Qinq::set_has_qinq_vlan_tag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Qinq::clear_has_qinq_vlan_tag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Qinq::clear_qinq_vlan_tag() {
  qinq_vlan_tag_ = 0u;
  clear_has_qinq_vlan_tag();
}
inline ::google::protobuf::uint32 Qinq::qinq_vlan_tag() const {
  return qinq_vlan_tag_;
}
inline void Qinq::set_qinq_vlan_tag(::google::protobuf::uint32 value) {
  set_has_qinq_vlan_tag();
  qinq_vlan_tag_ = value;
}

// optional uint32 vlan_tpid = 5;
inline bool Qinq::has_vlan_tpid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Qinq::set_has_vlan_tpid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Qinq::clear_has_vlan_tpid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Qinq::clear_vlan_tpid() {
  vlan_tpid_ = 0u;
  clear_has_vlan_tpid();
}
inline ::google::protobuf::uint32 Qinq::vlan_tpid() const {
  return vlan_tpid_;
}
inline void Qinq::set_vlan_tpid(::google::protobuf::uint32 value) {
  set_has_vlan_tpid();
  vlan_tpid_ = value;
}

// optional uint32 vlan_vlan_tag = 6;
inline bool Qinq::has_vlan_vlan_tag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Qinq::set_has_vlan_vlan_tag() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Qinq::clear_has_vlan_vlan_tag() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Qinq::clear_vlan_vlan_tag() {
  vlan_vlan_tag_ = 0u;
  clear_has_vlan_vlan_tag();
}
inline ::google::protobuf::uint32 Qinq::vlan_vlan_tag() const {
  return vlan_vlan_tag_;
}
inline void Qinq::set_vlan_vlan_tag(::google::protobuf::uint32 value) {
  set_has_vlan_vlan_tag();
  vlan_vlan_tag_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace OstProto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_qinq_2eproto__INCLUDED
