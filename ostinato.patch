From 2ce65f68ba3195bdfa7fa16e06f0edfc6ca51579 Mon Sep 17 00:00:00 2001
From: Mykhailo Prochkaruk <mykhailo.prochkaruk@gmail.com>
Date: Sun, 5 Jan 2014 21:49:10 +0200
Subject: [PATCH] PROTOCOL

---
 common/dcbx.cpp            | 1018 +++++++++++++++++++++++++++++++++++++++++++
 common/dcbx.h              |  128 ++++++
 common/dcbx.proto          |   64 +++
 common/dcbx.ui             |  703 ++++++++++++++++++++++++++++++
 common/lacp.cpp            | 1020 ++++++++++++++++++++++++++++++++++++++++++++
 common/lacp.h              |  136 ++++++
 common/lacp.proto          |   85 ++++
 common/lacp.ui             |  675 +++++++++++++++++++++++++++++
 common/lldp_tlv.cpp        |  323 ++++++++++++++
 common/lldp_tlv.h          |   92 ++++
 common/lldp_tlv.proto      |   33 ++
 common/lldp_tlv.ui         |  104 +++++
 common/ostproto.pro        |   20 +
 common/protocol.proto      |   10 +-
 common/protocolmanager.cpp |   20 +
 common/qinq.cpp            |  372 ++++++++++++++++
 common/qinq.h              |   85 ++++
 common/qinq.proto          |   35 ++
 common/qinq.ui             |  308 +++++++++++++
 common/stp.cpp             |  744 ++++++++++++++++++++++++++++++++
 common/stp.h               |  106 +++++
 common/stp.proto           |   45 ++
 common/stp.ui              |  318 ++++++++++++++
 23 files changed, 6443 insertions(+), 1 deletion(-)
 create mode 100644 common/dcbx.cpp
 create mode 100644 common/dcbx.h
 create mode 100644 common/dcbx.proto
 create mode 100644 common/dcbx.ui
 create mode 100644 common/lacp.cpp
 create mode 100644 common/lacp.h
 create mode 100644 common/lacp.proto
 create mode 100644 common/lacp.ui
 create mode 100644 common/lldp_tlv.cpp
 create mode 100644 common/lldp_tlv.h
 create mode 100644 common/lldp_tlv.proto
 create mode 100644 common/lldp_tlv.ui
 create mode 100644 common/qinq.cpp
 create mode 100644 common/qinq.h
 create mode 100644 common/qinq.proto
 create mode 100644 common/qinq.ui
 create mode 100644 common/stp.cpp
 create mode 100644 common/stp.h
 create mode 100644 common/stp.proto
 create mode 100644 common/stp.ui

diff --git a/common/dcbx.cpp b/common/dcbx.cpp
new file mode 100644
index 0000000..a05e5b2
--- /dev/null
+++ b/common/dcbx.cpp
@@ -0,0 +1,1018 @@
+/*
+Copyright (C) 2013 Prochkaruk M.
+
+This file is part of "Ostinato"
+
+This is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+This program is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with this program.  If not, see <http://www.gnu.org/licenses/>
+*/
+
+#include <qendian.h>
+
+#include "dcbx.h"
+
+DcbxConfigForm::DcbxConfigForm(QWidget *parent)
+    : QWidget(parent)
+{
+    setupUi(this);
+}
+
+DcbxProtocol::DcbxProtocol(StreamBase *stream, AbstractProtocol *parent)
+    : AbstractProtocol(stream, parent)
+{
+    /* The configWidget is created lazily */
+    configForm = NULL;
+}
+
+DcbxProtocol::~DcbxProtocol()
+{
+    delete configForm;
+}
+
+AbstractProtocol* DcbxProtocol::createInstance(StreamBase *stream,
+    AbstractProtocol *parent)
+{
+    return new DcbxProtocol(stream, parent);
+}
+
+quint32 DcbxProtocol::protocolNumber() const
+{
+    return OstProto::Protocol::kDcbxFieldNumber;
+}
+
+void DcbxProtocol::protoDataCopyInto(OstProto::Protocol &protocol) const
+{
+    protocol.MutableExtension(OstProto::dcbx)->CopyFrom(data);
+    protocol.mutable_protocol_id()->set_id(protocolNumber());
+}
+
+void DcbxProtocol::protoDataCopyFrom(const OstProto::Protocol &protocol)
+{
+    if (protocol.protocol_id().id() == protocolNumber() &&
+            protocol.HasExtension(OstProto::dcbx))
+        data.MergeFrom(protocol.GetExtension(OstProto::dcbx));
+}
+
+QString DcbxProtocol::name() const
+{
+    return QString("DcbxProtocol");
+}
+
+QString DcbxProtocol::shortName() const
+{
+    return QString("DCBX");
+}
+
+/*!
+  TODO Return the ProtocolIdType for your protocol \n
+
+  If your protocol doesn't have a protocolId field, you don't need to 
+  reimplement this method - the base class implementation will do the 
+  right thing
+*/
+AbstractProtocol::ProtocolIdType DcbxProtocol::protocolIdType() const
+{
+    return ProtocolIdIp;
+}
+
+/*!
+  TODO Return the protocolId for your protoocol based on the 'type' requested \n
+
+  If not all types are valid for your protocol, handle the valid type(s) 
+  and for the remaining fallback to the base class implementation; if your 
+  protocol doesn't have a protocolId at all, you don't need to reimplement
+  this method - the base class will do the right thing
+*/
+quint32 DcbxProtocol::protocolId(ProtocolIdType type) const
+{
+    switch(type)
+    {
+        case ProtocolIdLlc: return 0x424203;
+        default:break;
+    }
+
+    return AbstractProtocol::protocolId(type);
+}
+
+int DcbxProtocol::fieldCount() const
+{
+    if(configForm->radioButtonConf->isChecked())
+    return dcbx_fieldCount_c;
+    else
+    if(configForm->radioButtonRec->isChecked())
+    return  dcbx_fieldCount_r;
+    else
+    if(configForm->radioButtonPrior->isChecked())
+    return  dcbx_fieldCount_p;
+    else
+    if(configForm->radioButtonApp->isChecked())
+    return  dcbx_fieldCount_a;
+    else return 0;
+}
+
+/*!
+  TODO Edit this function to return the appropriate flags for each field \n
+
+  See AbstractProtocol::FieldFlags for more info
+*/
+AbstractProtocol::FieldFlags DcbxProtocol::fieldFlags(int index) const
+{
+    AbstractProtocol::FieldFlags flags;
+
+    flags = AbstractProtocol::fieldFlags(index);
+
+    switch (index)
+    {
+        case is_c:
+        case is_r:
+        case is_p :
+        case is_a :
+        flags &= ~FrameField;
+        flags |= MetaField;
+            break;
+        default:
+            break;
+    }
+
+    return flags;
+}
+
+/*!
+TODO: Edit this function to return the data for each field
+
+See AbstractProtocol::fieldData() for more info
+*/
+QVariant DcbxProtocol::fieldData(int index, FieldAttrib attrib,
+        int streamIndex) const
+{
+    if(configForm->radioButtonConf->isChecked())
+    {
+    switch (index)
+    {
+
+            case tlv_type_len_c:
+            {
+                switch(attrib)
+                {
+                    case FieldName:
+                        return QString("TLV Type, Information string length");
+                    case FieldValue:
+                         return data.tlv_type_len_c();
+                    case FieldTextValue:
+                    return QString("0x%1").
+                            arg(data.tlv_type_len_c(), 2, BASE_HEX, QChar('0'));
+                    case FieldFrameValue:
+                        {
+                            QByteArray fv;
+                            fv.resize(2);
+                            qToBigEndian((quint16) data.tlv_type_len_c(), (uchar*)fv.data());
+                            return fv;
+                        }
+                default:
+                    break;
+                }
+                break;
+
+            }
+            case oui802_c:
+            {
+                switch(attrib)
+                {
+                    case FieldName:
+                        return QString("802.1 OUI");
+                    case FieldValue:
+                         return data.oui802_c() ;
+                    case FieldTextValue:
+                    return QString("0x%1").
+                            arg(data.oui802_c(), 3, BASE_HEX, QChar('0'));
+                    case FieldFrameValue:
+                        {
+                            QByteArray fv;
+                            fv.resize(4);
+                            qToBigEndian((quint32) data.oui802_c(), (uchar*)fv.data());
+                            fv.remove(0,1);
+                            return fv;
+                        }
+                default:
+                    break;
+                }
+                break;
+            }
+            case subtype802_c:
+            {
+                switch(attrib)
+                {
+                    case FieldName:
+                        return QString("802.1 subtype");
+                    case FieldValue:
+                         return data.subtype802_c() ;
+                    case FieldTextValue:
+                    return QString("0x%1").
+                            arg(data.subtype802_c(), 1, BASE_HEX, QChar('0'));
+                    case FieldFrameValue:
+                        return QByteArray(1, (char) data.subtype802_c());
+                default:
+                    break;
+                }
+                break;
+            }
+            case will_cbs_res_tcs:
+            {
+                switch(attrib)
+                {
+                    case FieldName:
+                        return QString("Willing, CBS, Reserved, MAX TCs");
+                    case FieldValue:
+                         return data.will_cbs_res_tcs() ;
+                    case FieldTextValue:
+                    return QString("%1").
+                            arg(data.will_cbs_res_tcs(), 1, BASE_HEX, QChar('0'));
+                    case FieldFrameValue:
+                        return QByteArray(1, (char) data.will_cbs_res_tcs());
+                default:
+                    break;
+                }
+                break;
+            }
+            case prior_ass_c:
+            {
+                switch(attrib)
+                {
+                    case FieldName:
+                        return QString("Priority Assignment Table");
+                    case FieldValue:
+                         return data.prior_ass_c() ;
+                    case FieldTextValue:
+                    return QString("0x%1").
+                            arg(data.prior_ass_c(), 4, BASE_HEX, QChar('0'));
+                    case FieldFrameValue:
+                        {
+                            QByteArray fv;
+                            fv.resize(4);
+                            qToBigEndian((quint32) data.prior_ass_c(), (uchar*)fv.data());
+                            return fv;
+                        }
+                default:
+                    break;
+                }
+                break;
+            }
+            case tc_band_c:
+            {
+                switch(attrib)
+                {
+                    case FieldName:
+                        return QString("TC Bandwidth Table");
+                    case FieldValue:
+                         return (quint32)data.tc_band_c() ;
+                    case FieldTextValue:
+                    return QString("0x%1").
+                            arg(data.tc_band_c(), 8, BASE_HEX, QChar('0'));
+                    case FieldFrameValue:
+                        {
+                            QByteArray fv;
+                            fv.resize(8);
+                            qToBigEndian((quint64) data.tc_band_c(), (uchar*)fv.data());
+                            return fv;
+                        }
+                default:
+                    break;
+                }
+            break;
+        }
+            case tsa_ass_c:
+                {
+                    switch(attrib)
+                    {
+                        case FieldName:
+                            return QString("TSA Assignment Table");
+                        case FieldValue:
+                             return (quint32)data.tsa_ass_c() ;
+                        case FieldTextValue:
+                        return QString("0x%1").
+                                arg(data.tsa_ass_c(), 8, BASE_HEX, QChar('0'));
+                        case FieldFrameValue:
+                            {
+                                QByteArray fv;
+                                fv.resize(8);
+                                qToBigEndian((quint64) data.tsa_ass_c(), (uchar*)fv.data());
+                                return fv;
+                            }
+                    default:
+                        break;
+                    }
+                break;
+            }
+
+    default:
+            break;
+    }
+    ///-----------------------------------------------------------------------------------------------------------
+}
+
+if(configForm->radioButtonRec->isChecked())
+{
+        switch (index)
+        {
+
+                case tlv_type_len_r:
+                {
+                    switch(attrib)
+                    {
+                        case FieldName:
+                            return QString("TLV Type, Information string length");
+                        case FieldValue:
+                             return data.tlv_type_len_r();
+                        case FieldTextValue:
+                        return QString("0x%1").
+                                arg(data.tlv_type_len_r(), 2, BASE_HEX, QChar('0'));
+                        case FieldFrameValue:
+                            {
+                                QByteArray fv;
+                                fv.resize(2);
+                                qToBigEndian((quint16) data.tlv_type_len_r(), (uchar*)fv.data());
+                                return fv;
+                            }
+                    default:
+                        break;
+                    }
+                    break;
+
+                }
+                case oui802_r:
+                {
+                    switch(attrib)
+                    {
+                        case FieldName:
+                            return QString("802.1 OUI");
+                        case FieldValue:
+                             return data.oui802_r() ;
+                        case FieldTextValue:
+                        return QString("0x%1").
+                                arg(data.oui802_r(), 3, BASE_HEX, QChar('0'));
+                        case FieldFrameValue:
+                            {
+                                QByteArray fv;
+                                fv.resize(4);
+                                qToBigEndian((quint32) data.oui802_r(), (uchar*)fv.data());
+                                fv.remove(0,1);
+                                return fv;
+                            }
+                    default:
+                        break;
+                    }
+                    break;
+                }
+                case subtype802_r:
+                {
+                    switch(attrib)
+                    {
+                        case FieldName:
+                            return QString("802.1 subtype");
+                        case FieldValue:
+                             return data.subtype802_r() ;
+                        case FieldTextValue:
+                        return QString("0x%1").
+                                arg(data.subtype802_r(), 1, BASE_HEX, QChar('0'));
+                        case FieldFrameValue:
+                            return QByteArray(1, (char) data.subtype802_r());
+                    default:
+                        break;
+                    }
+                    break;
+                }
+                case reserved_r:
+                {
+                    switch(attrib)
+                    {
+                        case FieldName:
+                            return QString("Reserved");
+                        case FieldValue:
+                             return data.reserved_r() ;
+                        case FieldTextValue:
+                        return QString("%1").
+                                arg(data.reserved_r(), 1, BASE_HEX, QChar('0'));
+                        case FieldFrameValue:
+                            return QByteArray(1, (char) data.reserved_r());
+                    default:
+                        break;
+                    }
+                    break;
+                }
+                case prior_ass_r:
+                {
+                    switch(attrib)
+                    {
+                        case FieldName:
+                            return QString("Priority Assignment Table");
+                        case FieldValue:
+                             return data.prior_ass_r() ;
+                        case FieldTextValue:
+                        return QString("0x%1").
+                                arg(data.prior_ass_r(), 4, BASE_HEX, QChar('0'));
+                        case FieldFrameValue:
+                            {
+                                QByteArray fv;
+                                fv.resize(4);
+                                qToBigEndian((quint32) data.prior_ass_r(), (uchar*)fv.data());
+                                return fv;
+                            }
+                    default:
+                        break;
+                    }
+                    break;
+                }
+                case tc_band_r:
+                {
+                    switch(attrib)
+                    {
+                        case FieldName:
+                            return QString("TC Bandwidth Table");
+                        case FieldValue:
+                             return (quint32)data.tc_band_r() ;
+                        case FieldTextValue:
+                        return QString("0x%1").
+                                arg(data.tc_band_r(), 8, BASE_HEX, QChar('0'));
+                        case FieldFrameValue:
+                            {
+                                QByteArray fv;
+                                fv.resize(8);
+                                qToBigEndian((quint64) data.tc_band_r(), (uchar*)fv.data());
+                                return fv;
+                            }
+                    default:
+                        break;
+                    }
+                break;
+            }
+                case tsa_ass_r:
+                    {
+                        switch(attrib)
+                        {
+                            case FieldName:
+                                return QString("TSA Assignment Table");
+                            case FieldValue:
+                                 return (quint32)data.tsa_ass_r() ;
+                            case FieldTextValue:
+                            return QString("0x%1").
+                                    arg(data.tsa_ass_r(), 8, BASE_HEX, QChar('0'));
+                            case FieldFrameValue:
+                                {
+                                    QByteArray fv;
+                                    fv.resize(8);
+                                    qToBigEndian((quint64) data.tsa_ass_r(), (uchar*)fv.data());
+                                    return fv;
+                                }
+                        default:
+                            break;
+                        }
+                    break;
+                }
+
+        default:
+                break;
+        }
+
+}
+
+if(configForm->radioButtonPrior->isChecked())
+{
+    switch (index)
+    {
+
+            case tlv_type_len_p:
+            {
+                switch(attrib)
+                {
+                    case FieldName:
+                        return QString("TLV Type, Information string length");
+                    case FieldValue:
+                         return data.tlv_type_len_p();
+                    case FieldTextValue:
+                    return QString("0x%1").
+                            arg(data.tlv_type_len_p(), 2, BASE_HEX, QChar('0'));
+                    case FieldFrameValue:
+                        {
+                            QByteArray fv;
+                            fv.resize(2);
+                            qToBigEndian((quint16) data.tlv_type_len_p(), (uchar*)fv.data());
+                            return fv;
+                        }
+                default:
+                    break;
+                }
+                break;
+
+            }
+            case oui802_p:
+            {
+                switch(attrib)
+                {
+                    case FieldName:
+                        return QString("802.1 OUI");
+                    case FieldValue:
+                         return data.oui802_p() ;
+                    case FieldTextValue:
+                    return QString("0x%1").
+                            arg(data.oui802_p(), 3, BASE_HEX, QChar('0'));
+                    case FieldFrameValue:
+                        {
+                            QByteArray fv;
+                            fv.resize(4);
+                            qToBigEndian((quint32) data.oui802_p(), (uchar*)fv.data());
+                            fv.remove(0,1);
+                            return fv;
+                        }
+                default:
+                    break;
+                }
+                break;
+            }
+            case subtype802_p:
+            {
+                switch(attrib)
+                {
+                    case FieldName:
+                        return QString("802.1 subtype");
+                    case FieldValue:
+                         return data.subtype802_p() ;
+                    case FieldTextValue:
+                    return QString("0x%1").
+                            arg(data.subtype802_p(), 1, BASE_HEX, QChar('0'));
+                    case FieldFrameValue:
+                        return QByteArray(1, (char) data.subtype802_p());
+                default:
+                    break;
+                }
+                break;
+            }
+            case will_mbc_res_pfc:
+            {
+                switch(attrib)
+                {
+                    case FieldName:
+                        return QString("Willing, MBC , Reserved, PFC cap");
+                    case FieldValue:
+                         return data.will_mbc_res_pfc() ;
+                    case FieldTextValue:
+                    return QString("%1").
+                            arg(data.will_mbc_res_pfc(), 1, BASE_HEX, QChar('0'));
+                    case FieldFrameValue:
+                    return QByteArray(1, (char) data.will_mbc_res_pfc());
+                default:
+                    break;
+                }
+                break;
+            }
+            case pfc_enable:
+            {
+                switch(attrib)
+                {
+                    case FieldName:
+                        return QString("PFC Enable");
+                    case FieldValue:
+                         return data. pfc_enable() ;
+                    case FieldTextValue:
+                    return QString("0x%1").
+                            arg(data. pfc_enable(), 1, BASE_HEX, QChar('0'));
+                    case FieldFrameValue:
+                       return QByteArray(1, (char) data. pfc_enable());
+                default:
+                    break;
+                }
+                break;
+            }
+
+    default:
+            break;
+    }
+
+
+
+}
+
+if(configForm->radioButtonApp->isChecked())
+{
+    switch (index)
+    {
+
+            case tlv_type_len_a:
+            {
+                switch(attrib)
+                {
+                    case FieldName:
+                        return QString("TLV Type, Information string length");
+                    case FieldValue:
+                         return data.tlv_type_len_a();
+                    case FieldTextValue:
+                    return QString("0x%1").
+                            arg(data.tlv_type_len_a(), 2, BASE_HEX, QChar('0'));
+                    case FieldFrameValue:
+                        {
+                            QByteArray fv;
+                            fv.resize(2);
+                            qToBigEndian((quint16) data.tlv_type_len_a(), (uchar*)fv.data());
+                            return fv;
+                        }
+                default:
+                    break;
+                }
+                break;
+
+            }
+            case oui802_a:
+            {
+                switch(attrib)
+                {
+                    case FieldName:
+                        return QString("802.1 OUI");
+                    case FieldValue:
+                         return data.oui802_a() ;
+                    case FieldTextValue:
+                    return QString("0x%1").
+                            arg(data.oui802_a(), 3, BASE_HEX, QChar('0'));
+                    case FieldFrameValue:
+                        {
+                            QByteArray fv;
+                            fv.resize(4);
+                            qToBigEndian((quint32) data.oui802_a(), (uchar*)fv.data());
+                            fv.remove(0,1);
+                            return fv;
+                        }
+                default:
+                    break;
+                }
+                break;
+            }
+            case subtype802_a:
+            {
+                switch(attrib)
+                {
+                    case FieldName:
+                        return QString("802.1 subtype");
+                    case FieldValue:
+                         return data.subtype802_a() ;
+                    case FieldTextValue:
+                    return QString("0x%1").
+                            arg(data.subtype802_a(), 1, BASE_HEX, QChar('0'));
+                    case FieldFrameValue:
+                        return QByteArray(1, (char) data.subtype802_a());
+                default:
+                    break;
+                }
+                break;
+            }
+            case reserved_a:
+            {
+                switch(attrib)
+                {
+                    case FieldName:
+                        return QString("Reserved");
+                    case FieldValue:
+                         return data.reserved_a() ;
+                    case FieldTextValue:
+                    return QString("%1").
+                            arg(data.reserved_a(), 1, BASE_HEX, QChar('0'));
+                    case FieldFrameValue:
+                    return QByteArray(1, (char) data.reserved_a());
+                default:
+                    break;
+                }
+                break;
+            }
+            case app_priority:
+            {
+             /*   switch(attrib)
+                {
+                    case FieldName:
+                        return QString("Application Priority Table");
+                    case FieldValue:
+                         return data.app_priority() ;
+                    case FieldTextValue:
+                    return QString("0x%1").
+                            arg(data.app_priority(), 1, BASE_HEX, QChar('0'));
+                    case FieldFrameValue:
+                       return QByteArray(1, (char) data.app_priority());
+                default:
+                    break;
+                }
+                break;*/
+            }
+
+    default:
+            break;
+    }
+
+
+}
+
+    return AbstractProtocol::fieldData(index, attrib, streamIndex);
+}
+
+/*!
+TODO: Edit this function to set the data for each field
+
+See AbstractProtocol::setFieldData() for more info
+*/
+bool DcbxProtocol::setFieldData(int index, const QVariant &value, 
+        FieldAttrib attrib)
+{
+    bool isOk = false;
+    if (attrib != FieldValue)
+        goto _exit;
+
+_exit:
+    return isOk;
+}
+
+/*!
+  TODO: Return the protocol frame size in bytes\n
+
+  If your protocol has a fixed size - you don't need to reimplement this; the
+  base class implementation is good enough
+*/
+int DcbxProtocol::protocolFrameSize(int streamIndex) const
+{
+    return AbstractProtocol::protocolFrameSize(streamIndex);
+}
+
+/*!
+  TODO: If your protocol has any variable fields, return true \n
+
+  Otherwise you don't need to reimplement this method - the base class always
+  returns false
+*/
+bool DcbxProtocol::isProtocolFrameValueVariable() const
+{
+    return false;
+}
+
+/*!
+  TODO: If your protocol frame size can vary across pkts of the same stream,
+  return true \n
+
+  Otherwise you don't need to reimplement this method - the base class always
+  returns false
+*/
+bool DcbxProtocol::isProtocolFrameSizeVariable() const
+{
+    return false;
+}
+
+/*!
+  TODO: If your protocol frame has any variable fields or has a variable
+  size, return the minimum number of frames required to vary the fields \n
+
+  Otherwise you don't need to reimplement this method - the base class always
+  returns 1
+*/
+int DcbxProtocol::protocolFrameVariableCount() const
+{
+    return 298;
+}
+int DcbxProtocol::frameFieldCount() const
+{
+    int count = AbstractProtocol::frameFieldCount();
+    return count;
+}
+QWidget* DcbxProtocol::configWidget()
+{
+    /* Lazy creation of the configWidget */
+    if (configForm == NULL)
+    {
+        configForm = new DcbxConfigForm;
+        loadConfigWidget();
+    }
+
+    return configForm;
+}
+
+/*!
+TODO: Edit this function to load each field's data into the config Widget
+
+See AbstractProtocol::loadConfigWidget() for more info
+*/
+void DcbxProtocol::loadConfigWidget()
+{
+     configWidget();
+
+
+        quint16 type = (data.tlv_type_len_c() & 65024) >> 9;
+        quint16 info = data.tlv_type_len_c() & 511;
+        configForm->lineEditType->setText(QString().setNum(type));
+        configForm->lineEditInfo->setText(QString().setNum(info));
+
+        configForm->lineEditOUI_c->setText(uintToHexStr(data.oui802_c(),3));
+        configForm->lineEditSubtype_c->setText(QString().setNum(data.subtype802_c()));
+
+
+        configForm->lineEditWilling_c->setText(QString().setNum(( data.will_cbs_res_tcs() >> 7) & 0b00000001));
+        configForm->lineEditCBS_c->setText(QString().setNum(( data.will_cbs_res_tcs() >> 6) & 0b00000001));
+
+        configForm->lineEditReserved_c->setText(QString().setNum(( data.will_cbs_res_tcs() >> 5) & 0b00000001)
+                                                +QString().setNum(( data.will_cbs_res_tcs() >> 4) & 0b00000001)
+                                                +QString().setNum(( data.will_cbs_res_tcs() >> 3) & 0b00000001)
+                                                );
+        configForm->lineEditMAX_c->setText(QString().setNum( (data.will_cbs_res_tcs()>> 2) & 0b00000001)
+                                           +QString().setNum(( data.will_cbs_res_tcs() >> 1) & 0b00000001)
+                                           +QString().setNum( data.will_cbs_res_tcs() & 0b00000001)
+                                           );
+
+        configForm->lineEditPriAss_c->setText(uintToHexStr(data.prior_ass_c(),4));
+        configForm->lineEditTCBand_c->setText(uintToHexStr(data.tc_band_c(),8));
+        configForm->lineEditTSAAss_c->setText(uintToHexStr(data.tsa_ass_c(),8));
+
+        type = (data.tlv_type_len_r() & 65024) >> 9;
+        info = data.tlv_type_len_r() & 511;
+        configForm->lineEditType->setText(QString().setNum(type));
+        configForm->lineEditInfo->setText(QString().setNum(info));
+        configForm->lineEditOUI_r->setText(uintToHexStr(data.oui802_r(),3));
+        configForm->lineEditSubtype_r->setText(QString().setNum(data.subtype802_r()));
+        configForm->lineEditReserved_r->setText(uintToHexStr(data.reserved_r(),1));
+        configForm->lineEditPriority_r->setText(uintToHexStr(data.prior_ass_r(),4));
+        configForm->lineEditTC_r->setText(uintToHexStr(data.tc_band_r(),8));
+        configForm->lineEditTSA_r->setText(uintToHexStr(data.tsa_ass_r(),8));
+
+        type = (data.tlv_type_len_p() & 65024) >> 9;
+        info = data.tlv_type_len_p() & 511;
+        configForm->lineEditType->setText(QString().setNum(type));
+        configForm->lineEditInfo->setText(QString().setNum(info));
+
+        configForm->lineEditOUI_p->setText(uintToHexStr(data.oui802_p(),3));
+configForm->lineEditsubtype_p->setText(QString().setNum(data.subtype802_p()));
+configForm->lineEditWilling_p->setText(QString().setNum(( data.will_mbc_res_pfc() >> 7) & 0b00000001));
+configForm->lineEditMBC_p->setText(QString().setNum(( data.will_mbc_res_pfc() >> 6) & 0b00000001));
+configForm->lineEditReserved_p->setText(QString().setNum(( data.will_mbc_res_pfc() >> 5) & 0b00000001)
+                                        +QString().setNum(( data.will_mbc_res_pfc() >> 4) & 0b00000001)
+
+            );
+configForm->lineEditPFC_p->setText(QString().setNum(( data.will_mbc_res_pfc() >> 3) & 0b00000001)
+                                   +QString().setNum(( data.will_mbc_res_pfc() >> 2) & 0b00000001)
+                                   +QString().setNum(( data.will_mbc_res_pfc() >> 1) & 0b00000001)
+                                   +QString().setNum( data.will_mbc_res_pfc() & 0b00000001)
+            );
+configForm->lineEditPFC_p_2->setText(uintToHexStr(data.pfc_enable(),1));
+
+
+        type = (data.tlv_type_len_a() & 65024) >> 9;
+         info = data.tlv_type_len_a() & 511;
+        configForm->lineEditType->setText(QString().setNum(type));
+        configForm->lineEditInfo->setText(QString().setNum(info));
+        configForm->lineEditOUI_a->setText(uintToHexStr(data.oui802_a(),3));
+        configForm->lineEditsubtype_a->setText(QString().setNum(data.subtype802_a()));
+        configForm->lineEditReserved_a->setText(uintToHexStr(data.reserved_a(),1));
+/////configForm->lineEditApplication_a->setText()
+
+
+    configForm->radioButtonConf->setChecked(data.is_c());
+    configForm->radioButtonRec->setChecked(data.is_r());
+    configForm->radioButtonPrior->setChecked(data.is_p());
+    configForm->radioButtonApp->setChecked(data.is_a());
+}
+
+/*!
+TODO: Edit this function to store each field's data from the config Widget
+
+See AbstractProtocol::storeConfigWidget() for more info
+*/
+void DcbxProtocol::storeConfigWidget()
+{
+    bool isOk;
+    configWidget();
+
+ quint16 type_info = 0;
+ quint16 type = 0;
+ quint16 info = 0;
+ quint8 will= 0;
+ quint8 temp= 0;
+     if(configForm->radioButtonConf->isChecked())
+     {
+         type = configForm->lineEditType->text()
+                 .remove(QChar(' ')).toULongLong(&isOk);
+         type = type << 9;
+         info =configForm->lineEditInfo->text()
+                 .remove(QChar(' ')).toULongLong(&isOk);
+         type_info = type | info;
+        data.set_tlv_type_len_c(type_info);
+        data.set_oui802_c(configForm->lineEditOUI_c->text()
+                          .remove(QChar(' ')).toULongLong(&isOk, BASE_HEX));
+        data.set_subtype802_c(configForm->lineEditSubtype_c->text()
+                              .remove(QChar(' ')).toULongLong(&isOk));
+        temp=configForm->lineEditWilling_c->text().remove(QChar(' ')).toULongLong(&isOk, BASE_BIN);
+        temp = temp << 7;
+        will = will | temp;
+        temp=0;
+        temp=configForm->lineEditCBS_c->text().remove(QChar(' ')).toULongLong(&isOk, BASE_BIN);
+        temp = temp << 6;
+        will = will | temp;
+        temp=0;
+        temp=configForm->lineEditReserved_c->text().remove(QChar(' ')).toULongLong(&isOk, BASE_BIN);
+        temp = temp << 3;
+        will = will | temp;
+        temp=0;
+        temp=configForm->lineEditMAX_c->text().remove(QChar(' ')).toULongLong(&isOk, BASE_BIN);
+        will = will | temp;
+        temp=0;
+        data.set_will_cbs_res_tcs(will);
+        data.set_prior_ass_c(configForm->lineEditPriAss_c->text()
+                          .remove(QChar(' ')).toULongLong(&isOk, BASE_HEX));
+        data.set_tc_band_c(configForm->lineEditTCBand_c->text()
+                          .remove(QChar(' ')).toULongLong(&isOk, BASE_HEX));
+        data.set_tsa_ass_c(configForm->lineEditTSAAss_c->text()
+                          .remove(QChar(' ')).toULongLong(&isOk, BASE_HEX));
+     }
+     if(configForm->radioButtonRec->isChecked())
+     {
+
+         type = configForm->lineEditType->text()
+                 .remove(QChar(' ')).toULongLong(&isOk);
+         type = type << 9;
+         info =configForm->lineEditInfo->text()
+                 .remove(QChar(' ')).toULongLong(&isOk);
+         type_info = type | info;
+        data.set_tlv_type_len_r(type_info);
+
+        data.set_oui802_r(configForm->lineEditOUI_r->text()
+                          .remove(QChar(' ')).toULongLong(&isOk, BASE_HEX));
+        data.set_subtype802_r(configForm->lineEditSubtype_r->text()
+                              .remove(QChar(' ')).toULongLong(&isOk));
+        data.set_reserved_r(configForm->lineEditReserved_r->text()
+                              .remove(QChar(' ')).toULongLong(&isOk, BASE_HEX));
+        data.set_prior_ass_r(configForm->lineEditPriority_r->text()
+                              .remove(QChar(' ')).toULongLong(&isOk, BASE_HEX));
+        data.set_tc_band_r(configForm->lineEditTC_r->text()
+                          .remove(QChar(' ')).toULongLong(&isOk, BASE_HEX));
+        data.set_tsa_ass_r(configForm->lineEditTSA_r->text()
+                          .remove(QChar(' ')).toULongLong(&isOk, BASE_HEX));
+
+     }
+     if(configForm->radioButtonPrior->isChecked())
+     {
+         type = configForm->lineEditType->text()
+                 .remove(QChar(' ')).toULongLong(&isOk);
+         type = type << 9;
+         info =configForm->lineEditInfo->text()
+                 .remove(QChar(' ')).toULongLong(&isOk);
+         type_info = type | info;
+        data.set_tlv_type_len_p(type_info);
+
+        data.set_oui802_p(configForm->lineEditOUI_p->text()
+                          .remove(QChar(' ')).toULongLong(&isOk, BASE_HEX));
+        data.set_subtype802_p(configForm->lineEditsubtype_p->text()
+                              .remove(QChar(' ')).toULongLong(&isOk));
+        temp=configForm->lineEditWilling_p->text().remove(QChar(' ')).toULongLong(&isOk, BASE_BIN);
+        temp = temp << 7;
+        will = will | temp;
+        temp=0;
+        temp=configForm->lineEditMBC_p->text().remove(QChar(' ')).toULongLong(&isOk, BASE_BIN);
+        temp = temp << 6;
+        will = will | temp;
+        temp=0;
+        temp=configForm->lineEditReserved_p->text().remove(QChar(' ')).toULongLong(&isOk, BASE_BIN);
+        temp = temp << 4;
+        will = will | temp;
+        temp=0;
+        temp=configForm->lineEditPFC_p->text().remove(QChar(' ')).toULongLong(&isOk, BASE_BIN);
+        will = will | temp;
+        temp=0;
+        data.set_will_mbc_res_pfc(will);
+        data.set_pfc_enable(configForm->lineEditPFC_p_2->text()
+                          .remove(QChar(' ')).toULongLong(&isOk, BASE_HEX));
+
+     }
+     if(configForm->radioButtonApp->isChecked())
+     {
+         type = configForm->lineEditType->text()
+                 .remove(QChar(' ')).toULongLong(&isOk);
+         type = type << 9;
+         info =configForm->lineEditInfo->text()
+                 .remove(QChar(' ')).toULongLong(&isOk);
+         type_info = type | info;
+        data.set_tlv_type_len_a(type_info);
+        data.set_oui802_a(configForm->lineEditOUI_a->text()
+                          .remove(QChar(' ')).toULongLong(&isOk, BASE_HEX));
+        data.set_subtype802_a(configForm->lineEditsubtype_a->text()
+                              .remove(QChar(' ')).toULongLong(&isOk));
+        data.set_reserved_a(configForm->lineEditReserved_a->text()
+                              .remove(QChar(' ')).toULongLong(&isOk, BASE_HEX));
+   ////////     data.set_app_priority(configForm->lineEditApplication_a->text()...................);
+     }
+
+     // meta data
+
+     data.set_is_c(configForm->radioButtonConf->isChecked());
+     data.set_is_r(configForm->radioButtonRec->isChecked());
+     data.set_is_p(configForm->radioButtonPrior->isChecked());
+     data.set_is_a(configForm->radioButtonApp->isChecked());
+}
+
diff --git a/common/dcbx.h b/common/dcbx.h
new file mode 100644
index 0000000..7735088
--- /dev/null
+++ b/common/dcbx.h
@@ -0,0 +1,128 @@
+/*
+Copyright (C) 2010 Srivats P.
+
+This file is part of "Ostinato"
+
+This is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+This program is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with this program.  If not, see <http://www.gnu.org/licenses/>
+*/
+
+#ifndef _DCBX_H
+#define _DCBX_H
+
+#include "dcbx.pb.h"
+#include "ui_dcbx.h"
+
+#include "abstractprotocol.h"
+
+/* 
+Dcbx Protocol Frame Format -
+    +-----+------+------+------+------+------+-----+------+------+------+------+------+
+    | LLC |  ID  |  VID | BPDU | Flag | Root |Path |Bridge| AGE  |MAXAGE|HELLO |DELAY |
+    | (24)| (16) |  (8) | (8)  | (8)  | (64) |(32) | (64) | (16) | (16) | (16) | (16) |
+    +-----+------+------+------+------+------+-----+------+------+------+------+------+
+Figures in brackets represent field width in bits
+*/
+
+class DcbxConfigForm : public QWidget, public Ui::Dcbx
+{
+    Q_OBJECT
+public:
+    DcbxConfigForm(QWidget *parent = 0);
+private slots:
+};
+
+class DcbxProtocol : public AbstractProtocol
+{
+private:
+    OstProto::Dcbx    data;
+    DcbxConfigForm    *configForm;
+    enum stpfield
+    {
+        tlv_type_len_c=0,
+        oui802_c,
+        subtype802_c,
+        will_cbs_res_tcs,
+        prior_ass_c,
+        tc_band_c,
+        tsa_ass_c,
+        dcbx_fieldCount_c,
+//---
+        tlv_type_len_r=0,
+        oui802_r,
+        subtype802_r,
+        reserved_r,
+        prior_ass_r,
+        tc_band_r,
+        tsa_ass_r,
+        dcbx_fieldCount_r,
+
+        tlv_type_len_p =0,
+        oui802_p ,
+        subtype802_p ,
+        will_mbc_res_pfc ,
+        pfc_enable ,
+        dcbx_fieldCount_p,
+
+        tlv_type_len_a=0,
+        oui802_a ,
+        subtype802_a,
+        reserved_a,
+        app_priority,
+        dcbx_fieldCount_a,
+        // meta
+        is_c,
+        is_r,
+        is_p ,
+        is_a ,
+
+        dcbx_fieldCount
+    };
+
+public:
+    DcbxProtocol(StreamBase *stream, AbstractProtocol *parent = 0);
+    virtual ~DcbxProtocol();
+
+    static AbstractProtocol* createInstance(StreamBase *stream,
+        AbstractProtocol *parent = 0);
+    virtual quint32 protocolNumber() const;
+
+    virtual void protoDataCopyInto(OstProto::Protocol &protocol) const;
+    virtual void protoDataCopyFrom(const OstProto::Protocol &protocol);
+
+    virtual ProtocolIdType protocolIdType() const;
+    virtual quint32 protocolId(ProtocolIdType type) const;
+
+    virtual QString name() const;
+    virtual QString shortName() const;
+
+    virtual int fieldCount() const;
+    virtual int frameFieldCount() const;
+
+    virtual AbstractProtocol::FieldFlags fieldFlags(int index) const;
+    virtual QVariant fieldData(int index, FieldAttrib attrib,
+               int streamIndex = 0) const;
+    virtual bool setFieldData(int index, const QVariant &value, 
+            FieldAttrib attrib = FieldValue);
+    virtual int protocolFrameSize(int streamIndex = 0) const;
+
+    virtual bool isProtocolFrameValueVariable() const;
+    virtual bool isProtocolFrameSizeVariable() const;
+    virtual int protocolFrameVariableCount() const;
+
+    virtual QWidget* configWidget();
+    virtual void loadConfigWidget();
+    virtual void storeConfigWidget();
+};
+
+#endif
diff --git a/common/dcbx.proto b/common/dcbx.proto
new file mode 100644
index 0000000..79d3e4b
--- /dev/null
+++ b/common/dcbx.proto
@@ -0,0 +1,64 @@
+/*
+Copyright (C) 2010 Srivats P.
+
+This file is part of "Ostinato"
+
+This is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+This program is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with this program.  If not, see <http://www.gnu.org/licenses/>
+*/
+
+import "protocol.proto";
+
+package OstProto;
+
+// Dcbx Protocol
+message Dcbx {
+
+// ETC Configuration TLV
+    optional uint32    		tlv_type_len_c = 1 [default = 65049];
+    optional uint32    		oui802_c = 2;
+	optional uint32    		subtype802_c = 3;
+	optional uint32    		will_cbs_res_tcs = 4;
+	optional uint32    		prior_ass_c = 5;
+	optional uint64    		tc_band_c = 6;
+	optional uint64    		tsa_ass_c = 7;
+// ETC Recommendation TLV
+	optional uint32    		tlv_type_len_r = 8 [default = 65049];
+    optional uint32    		oui802_r = 9;
+	optional uint32    		subtype802_r = 10;
+	optional uint32    		reserved_r = 11;
+	optional uint32    		prior_ass_r = 12;
+	optional uint64    		tc_band_r = 13;
+	optional uint64    		tsa_ass_r = 14;
+// Priority-base Flow Control Confiduration TLV
+	optional uint32    		tlv_type_len_p = 15 [default = 65030 ];
+    optional uint32    		oui802_p = 16;
+	optional uint32    		subtype802_p = 17;
+	optional uint32    		will_mbc_res_pfc = 18;
+	optional uint32    		pfc_enable = 19;
+//Application Priority TLV
+	optional uint32    		tlv_type_len_a = 20;
+    optional uint32    		oui802_a = 21;
+	optional uint32    		subtype802_a = 22;
+	optional uint32    		reserved_a = 23;
+	repeated uint64    		app_priority = 24 [packed = true];
+//Meta
+    optional bool is_c = 25;
+	optional bool is_r = 26;
+	optional bool is_p = 27;
+	optional bool is_a = 28;
+}
+
+extend Protocol {
+    optional Dcbx dcbx = 298;
+}
diff --git a/common/dcbx.ui b/common/dcbx.ui
new file mode 100644
index 0000000..9ffc888
--- /dev/null
+++ b/common/dcbx.ui
@@ -0,0 +1,703 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ui version="4.0">
+ <class>Dcbx</class>
+ <widget class="QWidget" name="Dcbx">
+  <property name="geometry">
+   <rect>
+    <x>0</x>
+    <y>0</y>
+    <width>801</width>
+    <height>294</height>
+   </rect>
+  </property>
+  <property name="windowTitle">
+   <string>Form</string>
+  </property>
+  <layout class="QGridLayout" name="gridLayout">
+   <item row="1" column="1">
+    <spacer name="verticalSpacer">
+     <property name="orientation">
+      <enum>Qt::Vertical</enum>
+     </property>
+     <property name="sizeHint" stdset="0">
+      <size>
+       <width>20</width>
+       <height>40</height>
+      </size>
+     </property>
+    </spacer>
+   </item>
+   <item row="2" column="0">
+    <spacer name="verticalSpacer_4">
+     <property name="orientation">
+      <enum>Qt::Vertical</enum>
+     </property>
+     <property name="sizeHint" stdset="0">
+      <size>
+       <width>20</width>
+       <height>40</height>
+      </size>
+     </property>
+    </spacer>
+   </item>
+   <item row="1" column="0">
+    <widget class="QTabWidget" name="tabWidgetDCBX">
+     <property name="enabled">
+      <bool>true</bool>
+     </property>
+     <property name="currentIndex">
+      <number>4</number>
+     </property>
+     <widget class="QWidget" name="tabHead">
+      <attribute name="title">
+       <string>TLV header</string>
+      </attribute>
+      <layout class="QGridLayout" name="gridLayout_4">
+       <item row="1" column="0">
+        <widget class="QGroupBox" name="groupBox">
+         <property name="title">
+          <string>DCBX TLV types</string>
+         </property>
+         <layout class="QGridLayout" name="gridLayout_5">
+          <item row="0" column="0">
+           <layout class="QGridLayout" name="gridLayout_2">
+            <item row="0" column="0">
+             <widget class="QRadioButton" name="radioButtonConf">
+              <property name="text">
+               <string>Configuration TLV</string>
+              </property>
+             </widget>
+            </item>
+            <item row="1" column="0">
+             <widget class="QRadioButton" name="radioButtonRec">
+              <property name="text">
+               <string>Recommendation TLV</string>
+              </property>
+             </widget>
+            </item>
+            <item row="2" column="0">
+             <widget class="QRadioButton" name="radioButtonPrior">
+              <property name="text">
+               <string>Priority-base Flow Control Confiduration TLV</string>
+              </property>
+             </widget>
+            </item>
+            <item row="3" column="0">
+             <widget class="QRadioButton" name="radioButtonApp">
+              <property name="text">
+               <string>Application Priority TLV</string>
+              </property>
+             </widget>
+            </item>
+           </layout>
+          </item>
+          <item row="0" column="1">
+           <spacer name="horizontalSpacer">
+            <property name="orientation">
+             <enum>Qt::Horizontal</enum>
+            </property>
+            <property name="sizeHint" stdset="0">
+             <size>
+              <width>40</width>
+              <height>20</height>
+             </size>
+            </property>
+           </spacer>
+          </item>
+          <item row="1" column="0">
+           <spacer name="verticalSpacer_3">
+            <property name="orientation">
+             <enum>Qt::Vertical</enum>
+            </property>
+            <property name="sizeHint" stdset="0">
+             <size>
+              <width>20</width>
+              <height>40</height>
+             </size>
+            </property>
+           </spacer>
+          </item>
+         </layout>
+        </widget>
+       </item>
+       <item row="0" column="0">
+        <layout class="QGridLayout" name="gridLayout_3">
+         <item row="1" column="0">
+          <widget class="QLabel" name="label_2">
+           <property name="text">
+            <string>TLV information string length</string>
+           </property>
+          </widget>
+         </item>
+         <item row="0" column="1">
+          <widget class="QLineEdit" name="lineEditType">
+           <property name="inputMask">
+            <string/>
+           </property>
+          </widget>
+         </item>
+         <item row="1" column="1">
+          <widget class="QLineEdit" name="lineEditInfo">
+           <property name="inputMask">
+            <string/>
+           </property>
+          </widget>
+         </item>
+         <item row="0" column="0">
+          <widget class="QLabel" name="label">
+           <property name="text">
+            <string>TLV Type</string>
+           </property>
+          </widget>
+         </item>
+        </layout>
+       </item>
+       <item row="0" column="1">
+        <spacer name="horizontalSpacer_2">
+         <property name="orientation">
+          <enum>Qt::Horizontal</enum>
+         </property>
+         <property name="sizeHint" stdset="0">
+          <size>
+           <width>40</width>
+           <height>20</height>
+          </size>
+         </property>
+        </spacer>
+       </item>
+      </layout>
+     </widget>
+     <widget class="QWidget" name="tabConf">
+      <property name="enabled">
+       <bool>true</bool>
+      </property>
+      <attribute name="title">
+       <string>Configuration TLV</string>
+      </attribute>
+      <layout class="QGridLayout" name="gridLayout_7">
+       <item row="0" column="0">
+        <layout class="QGridLayout" name="gridLayout_6">
+         <item row="3" column="1">
+          <widget class="QLineEdit" name="lineEditCBS_c">
+           <property name="inputMask">
+            <string>&gt;B; </string>
+           </property>
+          </widget>
+         </item>
+         <item row="0" column="2">
+          <widget class="QLabel" name="labelMAX_c">
+           <property name="text">
+            <string>MAX TCs</string>
+           </property>
+          </widget>
+         </item>
+         <item row="0" column="3">
+          <widget class="QLineEdit" name="lineEditMAX_c">
+           <property name="inputMask">
+            <string>&gt;BBB; </string>
+           </property>
+          </widget>
+         </item>
+         <item row="0" column="0">
+          <widget class="QLabel" name="labelOUI_c">
+           <property name="text">
+            <string>802.1 OUI</string>
+           </property>
+          </widget>
+         </item>
+         <item row="0" column="1">
+          <widget class="QLineEdit" name="lineEditOUI_c">
+           <property name="inputMask">
+            <string>&gt;HH HH HH; </string>
+           </property>
+          </widget>
+         </item>
+         <item row="3" column="2">
+          <widget class="QLabel" name="label_17">
+           <property name="text">
+            <string>TSA Assignment Table</string>
+           </property>
+          </widget>
+         </item>
+         <item row="2" column="2">
+          <widget class="QLabel" name="label_16">
+           <property name="text">
+            <string>TC Bandwidth Table</string>
+           </property>
+          </widget>
+         </item>
+         <item row="2" column="1">
+          <widget class="QLineEdit" name="lineEditWilling_c">
+           <property name="inputMask">
+            <string>&gt;B; </string>
+           </property>
+          </widget>
+         </item>
+         <item row="2" column="0">
+          <widget class="QLabel" name="label_11">
+           <property name="text">
+            <string>Willing</string>
+           </property>
+          </widget>
+         </item>
+         <item row="4" column="1">
+          <widget class="QLineEdit" name="lineEditReserved_c">
+           <property name="inputMask">
+            <string>&gt;BBB; </string>
+           </property>
+          </widget>
+         </item>
+         <item row="2" column="3">
+          <widget class="QLineEdit" name="lineEditTCBand_c">
+           <property name="inputMask">
+            <string>&gt; HH HH HH HH HH HH HH HH; </string>
+           </property>
+          </widget>
+         </item>
+         <item row="1" column="1">
+          <widget class="QLineEdit" name="lineEditSubtype_c">
+           <property name="inputMask">
+            <string/>
+           </property>
+          </widget>
+         </item>
+         <item row="1" column="3">
+          <widget class="QLineEdit" name="lineEditPriAss_c">
+           <property name="inputMask">
+            <string>&gt; HH HH HH HH; </string>
+           </property>
+          </widget>
+         </item>
+         <item row="3" column="0">
+          <widget class="QLabel" name="label_12">
+           <property name="text">
+            <string>CBS</string>
+           </property>
+          </widget>
+         </item>
+         <item row="1" column="2">
+          <widget class="QLabel" name="label_15">
+           <property name="text">
+            <string>Priority Assignment Table</string>
+           </property>
+          </widget>
+         </item>
+         <item row="1" column="0">
+          <widget class="QLabel" name="label_4">
+           <property name="text">
+            <string>802.1 subtype</string>
+           </property>
+          </widget>
+         </item>
+         <item row="3" column="3">
+          <widget class="QLineEdit" name="lineEditTSAAss_c">
+           <property name="inputMask">
+            <string>&gt; HH HH HH HH HH HH HH HH; </string>
+           </property>
+          </widget>
+         </item>
+         <item row="4" column="0">
+          <widget class="QLabel" name="labelReserved_c">
+           <property name="text">
+            <string>Reserved</string>
+           </property>
+          </widget>
+         </item>
+        </layout>
+       </item>
+       <item row="0" column="1">
+        <spacer name="horizontalSpacer_3">
+         <property name="orientation">
+          <enum>Qt::Horizontal</enum>
+         </property>
+         <property name="sizeHint" stdset="0">
+          <size>
+           <width>40</width>
+           <height>20</height>
+          </size>
+         </property>
+        </spacer>
+       </item>
+       <item row="1" column="0">
+        <spacer name="verticalSpacer_2">
+         <property name="orientation">
+          <enum>Qt::Vertical</enum>
+         </property>
+         <property name="sizeHint" stdset="0">
+          <size>
+           <width>20</width>
+           <height>40</height>
+          </size>
+         </property>
+        </spacer>
+       </item>
+      </layout>
+     </widget>
+     <widget class="QWidget" name="tabRecomm">
+      <property name="enabled">
+       <bool>true</bool>
+      </property>
+      <attribute name="title">
+       <string>Recommendation TLV</string>
+      </attribute>
+      <layout class="QGridLayout" name="gridLayout_9">
+       <item row="0" column="0">
+        <layout class="QGridLayout" name="gridLayout_8">
+         <item row="1" column="3">
+          <widget class="QLineEdit" name="lineEditTC_r">
+           <property name="inputMask">
+            <string>&gt; HH HH HH HH HH HH HH HH; </string>
+           </property>
+          </widget>
+         </item>
+         <item row="2" column="2">
+          <widget class="QLabel" name="label_20">
+           <property name="text">
+            <string>TSA Assignment Table</string>
+           </property>
+          </widget>
+         </item>
+         <item row="0" column="1">
+          <widget class="QLineEdit" name="lineEditOUI_r">
+           <property name="inputMask">
+            <string>&gt;HH HH HH; </string>
+           </property>
+          </widget>
+         </item>
+         <item row="1" column="0">
+          <widget class="QLabel" name="label_6">
+           <property name="text">
+            <string>802.1 subtype</string>
+           </property>
+          </widget>
+         </item>
+         <item row="2" column="1">
+          <widget class="QLineEdit" name="lineEditReserved_r">
+           <property name="inputMask">
+            <string>&gt;HH; </string>
+           </property>
+          </widget>
+         </item>
+         <item row="1" column="1">
+          <widget class="QLineEdit" name="lineEditSubtype_r">
+           <property name="inputMask">
+            <string/>
+           </property>
+          </widget>
+         </item>
+         <item row="2" column="3">
+          <widget class="QLineEdit" name="lineEditTSA_r">
+           <property name="inputMask">
+            <string>&gt; HH HH HH HH HH HH HH HH; </string>
+           </property>
+          </widget>
+         </item>
+         <item row="0" column="0">
+          <widget class="QLabel" name="label_5">
+           <property name="text">
+            <string>802.1 OUI</string>
+           </property>
+          </widget>
+         </item>
+         <item row="2" column="0">
+          <widget class="QLabel" name="label_18">
+           <property name="text">
+            <string>Reserved</string>
+           </property>
+          </widget>
+         </item>
+         <item row="1" column="2">
+          <widget class="QLabel" name="label_21">
+           <property name="text">
+            <string>TC Bandwidth Table</string>
+           </property>
+          </widget>
+         </item>
+         <item row="0" column="2">
+          <widget class="QLabel" name="label_19">
+           <property name="text">
+            <string>Priority Assignment Table</string>
+           </property>
+          </widget>
+         </item>
+         <item row="0" column="3">
+          <widget class="QLineEdit" name="lineEditPriority_r">
+           <property name="inputMask">
+            <string>&gt; HH HH HH HH; </string>
+           </property>
+          </widget>
+         </item>
+        </layout>
+       </item>
+       <item row="0" column="1">
+        <spacer name="horizontalSpacer_4">
+         <property name="orientation">
+          <enum>Qt::Horizontal</enum>
+         </property>
+         <property name="sizeHint" stdset="0">
+          <size>
+           <width>40</width>
+           <height>20</height>
+          </size>
+         </property>
+        </spacer>
+       </item>
+       <item row="1" column="0">
+        <spacer name="verticalSpacer_5">
+         <property name="orientation">
+          <enum>Qt::Vertical</enum>
+         </property>
+         <property name="sizeHint" stdset="0">
+          <size>
+           <width>20</width>
+           <height>40</height>
+          </size>
+         </property>
+        </spacer>
+       </item>
+      </layout>
+     </widget>
+     <widget class="QWidget" name="tabCont">
+      <property name="enabled">
+       <bool>true</bool>
+      </property>
+      <attribute name="title">
+       <string>Control Confiduration TLV</string>
+      </attribute>
+      <layout class="QGridLayout" name="gridLayout_19">
+       <item row="0" column="0">
+        <layout class="QGridLayout" name="gridLayout_18">
+         <item row="0" column="0">
+          <widget class="QLabel" name="label_7">
+           <property name="text">
+            <string>802.1 OUI</string>
+           </property>
+          </widget>
+         </item>
+         <item row="0" column="1">
+          <widget class="QLineEdit" name="lineEditOUI_p">
+           <property name="inputMask">
+            <string>&gt;HH HH HH; </string>
+           </property>
+          </widget>
+         </item>
+         <item row="0" column="2">
+          <widget class="QLabel" name="label_46">
+           <property name="text">
+            <string>PFC cap</string>
+           </property>
+          </widget>
+         </item>
+         <item row="0" column="3">
+          <widget class="QLineEdit" name="lineEditPFC_p">
+           <property name="inputMask">
+            <string>&gt;BBBB; </string>
+           </property>
+          </widget>
+         </item>
+         <item row="1" column="0">
+          <widget class="QLabel" name="label_8">
+           <property name="text">
+            <string>802.1 subtype</string>
+           </property>
+          </widget>
+         </item>
+         <item row="1" column="1">
+          <widget class="QLineEdit" name="lineEditsubtype_p">
+           <property name="inputMask">
+            <string/>
+           </property>
+          </widget>
+         </item>
+         <item row="1" column="2">
+          <widget class="QLabel" name="label_47">
+           <property name="text">
+            <string>PFC Enable</string>
+           </property>
+          </widget>
+         </item>
+         <item row="1" column="3">
+          <widget class="QLineEdit" name="lineEditPFC_p_2">
+           <property name="inputMask">
+            <string>&gt;HH; </string>
+           </property>
+          </widget>
+         </item>
+         <item row="2" column="0">
+          <widget class="QLabel" name="label_44">
+           <property name="text">
+            <string>Willing</string>
+           </property>
+          </widget>
+         </item>
+         <item row="2" column="1">
+          <widget class="QLineEdit" name="lineEditWilling_p">
+           <property name="inputMask">
+            <string>&gt;B; </string>
+           </property>
+          </widget>
+         </item>
+         <item row="3" column="0">
+          <widget class="QLabel" name="labelMBC_p">
+           <property name="text">
+            <string>MBC</string>
+           </property>
+          </widget>
+         </item>
+         <item row="3" column="1">
+          <widget class="QLineEdit" name="lineEditMBC_p">
+           <property name="inputMask">
+            <string>&gt;B; </string>
+           </property>
+          </widget>
+         </item>
+         <item row="4" column="0">
+          <widget class="QLabel" name="label_43">
+           <property name="text">
+            <string>Reserved</string>
+           </property>
+          </widget>
+         </item>
+         <item row="4" column="1">
+          <widget class="QLineEdit" name="lineEditReserved_p">
+           <property name="inputMask">
+            <string>&gt;BB; </string>
+           </property>
+          </widget>
+         </item>
+        </layout>
+       </item>
+       <item row="0" column="1">
+        <spacer name="horizontalSpacer_9">
+         <property name="orientation">
+          <enum>Qt::Horizontal</enum>
+         </property>
+         <property name="sizeHint" stdset="0">
+          <size>
+           <width>40</width>
+           <height>20</height>
+          </size>
+         </property>
+        </spacer>
+       </item>
+       <item row="1" column="0">
+        <spacer name="verticalSpacer_9">
+         <property name="orientation">
+          <enum>Qt::Vertical</enum>
+         </property>
+         <property name="sizeHint" stdset="0">
+          <size>
+           <width>20</width>
+           <height>40</height>
+          </size>
+         </property>
+        </spacer>
+       </item>
+      </layout>
+     </widget>
+     <widget class="QWidget" name="tabApp">
+      <property name="enabled">
+       <bool>true</bool>
+      </property>
+      <attribute name="title">
+       <string>Application Priority TLV</string>
+      </attribute>
+      <layout class="QGridLayout" name="gridLayout_21">
+       <item row="0" column="0">
+        <layout class="QGridLayout" name="gridLayout_20">
+         <item row="0" column="0">
+          <widget class="QLabel" name="label_9">
+           <property name="text">
+            <string>802.1 OUI</string>
+           </property>
+          </widget>
+         </item>
+         <item row="0" column="1">
+          <widget class="QLineEdit" name="lineEditOUI_a">
+           <property name="inputMask">
+            <string>&gt;HH HH HH; </string>
+           </property>
+          </widget>
+         </item>
+         <item row="1" column="0">
+          <widget class="QLabel" name="labelsubtype_a">
+           <property name="text">
+            <string>802.1 subtype</string>
+           </property>
+          </widget>
+         </item>
+         <item row="2" column="0">
+          <widget class="QLabel" name="label_48">
+           <property name="text">
+            <string>Reserved</string>
+           </property>
+          </widget>
+         </item>
+         <item row="2" column="1">
+          <widget class="QLineEdit" name="lineEditReserved_a">
+           <property name="inputMask">
+            <string>&gt;HH; </string>
+           </property>
+          </widget>
+         </item>
+         <item row="3" column="0">
+          <widget class="QLabel" name="label_49">
+           <property name="text">
+            <string>Application Priority Table</string>
+           </property>
+          </widget>
+         </item>
+         <item row="3" column="1">
+          <widget class="QLineEdit" name="lineEditApplication_a">
+           <property name="inputMask">
+            <string>&gt;HH HH HH; </string>
+           </property>
+          </widget>
+         </item>
+         <item row="1" column="1">
+          <widget class="QLineEdit" name="lineEditsubtype_a">
+           <property name="inputMask">
+            <string/>
+           </property>
+           <property name="text">
+            <string/>
+           </property>
+          </widget>
+         </item>
+        </layout>
+       </item>
+       <item row="0" column="1">
+        <spacer name="horizontalSpacer_10">
+         <property name="orientation">
+          <enum>Qt::Horizontal</enum>
+         </property>
+         <property name="sizeHint" stdset="0">
+          <size>
+           <width>40</width>
+           <height>20</height>
+          </size>
+         </property>
+        </spacer>
+       </item>
+       <item row="1" column="0">
+        <spacer name="verticalSpacer_10">
+         <property name="orientation">
+          <enum>Qt::Vertical</enum>
+         </property>
+         <property name="sizeHint" stdset="0">
+          <size>
+           <width>20</width>
+           <height>40</height>
+          </size>
+         </property>
+        </spacer>
+       </item>
+      </layout>
+     </widget>
+    </widget>
+   </item>
+  </layout>
+ </widget>
+ <resources/>
+ <connections/>
+</ui>
diff --git a/common/lacp.cpp b/common/lacp.cpp
new file mode 100644
index 0000000..6afcc20
--- /dev/null
+++ b/common/lacp.cpp
@@ -0,0 +1,1020 @@
+/*
+Copyright (C) 2013 Fedorenko A.
+
+This file is part of "Ostinato"
+
+This is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+This program is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with this program.  If not, see <http://www.gnu.org/licenses/>
+*/
+
+#include <qendian.h>
+
+#include "lacp.h"
+
+
+LacpConfigForm::LacpConfigForm(QWidget *parent)
+    : QWidget(parent)
+{
+    setupUi(this);
+}
+
+LacpProtocol::LacpProtocol(StreamBase *stream, AbstractProtocol *parent)
+    : AbstractProtocol(stream, parent)
+{
+    /* The configWidget is created lazily */
+    configForm = NULL;
+}
+
+LacpProtocol::~LacpProtocol()
+{
+    delete configForm;
+}
+
+AbstractProtocol* LacpProtocol::createInstance(StreamBase *stream,
+    AbstractProtocol *parent)
+{
+    return new LacpProtocol(stream, parent);
+}
+
+quint32 LacpProtocol::protocolNumber() const
+{
+    return OstProto::Protocol::kLacpFieldNumber;
+}
+
+void LacpProtocol::protoDataCopyInto(OstProto::Protocol &protocol) const
+{
+    protocol.MutableExtension(OstProto::lacp)->CopyFrom(data);
+    protocol.mutable_protocol_id()->set_id(protocolNumber());
+}
+
+void LacpProtocol::protoDataCopyFrom(const OstProto::Protocol &protocol)
+{
+    if (protocol.protocol_id().id() == protocolNumber() &&
+            protocol.HasExtension(OstProto::lacp))
+        data.MergeFrom(protocol.GetExtension(OstProto::lacp));
+}
+
+QString LacpProtocol::name() const
+{
+    return QString("Link Aggregation Control Protocol");
+}
+
+QString LacpProtocol::shortName() const
+{
+    return QString("LACP");
+}
+
+
+AbstractProtocol::ProtocolIdType LacpProtocol::protocolIdType() const
+{
+    return ProtocolIdIp;
+}
+
+quint32 LacpProtocol::protocolId(ProtocolIdType type) const
+{
+    switch(type)
+    {
+        case ProtocolIdIp: return 1234;
+        case ProtocolIdEth: return 0x8809;
+        default:break;
+    }
+
+    return AbstractProtocol::protocolId(type);
+}
+
+int LacpProtocol::fieldCount() const
+{
+    return lacp_fieldCount;
+}
+
+AbstractProtocol::FieldFlags LacpProtocol::fieldFlags(int index) const
+{
+    AbstractProtocol::FieldFlags flags;
+
+    flags = AbstractProtocol::fieldFlags(index);
+
+    switch (index)
+    {
+        case lacp_subtype:
+        case lacp_ver_num:
+        case lacp_TLV_typeA:
+        case lacp_Act_info_len:
+        case lacp_Act_sys_prior:
+        case lacp_Asys:
+        case lacp_Akey:
+        case lacp_Aport_prior:
+        case lacp_Aport:
+        case lacp_Astate:
+        case lacp_Areserved:
+
+        case lacp_TLV_typeP:
+        case lacp_Par_info_len:
+        case lacp_Par_sys_prior:
+        case lacp_Psys:
+        case lacp_Pkey:
+        case lacp_Pport_prior:
+        case lacp_Pport:
+        case lacp_Pstate:
+        case lacp_Preserved:
+        case lacp_FCS:
+            break;
+      // Meta Fields
+
+        case is_subtype:
+        case is_version:
+        case is_tlv_a :
+        case is_actor_info:
+        case is_tlv_p:
+        case is_partner_info:
+        case is_tlv_c:
+        case is_collector_info:
+        case is_tlv_t:
+        case is_terminator_len:
+        flags &= ~FrameField;
+        flags |= MetaField;
+            break;
+    }
+
+    return flags;
+}
+QVariant LacpProtocol::fieldData(int index, FieldAttrib attrib,
+        int streamIndex) const
+{
+    QString str[8]={"Activity","Timeout" ,"Aggregation", "Synchronization",
+                    "Collecting", "Distributing","Defaulted","Expired"};
+
+    switch (index)
+    {
+
+        case lacp_subtype:
+        {
+            switch(attrib)
+            {
+                case FieldName:
+                    return QString("Subtype = LACP");
+                case FieldValue:
+                     return data.proto_subtype();
+                case FieldTextValue:
+                return QString("0x%1").
+                        arg(data.proto_subtype(), 2, BASE_HEX, QChar('0'));
+                case FieldFrameValue:
+                   return QByteArray(1, (char) data.proto_subtype());
+            default:
+                break;
+            }
+            break;
+
+        }
+        case lacp_ver_num:
+        {
+
+            switch(attrib)
+            {
+                case FieldName:
+                    return QString("Version Number");
+                case FieldValue:
+                     return data.proto_ver_num();
+                case FieldTextValue:
+                return QString("0x%1").
+                        arg(data.proto_ver_num(), 2, BASE_HEX, QChar('0'));
+                case FieldFrameValue:
+                return QByteArray(1, (char) data.proto_ver_num());
+            default:
+                break;
+            }
+            break;
+
+        }
+    case lacp_TLV_typeA:
+    {
+
+        switch(attrib)
+        {
+            case FieldName:
+                return QString("Actor Information");
+            case FieldValue:
+                 return data.proto_tlv_typea();
+            case FieldTextValue:
+                 return QString("0x%1").
+                         arg(data.proto_tlv_typea(), 2, BASE_HEX, QChar('0'));
+            case FieldFrameValue:
+               return QByteArray(1, (char) data.proto_tlv_typea());
+            default:
+                break;
+        }
+        break;
+
+    }
+    case lacp_Act_info_len:
+    {
+
+        switch(attrib)
+        {
+            case FieldName:
+                return QString("Actor Information Length");
+            case FieldValue:
+                 return data.proto_act_info_len();
+            case FieldTextValue:
+            return QString("0x%1").
+                    arg(data.proto_act_info_len(), 2, BASE_HEX, QChar('0'));
+            case FieldFrameValue:
+               return QByteArray(1, (char) data.proto_act_info_len());
+        default:
+            break;
+        }
+        break;
+
+    }
+    case lacp_Act_sys_prior:
+    {
+
+        switch(attrib)
+        {
+            case FieldName:
+                return QString("Actor System Priority");
+            case FieldValue:
+                 return data.proto_act_sys_prior();
+            case FieldTextValue:
+            return QString("%1").
+                    arg(data.proto_act_sys_prior());
+            case FieldFrameValue:
+            {
+                QByteArray fv;
+                fv.resize(4);
+                qToBigEndian((quint32) data.proto_act_sys_prior(), (uchar*) fv.data());
+                fv.remove(0,2);
+                return fv;
+            }
+        default:
+            break;
+        }
+        break;
+
+    }
+    case lacp_Asys:
+    {
+
+        switch(attrib)
+        {
+            case FieldName:
+                return QString("Actor System");
+            case FieldValue:
+                 return (quint64)data.proto_asys();
+                 /* MOD */
+            case FieldTextValue:
+            return uintToHexStr(data.proto_asys(), 6);
+            case FieldFrameValue:
+            {
+                QByteArray fv;
+                fv.resize(8);
+                qToBigEndian((quint64)data.proto_asys() , (uchar*) fv.data());
+                fv.remove(0,2);
+                return fv;
+            }
+        default:
+            break;
+        }
+        break;
+
+    }
+
+    case lacp_Akey:
+    {
+
+        switch(attrib)
+        {
+            case FieldName:
+                return QString("Actor Key");
+            case FieldValue:
+                 return data.proto_akey();
+            case FieldTextValue:
+            return QString("%1").
+                    arg(data.proto_akey());
+            case FieldFrameValue:
+            {
+            QByteArray fv;
+            fv.resize(2);
+            qToBigEndian((quint16) data.proto_akey(), (uchar*) fv.data());
+            return fv;
+            }
+        default:
+            break;
+        }
+        break;
+
+    }
+
+    case lacp_Aport_prior:
+    {
+
+        switch(attrib)
+        {
+            case FieldName:
+                return QString("Actor Port Priority");
+            case FieldValue:
+                 return data.proto_aport_prior();
+            case FieldTextValue:
+            return QString("%1").
+                    arg(data.proto_aport_prior());
+            case FieldFrameValue:
+            {
+                QByteArray fv;
+                fv.resize(2);
+                qToBigEndian((quint16) data.proto_aport_prior(), (uchar*)fv.data());
+                return fv;
+            }
+
+        default:
+            break;
+        }
+        break;
+
+    }
+    case lacp_Aport:
+    {
+
+        switch(attrib)
+        {
+            case FieldName:
+                return QString("Actor Port Priority");
+            case FieldValue:
+                 return data.proto_aport();
+            case FieldTextValue:
+            return QString("%1").
+                    arg(data.proto_aport());
+            case FieldFrameValue:
+            {
+                QByteArray fv;
+                fv.resize(2);
+                qToBigEndian((quint16) data.proto_aport(), (uchar*)fv.data());
+                return fv;
+            }
+
+        default:
+            break;
+        }
+        break;
+
+    }
+    case lacp_Astate:
+    {
+        switch(attrib)
+        {
+            case FieldName:
+                return QString("Actor State");
+            case FieldValue:
+                 return data.proto_astate();
+            case FieldTextValue:
+            {
+            QString str_temp="( ";
+            if((data.proto_astate() & 1))str_temp+=" "+str[0];
+            if((data.proto_astate() & 2))str_temp+=" "+str[1];
+            if((data.proto_astate() & 4))str_temp+=" "+str[2];
+            if((data.proto_astate() & 8))str_temp+=" "+str[3];
+            if((data.proto_astate() & 16))str_temp+=" "+str[4];
+            if((data.proto_astate() & 32))str_temp+=" "+str[5];
+            if((data.proto_astate() & 64))str_temp+=" "+str[6];
+            if((data.proto_astate() & 128))str_temp+=" "+str[7];
+            str_temp+=" )";
+            return str_temp;
+            }
+            case FieldFrameValue:
+              return QByteArray(1, (char) data.proto_astate());
+
+        default:
+            break;
+        }
+        break;
+      }
+    case lacp_Areserved:
+        {
+
+            switch(attrib)
+            {
+                case FieldName:
+                    return QString("Reserved");
+                case FieldValue:
+                     return data.proto_areserved();
+                case FieldTextValue:
+                return uintToHexStr(data.proto_areserved(),3);
+                case FieldFrameValue:
+                {
+                    QByteArray fv;
+                    fv.resize(3);
+                    qToBigEndian((quint32) data.proto_areserved(), (uchar*)fv.data());
+                    return fv;
+                }
+
+            default:
+                break;
+            }
+            break;
+
+        }
+//--------------------------------Partner----------------------------------------------------------
+    case lacp_TLV_typeP:
+    {
+
+        switch(attrib)
+        {
+            case FieldName:
+                return QString("Partner Information");
+            case FieldValue:
+                 return data.proto_tlv_typep();
+            case FieldTextValue:
+                 return QString("0x%1").
+                         arg(data.proto_tlv_typep(), 2, BASE_HEX, QChar('0'));
+            case FieldFrameValue:
+               return QByteArray(1, (char) data.proto_tlv_typep());
+            default:
+                break;
+        }
+        break;
+
+    }
+    case lacp_Par_info_len:
+    {
+
+        switch(attrib)
+        {
+            case FieldName:
+                return QString("Partner Information Length");
+            case FieldValue:
+                 return data.proto_par_info_len();
+            case FieldTextValue:
+            return QString("0x%1").
+                    arg(data.proto_par_info_len(), 2, BASE_HEX, QChar('0'));
+            case FieldFrameValue:
+               return QByteArray(1, (char) data.proto_par_info_len());
+        default:
+            break;
+        }
+        break;
+
+    }
+    case lacp_Par_sys_prior:
+    {
+
+        switch(attrib)
+        {
+            case FieldName:
+                return QString("Partner System Priority");
+            case FieldValue:
+                 return data.proto_par_sys_prior();
+            case FieldTextValue:
+            return QString("%1").
+                    arg(data.proto_par_sys_prior());
+            case FieldFrameValue:
+            {
+                QByteArray fv;
+                fv.resize(2);
+                qToBigEndian((quint16) data.proto_par_sys_prior(), (uchar*) fv.data());
+                return fv;
+            }
+        default:
+            break;
+        }
+        break;
+
+    }
+    case lacp_Psys:
+    {
+
+        switch(attrib)
+        {
+            case FieldName:
+                return QString("Partner System");
+            case FieldValue:
+                 return (quint64)data.proto_psys();
+            case FieldTextValue:
+            return uintToHexStr(data.proto_psys(), 6);
+            case FieldFrameValue:
+            {
+                QByteArray fv;
+                fv.resize(8);
+                qToBigEndian((quint64)data.proto_psys() , (uchar*) fv.data());
+                fv.remove(0,2);
+                return fv;
+            }
+        default:
+            break;
+        }
+        break;
+
+    }
+
+    case lacp_Pkey:
+    {
+
+        switch(attrib)
+        {
+            case FieldName:
+                return QString("Partner Key");
+            case FieldValue:
+                 return data.proto_pkey();
+            case FieldTextValue:
+            return QString("%1").
+                    arg(data.proto_pkey());
+            case FieldFrameValue:
+            {
+            QByteArray fv;
+            fv.resize(2);
+            qToBigEndian((quint16) data.proto_pkey(), (uchar*) fv.data());
+            return fv;
+            }
+        default:
+            break;
+        }
+        break;
+
+    }
+
+    case lacp_Pport_prior:
+    {
+
+        switch(attrib)
+        {
+            case FieldName:
+                return QString("Partner Port Priority");
+            case FieldValue:
+                 return data.proto_pport_prior();
+            case FieldTextValue:
+            return QString("%1").
+                    arg(data.proto_pport_prior());
+            case FieldFrameValue:
+            {
+                QByteArray fv;
+                fv.resize(2);
+                qToBigEndian((quint16) data.proto_pport_prior(), (uchar*)fv.data());
+                return fv;
+            }
+
+        default:
+            break;
+        }
+        break;
+
+    }
+    case lacp_Pport:
+    {
+
+        switch(attrib)
+        {
+            case FieldName:
+                return QString("Partner Port Priority");
+            case FieldValue:
+                 return data.proto_pport();
+            case FieldTextValue:
+            return QString("%1").
+                    arg(data.proto_pport());
+            case FieldFrameValue:
+            {
+                QByteArray fv;
+                fv.resize(2);
+                qToBigEndian((quint16) data.proto_pport(), (uchar*)fv.data());
+                return fv;
+            }
+
+        default:
+            break;
+        }
+        break;
+
+    }
+    case lacp_Pstate:
+    {
+        switch(attrib)
+        {
+            case FieldName:
+                return QString("Partner State");
+            case FieldValue:
+                 return data.proto_pstate();
+            case FieldTextValue:
+            {
+            QString str_tempp="( ";
+            if((data.proto_pstate() & 1))str_tempp+=" "+str[0];
+            if((data.proto_pstate() & 2))str_tempp+=" "+str[1];
+            if((data.proto_pstate() & 4))str_tempp+=" "+str[2];
+            if((data.proto_pstate() & 8))str_tempp+=" "+str[3];
+            if((data.proto_pstate() & 16))str_tempp+=" "+str[4];
+            if((data.proto_pstate() & 32))str_tempp+=" "+str[5];
+            if((data.proto_pstate() & 64))str_tempp+=" "+str[6];
+            if((data.proto_pstate() & 128))str_tempp+=" "+str[7];
+            str_tempp+=" )";
+            return str_tempp;
+            }
+            case FieldFrameValue:
+              return QByteArray(1, (char) data.proto_pstate());
+
+        default:
+            break;
+        }
+        break;
+      }
+    case lacp_Preserved:
+        {
+
+            switch(attrib)
+            {
+                case FieldName:
+                    return QString("Reserved");
+                case FieldValue:
+                     return data.proto_preserved();
+                case FieldTextValue:
+                return uintToHexStr(data.proto_preserved(),3);
+                case FieldFrameValue:
+                {
+                    QByteArray fv;
+                    fv.resize(3);
+                    qToBigEndian((quint32) data.proto_preserved(), (uchar*)fv.data());
+                    return fv;
+                }
+
+            default:
+                break;
+            }
+            break;
+
+        }
+//--------------------------------------------Collector------------------------------------
+    case lacp_TLV_typeC:
+    {
+
+        switch(attrib)
+        {
+            case FieldName:
+                return QString("Collector Information");
+            case FieldValue:
+                 return data.proto_tlv_typec();
+            case FieldTextValue:
+                 return QString("0x%1").
+                         arg(data.proto_tlv_typec(), 2, BASE_HEX, QChar('0'));
+            case FieldFrameValue:
+               return QByteArray(1, (char) data.proto_tlv_typec());
+            default:
+                break;
+        }
+        break;
+
+    }
+    case lacp_Coll_info_len:
+    {
+
+        switch(attrib)
+        {
+            case FieldName:
+                return QString("Collector Information Length");
+            case FieldValue:
+                 return data.proto_coll_info_len();
+            case FieldTextValue:
+            return QString("0x%1").
+                    arg(data.proto_coll_info_len(), 2, BASE_HEX, QChar('0'));
+            case FieldFrameValue:
+               return QByteArray(1, (char) data.proto_coll_info_len());
+        default:
+            break;
+        }
+        break;
+
+    }
+    case lacp_CollMaxDelay:
+    {
+
+        switch(attrib)
+        {
+            case FieldName:
+                return QString("Collector Max Delay");
+            case FieldValue:
+                 return data.proto_collmaxdelay();
+            case FieldTextValue:
+            return QString("%1").
+                    arg(data.proto_collmaxdelay());
+            case FieldFrameValue:
+            {
+                QByteArray fv;
+                fv.resize(2);
+                qToBigEndian((quint16) data.proto_collmaxdelay(), (uchar*)fv.data());
+                return fv;
+            }
+
+        default:
+            break;
+        }
+        break;
+
+    }
+    case lacp_Creserved:
+        {
+
+            switch(attrib)
+            {
+                case FieldName:
+                    return QString("Reserved");
+                case FieldValue:
+                return 0;
+                case FieldTextValue:
+                return 0;
+                case FieldFrameValue:
+                {
+                    QByteArray fv;
+                    fv.resize(12);
+                    qToBigEndian((quint64) data.proto_creserved0(), (uchar*)fv.data());
+                    qToBigEndian((quint64) data.proto_creserved1(), (uchar*)fv.data()+8);
+                    return fv;
+                }
+
+            default:
+                break;
+            }
+            break;
+
+        }
+
+    case lacp_TLV_typeTerm:
+    {
+
+        switch(attrib)
+        {
+            case FieldName:
+                return QString("Terminator Information");
+            case FieldValue:
+                 return data.proto_tlv_typeterm();
+            case FieldTextValue:
+            return QString("0x%1").
+                    arg(data.proto_tlv_typeterm(), 2, BASE_HEX, QChar('0'));
+            case FieldFrameValue:
+               return QByteArray(1, (char) data.proto_tlv_typeterm());
+        default:
+            break;
+        }
+        break;
+    }
+    case lacp_Term_len:
+    {
+
+        switch(attrib)
+        {
+            case FieldName:
+                return QString("Terminator Length");
+            case FieldValue:
+                 return data.proto_term_len();
+            case FieldTextValue:
+            return QString("0x%1").
+                    arg(data.proto_term_len(), 2, BASE_HEX, QChar('0'));
+            case FieldFrameValue:
+               return QByteArray(1, (char) data.proto_term_len());
+        default:
+            break;
+        }
+        break;
+    }
+    case lacp_reserved:
+        {
+
+            switch(attrib)
+            {
+                case FieldName:
+                    return QString("Reserved");
+                case FieldValue:
+                return 0;
+                case FieldTextValue:
+                return 0;
+                case FieldFrameValue:
+                {
+                    QByteArray fv;
+                    fv.resize(50);
+                    qToBigEndian((quint64) data.proto_reserved0(), (uchar*)fv.data());
+                    qToBigEndian((quint64) data.proto_reserved1(), (uchar*)fv.data()+8);
+                    qToBigEndian((quint64) data.proto_reserved2(), (uchar*)fv.data()+16);
+                    qToBigEndian((quint64) data.proto_reserved3(), (uchar*)fv.data()+24);
+                    qToBigEndian((quint64) data.proto_reserved4(), (uchar*)fv.data()+32);
+                    qToBigEndian((quint64) data.proto_reserved5(), (uchar*)fv.data()+40);
+                    qToBigEndian((quint64) data.proto_reserved6(), (uchar*)fv.data()+48);
+                    return fv;
+                }
+
+            default:
+                break;
+            }
+            break;
+        }
+    case lacp_FCS:
+        {
+
+            switch(attrib)
+            {
+                case FieldName:
+                    return QString("FCS");
+                case FieldValue:
+                return (quint64)data.proto_fcs();
+                case FieldTextValue:
+                return uintToHexStr(data.proto_fcs(), 4);
+                case FieldFrameValue:
+                {
+                    QByteArray fv;
+                    fv.resize(8);
+                    qToBigEndian((quint64) data.proto_fcs(), (uchar*)fv.data());
+                    fv.remove(0,4);
+                    return fv;
+                }
+
+            default:
+                break;
+            }
+            break;
+        }
+
+    case is_subtype:
+    case is_version:
+    case is_tlv_a :
+    case is_actor_info:
+    case is_tlv_p:
+    case is_partner_info:
+    case is_tlv_c:
+    case is_collector_info:
+    case is_tlv_t:
+    case is_terminator_len:
+    default:
+            break;
+    }
+
+    return AbstractProtocol::fieldData(index, attrib, streamIndex);
+}
+bool LacpProtocol::setFieldData(int index, const QVariant &value,
+        FieldAttrib attrib)
+{
+    return false;
+}
+
+
+QWidget* LacpProtocol::configWidget()
+{
+    /* Lazy creation of the configWidget */
+    if (configForm == NULL)
+    {
+        configForm = new LacpConfigForm;
+        loadConfigWidget();
+    }
+
+    return configForm;
+}
+
+
+void LacpProtocol::loadConfigWidget()
+{
+    configWidget();
+
+
+   configForm->ui_Subtype->setText(QString().setNum(data.proto_subtype()));
+   configForm->ui_Version->setText(QString().setNum(data.proto_ver_num()));
+   configForm->ui_TLV_Actor->setText(QString().setNum(data.proto_tlv_typea()));
+   configForm->ui_ActorInfo->setText(QString().setNum(data.proto_act_info_len()));
+   configForm->ui_act_sys_prior->setText(QString().setNum(data.proto_act_sys_prior()));
+   configForm->ui_lacp_asys->setText(uintToHexStr(data.proto_asys(),6));
+   configForm->ui_akey->setText(QString().setNum(data.proto_akey()));
+   configForm->ui_aport_prior->setText(QString().setNum(data.proto_aport_prior()));
+   configForm->ui_aport->setText(QString().setNum(data.proto_aport()));
+
+   configForm->ui_TLV_Partner->setText(QString().setNum(data.proto_tlv_typep()));
+   configForm->ui_PartnerInfo->setText(QString().setNum(data.proto_par_info_len()));
+   configForm->ui_par_sys_prior->setText(QString().setNum(data.proto_par_sys_prior()));
+   configForm->ui_psys->setText(uintToHexStr(data.proto_psys(),6));
+   configForm->ui_pkey->setText(QString().setNum(data.proto_pkey()));
+   configForm->ui_pport_prior->setText(QString().setNum(data.proto_pport_prior()));
+   configForm->ui_pport->setText(QString().setNum(data.proto_pport()));
+
+   configForm->ui_TLV_Collector->setText(QString().setNum(data.proto_tlv_typec()));
+   configForm->ui_CollectorInfo->setText(QString().setNum(data.proto_coll_info_len()));
+   configForm->ui_collMaxDel->setText(QString().setNum(data.proto_collmaxdelay()));
+   configForm->ui_collMaxDel->setText(QString().setNum(data.proto_collmaxdelay()));
+
+   configForm->ui_TLV_Terminator->setText(QString().setNum(data.proto_tlv_typeterm()));
+   configForm->ui_TerminatoLen->setText(QString().setNum(data.proto_term_len()));
+
+   if((data.proto_pstate() & 1)) configForm->checkActivity_p->setChecked(true);
+   if((data.proto_pstate() & 2)) configForm->checkTimeout_p->setChecked(true);
+   if((data.proto_pstate() & 4)) configForm->checkAggregation_p->setChecked(true);
+   if((data.proto_pstate() & 8))configForm->checkSynchronization_p->setChecked(true);
+   if((data.proto_pstate() & 16))configForm->checkCollecting_p->setChecked(true);
+   if((data.proto_pstate() & 32))configForm->checkDistributing_p->setChecked(true);
+   if((data.proto_pstate() & 64))configForm->checkDefaulted_p->setChecked(true);
+   if((data.proto_pstate() & 128)) configForm->checkExpired_p->setChecked(true);
+
+   if((data.proto_astate() & 1)) configForm->checkActivity->setChecked(true);
+   if((data.proto_astate() & 2)) configForm->checkTimeout->setChecked(true);
+   if((data.proto_astate() & 4)) configForm->checkAggregation->setChecked(true);
+   if((data.proto_astate() & 8))configForm->checkSynchronization->setChecked(true);
+   if((data.proto_astate() & 16))configForm->checkCollecting->setChecked(true);
+   if((data.proto_astate() & 32))configForm->checkDistributing->setChecked(true);
+   if((data.proto_astate() & 64))configForm->checkDefaulted->setChecked(true);
+   if((data.proto_astate() & 128)) configForm->checkExpired->setChecked(true);
+
+    configForm->ui_FCS->setText(uintToHexStr(data.proto_fcs(),4));
+   // meta data
+
+   configForm->checkSubtype->setChecked(data.proto_is_subtype());
+   configForm->checkVersion->setChecked(data.proto_is_version());
+   configForm->checkTLV_A->setChecked(data.proto_is_tlv_a());
+   configForm->checkActorInfo->setChecked(data.proto_is_actor_info());
+   configForm->checkTLV_P->setChecked(data.proto_is_tlv_p());
+   configForm->checkPartnerInfo->setChecked(data.proto_is_partner_info());
+   configForm->checkTLVCollector->setChecked(data.proto_is_tlv_c());
+   configForm->checkCollectorInfo->setChecked(data.proto_is_collector_info());
+   configForm->checkTLV_T->setChecked(data.proto_is_tlv_t());
+   configForm->checkTerminatorLen->setChecked(data.proto_is_terminator_len());
+}
+
+
+void LacpProtocol::storeConfigWidget()
+{
+    bool isOk;
+    configWidget();
+
+    data.set_proto_act_sys_prior(configForm->ui_act_sys_prior->text().toULong(&isOk));
+
+    data.set_proto_asys(configForm->ui_lacp_asys->text()
+            .remove(QChar(' ')).toULongLong(&isOk, BASE_HEX));
+
+    data.set_proto_akey(configForm->ui_akey->text().toULong(&isOk));
+    data.set_proto_aport_prior(configForm->ui_aport_prior->text().toULong(&isOk));
+    data.set_proto_aport(configForm->ui_aport->text().toULong(&isOk));
+    quint8 astate =0;
+    if(configForm->checkActivity->isChecked()) astate = astate | 1;
+    if(configForm->checkTimeout->isChecked()) astate = astate | 2;
+    if(configForm->checkAggregation->isChecked()) astate = astate | 4;
+    if(configForm->checkSynchronization->isChecked())astate = astate | 8;
+    if(configForm->checkCollecting->isChecked())astate = astate | 16;
+    if(configForm->checkDistributing->isChecked())astate = astate | 32;
+    if(configForm->checkDefaulted->isChecked())astate = astate | 64;
+    if(configForm->checkExpired->isChecked()) astate = astate | 128;
+    data.set_proto_astate(astate);
+
+
+    data.set_proto_par_sys_prior(configForm->ui_par_sys_prior->text().toULong(&isOk));
+
+    data.set_proto_psys(configForm->ui_psys->text()
+            .remove(QChar(' ')).toULongLong(&isOk, BASE_HEX));
+
+    data.set_proto_pkey(configForm->ui_pkey->text().toULong(&isOk));
+    data.set_proto_pport_prior(configForm->ui_pport_prior->text().toULong(&isOk));
+    data.set_proto_pport(configForm->ui_pport->text().toULong(&isOk));
+    quint8 pstate =0;
+    if(configForm->checkActivity_p->isChecked()) pstate = pstate | 1;
+    if(configForm->checkTimeout_p->isChecked()) pstate = pstate | 2;
+    if(configForm->checkAggregation_p->isChecked()) pstate = pstate | 4;
+    if(configForm->checkSynchronization_p->isChecked())pstate = pstate | 8;
+    if(configForm->checkCollecting_p->isChecked())pstate = pstate | 16;
+    if(configForm->checkDistributing_p->isChecked())pstate = pstate | 32;
+    if(configForm->checkDefaulted_p->isChecked())pstate = pstate | 64;
+    if(configForm->checkExpired_p->isChecked()) pstate = pstate | 128;
+    data.set_proto_pstate(pstate);
+
+    data.set_proto_collmaxdelay(configForm->ui_collMaxDel->text().toULong(&isOk));
+
+    data.set_proto_fcs(configForm->ui_FCS->text()
+                       .remove(QChar(' ')).toULongLong(&isOk, BASE_HEX));
+
+    // meta data
+
+    data.set_proto_is_subtype(configForm->checkSubtype->isChecked());
+    data.set_proto_subtype(configForm->ui_Subtype->text().toULong(&isOk));
+
+    data.set_proto_is_version(configForm->checkVersion->isChecked());
+    data.set_proto_ver_num(configForm->ui_Version->text().toULong(&isOk));
+
+    data.set_proto_is_tlv_a(configForm->checkTLV_A->isChecked());
+    data.set_proto_tlv_typea(configForm->ui_TLV_Actor->text().toULong(&isOk));
+
+    data.set_proto_is_actor_info(configForm->checkActorInfo->isChecked());
+    data.set_proto_act_info_len(configForm->ui_ActorInfo->text().toULong(&isOk));
+
+    data.set_proto_is_tlv_p(configForm->checkTLV_P->isChecked());
+    data.set_proto_tlv_typep(configForm->ui_TLV_Partner->text().toULong(&isOk));
+
+    data.set_proto_is_partner_info(configForm->checkPartnerInfo->isChecked());
+    data.set_proto_par_info_len(configForm->ui_PartnerInfo->text().toULong(&isOk));
+
+    data.set_proto_is_tlv_c(configForm->checkTLVCollector->isChecked());
+    data.set_proto_tlv_typec(configForm->ui_TLV_Collector->text().toULong(&isOk));
+
+    data.set_proto_is_collector_info(configForm->checkCollectorInfo->isChecked());
+    data.set_proto_coll_info_len(configForm->ui_CollectorInfo->text().toULong(&isOk));
+
+    data.set_proto_is_tlv_t(configForm->checkTLV_T->isChecked());
+    data.set_proto_tlv_typeterm(configForm->ui_TLV_Terminator->text().toULong(&isOk));
+
+    data.set_proto_is_terminator_len(configForm->checkTerminatorLen->isChecked());
+    data.set_proto_term_len(configForm->ui_TerminatoLen->text().toULong(&isOk));
+
+}
+
diff --git a/common/lacp.h b/common/lacp.h
new file mode 100644
index 0000000..d398d74
--- /dev/null
+++ b/common/lacp.h
@@ -0,0 +1,136 @@
+/*
+Copyright (C) 2013 Fedorenko A.
+
+This file is part of "Ostinato"
+
+This is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+This program is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with this program.  If not, see <http://www.gnu.org/licenses/>
+*/
+
+#ifndef _LACP_H
+#define _LACP_H
+
+#include "lacp.pb.h"
+#include "ui_lacp.h"
+
+#include "abstractprotocol.h"
+
+/* 
+Lacp Protocol Frame Format -
+    +-----+------+------+------+------+------+
+    |  A  |   B  |  LEN | CSUM |   X  |   Y  |
+    | (3) | (13) | (16) | (16) | (32) | (32) |
+    +-----+------+------+------+------+------+
+Figures in brackets represent field width in bits
+*/
+
+class LacpConfigForm : public QWidget, public Ui::Lacp
+{
+    Q_OBJECT
+public:
+    LacpConfigForm(QWidget *parent = 0);
+private slots:
+};
+
+class LacpProtocol : public AbstractProtocol
+{
+private:
+    OstProto::Lacp    data;
+    LacpConfigForm    *configForm;
+    enum lacpfield
+    {
+
+        // Frame Fields
+        lacp_subtype=0,
+        lacp_ver_num,
+
+        lacp_TLV_typeA,
+        lacp_Act_info_len,
+        lacp_Act_sys_prior,
+        lacp_Asys,
+        lacp_Akey,
+        lacp_Aport_prior,
+        lacp_Aport,
+        lacp_Astate,
+        lacp_Areserved,
+
+        lacp_TLV_typeP,
+        lacp_Par_info_len,
+        lacp_Par_sys_prior,
+        lacp_Psys,
+        lacp_Pkey,
+        lacp_Pport_prior,
+        lacp_Pport,
+        lacp_Pstate,
+        lacp_Preserved,
+
+        lacp_TLV_typeC,
+        lacp_Coll_info_len,
+        lacp_CollMaxDelay,
+        lacp_Creserved,
+        lacp_TLV_typeTerm,
+        lacp_Term_len,
+        lacp_reserved,
+        lacp_FCS,
+
+       // Meta Fields
+        is_subtype,
+        is_version,
+        is_tlv_a ,
+        is_actor_info,
+        is_tlv_p,
+        is_partner_info ,
+        is_tlv_c,
+        is_collector_info,
+        is_tlv_t,
+        is_terminator_len,
+
+        lacp_fieldCount
+    };
+
+public:
+    LacpProtocol(StreamBase *stream, AbstractProtocol *parent = 0);
+    virtual ~LacpProtocol();
+
+    static AbstractProtocol* createInstance(StreamBase *stream,
+        AbstractProtocol *parent = 0);
+    virtual quint32 protocolNumber() const;
+
+    virtual void protoDataCopyInto(OstProto::Protocol &protocol) const;
+    virtual void protoDataCopyFrom(const OstProto::Protocol &protocol);
+
+    virtual ProtocolIdType protocolIdType() const;
+    virtual quint32 protocolId(ProtocolIdType type) const;
+
+    virtual QString name() const;
+    virtual QString shortName() const;
+
+    virtual int fieldCount() const;
+
+
+    virtual AbstractProtocol::FieldFlags fieldFlags(int index) const;
+    virtual QVariant fieldData(int index, FieldAttrib attrib,
+               int streamIndex = 0) const;
+    virtual bool setFieldData(int index, const QVariant &value, 
+            FieldAttrib attrib = FieldValue);
+
+
+    virtual QWidget* configWidget();
+    virtual void loadConfigWidget();
+    virtual void storeConfigWidget();
+
+
+
+};
+
+#endif
diff --git a/common/lacp.proto b/common/lacp.proto
new file mode 100644
index 0000000..85c0c2b
--- /dev/null
+++ b/common/lacp.proto
@@ -0,0 +1,85 @@
+/*
+Copyright (C) 2010 Srivats P.
+
+This file is part of "Ostinato"
+
+This is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+This program is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with this program.  If not, see <http://www.gnu.org/licenses/>
+*/
+
+import "protocol.proto";
+
+package OstProto;
+
+// Lacp Protocol
+
+message Lacp {    
+          
+    optional uint32    proto_subtype = 1 [default = 1];
+    optional uint32    proto_ver_num = 2 [default = 1];
+    optional uint32    proto_TLV_typeA = 3 [default =1];
+    optional uint32    proto_Act_info_len=4 [default = 20];
+    optional uint32    proto_Act_sys_prior = 5;
+    optional uint64    proto_Asys = 6;
+    optional uint32    proto_Akey = 7;
+    optional uint32    proto_Aport_prior = 8;
+    optional uint32    proto_Aport = 9;
+    optional uint32    proto_Astate = 10;
+    optional uint32    proto_Areserved = 11 [default = 0];
+
+    optional uint32    proto_TLV_typeP = 12 [default = 2];
+    optional uint32    proto_Par_info_len=13 [default = 20];
+    optional uint32    proto_Pstate = 14;
+    optional uint32    proto_Par_sys_prior = 15; 
+    optional uint64    proto_Psys = 16;
+    optional uint32    proto_Pkey = 17;
+    optional uint32    proto_Pport_prior = 18;
+    optional uint32    proto_Pport = 19;
+    optional uint32    proto_Preserved = 20 [default = 0];
+
+    optional uint32    proto_TLV_typeC = 21 [default = 3];
+    optional uint32    proto_Coll_info_len= 22 [default = 16];
+    optional uint32    proto_CollMaxDelay = 23;
+    optional uint64    proto_Creserved0 = 24 [default = 0];
+    optional uint64    proto_Creserved1 = 25 [default = 0];
+
+    optional uint32    proto_TLV_typeTerm = 26 [default = 0];
+    optional uint32    proto_Term_len = 27 [default = 0];
+    optional uint64    proto_reserved0 = 28 [default = 0];
+    optional uint64    proto_reserved1 = 29 [default = 0];
+    optional uint64    proto_reserved2 = 30 [default = 0];
+    optional uint64    proto_reserved3 = 31 [default = 0];
+    optional uint64    proto_reserved4 = 32 [default = 0];
+    optional uint64    proto_reserved5 = 33 [default = 0];
+    optional uint64    proto_reserved6 = 34 [default = 0];
+
+
+    optional uint64    proto_FCS = 35 [default = 0];   
+    
+   //Meta
+    optional bool    proto_is_subtype = 36 ; 
+    optional bool    proto_is_version = 37 ;
+    optional bool    proto_is_tlv_a = 38 ;
+    optional bool    proto_is_actor_info = 39 ;
+    optional bool    proto_is_tlv_p = 40 ;
+    optional bool    proto_is_partner_info = 41 ;
+    optional bool    proto_is_tlv_c = 42 ;
+    optional bool    proto_is_collector_info = 43 ;
+    optional bool    proto_is_tlv_t = 44 ;
+    optional bool    proto_is_terminator_len = 45 ;
+   
+}
+
+extend Protocol {
+    optional Lacp lacp = 299;
+}
diff --git a/common/lacp.ui b/common/lacp.ui
new file mode 100644
index 0000000..451ea2f
--- /dev/null
+++ b/common/lacp.ui
@@ -0,0 +1,675 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ui version="4.0">
+ <class>Lacp</class>
+ <widget class="QWidget" name="Lacp">
+  <property name="geometry">
+   <rect>
+    <x>0</x>
+    <y>0</y>
+    <width>842</width>
+    <height>540</height>
+   </rect>
+  </property>
+  <property name="windowTitle">
+   <string>Form</string>
+  </property>
+  <layout class="QGridLayout" name="gridLayout_7">
+   <item row="0" column="1">
+    <spacer name="horizontalSpacer">
+     <property name="orientation">
+      <enum>Qt::Horizontal</enum>
+     </property>
+     <property name="sizeHint" stdset="0">
+      <size>
+       <width>40</width>
+       <height>20</height>
+      </size>
+     </property>
+    </spacer>
+   </item>
+   <item row="2" column="0">
+    <layout class="QFormLayout" name="formLayout">
+     <property name="fieldGrowthPolicy">
+      <enum>QFormLayout::AllNonFixedFieldsGrow</enum>
+     </property>
+     <item row="0" column="0">
+      <widget class="QLabel" name="label_12">
+       <property name="text">
+        <string>FCS</string>
+       </property>
+      </widget>
+     </item>
+     <item row="0" column="1">
+      <widget class="QLineEdit" name="ui_FCS">
+       <property name="inputMask">
+        <string>&gt;HH HH HH HH; </string>
+       </property>
+      </widget>
+     </item>
+    </layout>
+   </item>
+   <item row="3" column="2">
+    <spacer name="verticalSpacer">
+     <property name="orientation">
+      <enum>Qt::Vertical</enum>
+     </property>
+     <property name="sizeHint" stdset="0">
+      <size>
+       <width>20</width>
+       <height>40</height>
+      </size>
+     </property>
+    </spacer>
+   </item>
+   <item row="1" column="2" rowspan="2">
+    <layout class="QGridLayout" name="gridLayout_5">
+     <item row="0" column="0">
+      <widget class="QCheckBox" name="checkTLVCollector">
+       <property name="text">
+        <string>TLV_typе = Collector Info</string>
+       </property>
+      </widget>
+     </item>
+     <item row="0" column="1">
+      <widget class="QLineEdit" name="ui_TLV_Collector">
+       <property name="enabled">
+        <bool>false</bool>
+       </property>
+      </widget>
+     </item>
+     <item row="1" column="0">
+      <widget class="QCheckBox" name="checkCollectorInfo">
+       <property name="text">
+        <string>Collector Information Length</string>
+       </property>
+      </widget>
+     </item>
+     <item row="1" column="1">
+      <widget class="QLineEdit" name="ui_CollectorInfo">
+       <property name="enabled">
+        <bool>false</bool>
+       </property>
+      </widget>
+     </item>
+     <item row="2" column="0">
+      <widget class="QLabel" name="label_11">
+       <property name="text">
+        <string>Collector Max Delay</string>
+       </property>
+      </widget>
+     </item>
+     <item row="2" column="1">
+      <widget class="QLineEdit" name="ui_collMaxDel"/>
+     </item>
+     <item row="3" column="0">
+      <widget class="QCheckBox" name="checkTLV_T">
+       <property name="text">
+        <string>TLV_typе  = Terminator</string>
+       </property>
+      </widget>
+     </item>
+     <item row="3" column="1">
+      <widget class="QLineEdit" name="ui_TLV_Terminator">
+       <property name="enabled">
+        <bool>false</bool>
+       </property>
+      </widget>
+     </item>
+     <item row="4" column="0">
+      <widget class="QCheckBox" name="checkTerminatorLen">
+       <property name="text">
+        <string>Terminator Length</string>
+       </property>
+      </widget>
+     </item>
+     <item row="4" column="1">
+      <widget class="QLineEdit" name="ui_TerminatoLen">
+       <property name="enabled">
+        <bool>false</bool>
+       </property>
+      </widget>
+     </item>
+    </layout>
+   </item>
+   <item row="0" column="2">
+    <layout class="QGridLayout" name="gridLayout_3">
+     <item row="0" column="1">
+      <widget class="QLineEdit" name="ui_TLV_Partner">
+       <property name="enabled">
+        <bool>false</bool>
+       </property>
+      </widget>
+     </item>
+     <item row="1" column="0">
+      <widget class="QCheckBox" name="checkPartnerInfo">
+       <property name="text">
+        <string>Partner Information Length</string>
+       </property>
+      </widget>
+     </item>
+     <item row="2" column="1">
+      <widget class="QLineEdit" name="ui_par_sys_prior"/>
+     </item>
+     <item row="0" column="0">
+      <widget class="QCheckBox" name="checkTLV_P">
+       <property name="text">
+        <string>TLV_typе = Partner Info</string>
+       </property>
+      </widget>
+     </item>
+     <item row="3" column="1">
+      <widget class="QLineEdit" name="ui_psys">
+       <property name="inputMask">
+        <string>&gt;HH HH HH HH HH HH; </string>
+       </property>
+      </widget>
+     </item>
+     <item row="5" column="0">
+      <widget class="QLabel" name="label_9">
+       <property name="text">
+        <string>Partner Port Priority</string>
+       </property>
+      </widget>
+     </item>
+     <item row="4" column="0">
+      <widget class="QLabel" name="label_8">
+       <property name="text">
+        <string>Partner Key</string>
+       </property>
+      </widget>
+     </item>
+     <item row="6" column="1">
+      <widget class="QLineEdit" name="ui_pport"/>
+     </item>
+     <item row="4" column="1">
+      <widget class="QLineEdit" name="ui_pkey"/>
+     </item>
+     <item row="6" column="0">
+      <widget class="QLabel" name="label_10">
+       <property name="text">
+        <string>Partner Port</string>
+       </property>
+      </widget>
+     </item>
+     <item row="1" column="1">
+      <widget class="QLineEdit" name="ui_PartnerInfo">
+       <property name="enabled">
+        <bool>false</bool>
+       </property>
+      </widget>
+     </item>
+     <item row="3" column="0">
+      <widget class="QLabel" name="label_7">
+       <property name="text">
+        <string>Partner System</string>
+       </property>
+      </widget>
+     </item>
+     <item row="2" column="0">
+      <widget class="QLabel" name="label_6">
+       <property name="text">
+        <string>Partner System Priority</string>
+       </property>
+      </widget>
+     </item>
+     <item row="5" column="1">
+      <widget class="QLineEdit" name="ui_pport_prior"/>
+     </item>
+     <item row="7" column="0" colspan="2">
+      <widget class="QGroupBox" name="ui_astate_2">
+       <property name="title">
+        <string>Partner State</string>
+       </property>
+       <layout class="QGridLayout" name="gridLayout_8">
+        <item row="0" column="0">
+         <layout class="QGridLayout" name="gridLayout_6">
+          <item row="0" column="0">
+           <widget class="QCheckBox" name="checkActivity_p">
+            <property name="text">
+             <string>LACP Activity</string>
+            </property>
+           </widget>
+          </item>
+          <item row="0" column="2">
+           <widget class="QCheckBox" name="checkDefaulted_p">
+            <property name="text">
+             <string>Defaulted</string>
+            </property>
+           </widget>
+          </item>
+          <item row="1" column="0">
+           <widget class="QCheckBox" name="checkTimeout_p">
+            <property name="text">
+             <string>LACP Timeout</string>
+            </property>
+           </widget>
+          </item>
+          <item row="2" column="0">
+           <widget class="QCheckBox" name="checkAggregation_p">
+            <property name="text">
+             <string>Aggregation</string>
+            </property>
+           </widget>
+          </item>
+          <item row="1" column="1">
+           <widget class="QCheckBox" name="checkCollecting_p">
+            <property name="text">
+             <string>Collecting</string>
+            </property>
+           </widget>
+          </item>
+          <item row="1" column="2">
+           <widget class="QCheckBox" name="checkExpired_p">
+            <property name="text">
+             <string>Expired</string>
+            </property>
+           </widget>
+          </item>
+          <item row="2" column="1">
+           <widget class="QCheckBox" name="checkDistributing_p">
+            <property name="text">
+             <string>Distributing</string>
+            </property>
+           </widget>
+          </item>
+          <item row="0" column="1">
+           <widget class="QCheckBox" name="checkSynchronization_p">
+            <property name="text">
+             <string>Synchronization</string>
+            </property>
+           </widget>
+          </item>
+         </layout>
+        </item>
+       </layout>
+      </widget>
+     </item>
+    </layout>
+   </item>
+   <item row="0" column="0" rowspan="2">
+    <layout class="QGridLayout" name="gridLayout_9">
+     <item row="0" column="0">
+      <layout class="QGridLayout" name="gridLayout">
+       <item row="3" column="0">
+        <widget class="QCheckBox" name="checkActorInfo">
+         <property name="text">
+          <string>Actor Information Length</string>
+         </property>
+        </widget>
+       </item>
+       <item row="8" column="1">
+        <widget class="QLineEdit" name="ui_aport"/>
+       </item>
+       <item row="4" column="0">
+        <widget class="QLabel" name="label_2">
+         <property name="text">
+          <string>Actor System Priority</string>
+         </property>
+        </widget>
+       </item>
+       <item row="8" column="0">
+        <widget class="QLabel" name="label_5">
+         <property name="text">
+          <string>Actor Port</string>
+         </property>
+        </widget>
+       </item>
+       <item row="0" column="1">
+        <widget class="QLineEdit" name="ui_Subtype">
+         <property name="enabled">
+          <bool>false</bool>
+         </property>
+        </widget>
+       </item>
+       <item row="6" column="0">
+        <widget class="QLabel" name="label_3">
+         <property name="text">
+          <string>Actor Key</string>
+         </property>
+        </widget>
+       </item>
+       <item row="3" column="1">
+        <widget class="QLineEdit" name="ui_ActorInfo">
+         <property name="enabled">
+          <bool>false</bool>
+         </property>
+        </widget>
+       </item>
+       <item row="6" column="1">
+        <widget class="QLineEdit" name="ui_akey">
+         <property name="inputMask">
+          <string/>
+         </property>
+        </widget>
+       </item>
+       <item row="4" column="1">
+        <widget class="QLineEdit" name="ui_act_sys_prior">
+         <property name="inputMask">
+          <string/>
+         </property>
+         <property name="text">
+          <string/>
+         </property>
+        </widget>
+       </item>
+       <item row="7" column="1">
+        <widget class="QLineEdit" name="ui_aport_prior">
+         <property name="inputMask">
+          <string/>
+         </property>
+        </widget>
+       </item>
+       <item row="5" column="1">
+        <widget class="QLineEdit" name="ui_lacp_asys">
+         <property name="inputMask">
+          <string>&gt;HH HH HH HH HH HH; </string>
+         </property>
+         <property name="text">
+          <string>     </string>
+         </property>
+        </widget>
+       </item>
+       <item row="1" column="1">
+        <widget class="QLineEdit" name="ui_Version">
+         <property name="enabled">
+          <bool>false</bool>
+         </property>
+        </widget>
+       </item>
+       <item row="2" column="1">
+        <widget class="QLineEdit" name="ui_TLV_Actor">
+         <property name="enabled">
+          <bool>false</bool>
+         </property>
+        </widget>
+       </item>
+       <item row="7" column="0">
+        <widget class="QLabel" name="label_4">
+         <property name="text">
+          <string>Actor Port Priority</string>
+         </property>
+        </widget>
+       </item>
+       <item row="5" column="0">
+        <widget class="QLabel" name="label">
+         <property name="text">
+          <string>Actor System</string>
+         </property>
+        </widget>
+       </item>
+       <item row="0" column="0">
+        <widget class="QCheckBox" name="checkSubtype">
+         <property name="text">
+          <string>Subtype</string>
+         </property>
+        </widget>
+       </item>
+       <item row="1" column="0">
+        <widget class="QCheckBox" name="checkVersion">
+         <property name="text">
+          <string>Version Number </string>
+         </property>
+        </widget>
+       </item>
+       <item row="2" column="0">
+        <widget class="QCheckBox" name="checkTLV_A">
+         <property name="text">
+          <string>TLV_typе = Actor Info</string>
+         </property>
+        </widget>
+       </item>
+      </layout>
+     </item>
+     <item row="1" column="0">
+      <widget class="QGroupBox" name="ui_astate">
+       <property name="title">
+        <string>Actor State</string>
+       </property>
+       <layout class="QGridLayout" name="gridLayout_4">
+        <item row="0" column="0">
+         <layout class="QGridLayout" name="gridLayout_2">
+          <item row="0" column="0">
+           <widget class="QCheckBox" name="checkActivity">
+            <property name="text">
+             <string>LACP Activity</string>
+            </property>
+           </widget>
+          </item>
+          <item row="0" column="2">
+           <widget class="QCheckBox" name="checkDefaulted">
+            <property name="text">
+             <string>Defaulted</string>
+            </property>
+           </widget>
+          </item>
+          <item row="1" column="0">
+           <widget class="QCheckBox" name="checkTimeout">
+            <property name="text">
+             <string>LACP Timeout</string>
+            </property>
+           </widget>
+          </item>
+          <item row="2" column="0">
+           <widget class="QCheckBox" name="checkAggregation">
+            <property name="text">
+             <string>Aggregation</string>
+            </property>
+           </widget>
+          </item>
+          <item row="1" column="1">
+           <widget class="QCheckBox" name="checkCollecting">
+            <property name="text">
+             <string>Collecting</string>
+            </property>
+           </widget>
+          </item>
+          <item row="1" column="2">
+           <widget class="QCheckBox" name="checkExpired">
+            <property name="text">
+             <string>Expired</string>
+            </property>
+           </widget>
+          </item>
+          <item row="2" column="1">
+           <widget class="QCheckBox" name="checkDistributing">
+            <property name="text">
+             <string>Distributing</string>
+            </property>
+           </widget>
+          </item>
+          <item row="0" column="1">
+           <widget class="QCheckBox" name="checkSynchronization">
+            <property name="text">
+             <string>Synchronization</string>
+            </property>
+           </widget>
+          </item>
+         </layout>
+        </item>
+       </layout>
+      </widget>
+     </item>
+    </layout>
+   </item>
+   <item row="0" column="3">
+    <spacer name="horizontalSpacer_2">
+     <property name="orientation">
+      <enum>Qt::Horizontal</enum>
+     </property>
+     <property name="sizeHint" stdset="0">
+      <size>
+       <width>40</width>
+       <height>20</height>
+      </size>
+     </property>
+    </spacer>
+   </item>
+  </layout>
+  <zorder>horizontalSpacer</zorder>
+  <zorder>verticalSpacer</zorder>
+  <zorder>horizontalSpacer_2</zorder>
+ </widget>
+ <resources/>
+ <connections>
+  <connection>
+   <sender>checkSubtype</sender>
+   <signal>toggled(bool)</signal>
+   <receiver>ui_Subtype</receiver>
+   <slot>setEnabled(bool)</slot>
+   <hints>
+    <hint type="sourcelabel">
+     <x>145</x>
+     <y>27</y>
+    </hint>
+    <hint type="destinationlabel">
+     <x>298</x>
+     <y>23</y>
+    </hint>
+   </hints>
+  </connection>
+  <connection>
+   <sender>checkActorInfo</sender>
+   <signal>toggled(bool)</signal>
+   <receiver>ui_ActorInfo</receiver>
+   <slot>setEnabled(bool)</slot>
+   <hints>
+    <hint type="sourcelabel">
+     <x>194</x>
+     <y>119</y>
+    </hint>
+    <hint type="destinationlabel">
+     <x>237</x>
+     <y>125</y>
+    </hint>
+   </hints>
+  </connection>
+  <connection>
+   <sender>checkTLV_P</sender>
+   <signal>toggled(bool)</signal>
+   <receiver>ui_TLV_Partner</receiver>
+   <slot>setEnabled(bool)</slot>
+   <hints>
+    <hint type="sourcelabel">
+     <x>662</x>
+     <y>24</y>
+    </hint>
+    <hint type="destinationlabel">
+     <x>691</x>
+     <y>24</y>
+    </hint>
+   </hints>
+  </connection>
+  <connection>
+   <sender>checkPartnerInfo</sender>
+   <signal>toggled(bool)</signal>
+   <receiver>ui_PartnerInfo</receiver>
+   <slot>setEnabled(bool)</slot>
+   <hints>
+    <hint type="sourcelabel">
+     <x>662</x>
+     <y>55</y>
+    </hint>
+    <hint type="destinationlabel">
+     <x>677</x>
+     <y>55</y>
+    </hint>
+   </hints>
+  </connection>
+  <connection>
+   <sender>checkTLVCollector</sender>
+   <signal>toggled(bool)</signal>
+   <receiver>ui_TLV_Collector</receiver>
+   <slot>setEnabled(bool)</slot>
+   <hints>
+    <hint type="sourcelabel">
+     <x>647</x>
+     <y>379</y>
+    </hint>
+    <hint type="destinationlabel">
+     <x>692</x>
+     <y>381</y>
+    </hint>
+   </hints>
+  </connection>
+  <connection>
+   <sender>checkCollectorInfo</sender>
+   <signal>toggled(bool)</signal>
+   <receiver>ui_CollectorInfo</receiver>
+   <slot>setEnabled(bool)</slot>
+   <hints>
+    <hint type="sourcelabel">
+     <x>655</x>
+     <y>413</y>
+    </hint>
+    <hint type="destinationlabel">
+     <x>696</x>
+     <y>414</y>
+    </hint>
+   </hints>
+  </connection>
+  <connection>
+   <sender>checkTLV_T</sender>
+   <signal>toggled(bool)</signal>
+   <receiver>ui_TLV_Terminator</receiver>
+   <slot>setEnabled(bool)</slot>
+   <hints>
+    <hint type="sourcelabel">
+     <x>650</x>
+     <y>476</y>
+    </hint>
+    <hint type="destinationlabel">
+     <x>693</x>
+     <y>479</y>
+    </hint>
+   </hints>
+  </connection>
+  <connection>
+   <sender>checkTerminatorLen</sender>
+   <signal>toggled(bool)</signal>
+   <receiver>ui_TerminatoLen</receiver>
+   <slot>setEnabled(bool)</slot>
+   <hints>
+    <hint type="sourcelabel">
+     <x>662</x>
+     <y>511</y>
+    </hint>
+    <hint type="destinationlabel">
+     <x>706</x>
+     <y>511</y>
+    </hint>
+   </hints>
+  </connection>
+  <connection>
+   <sender>checkVersion</sender>
+   <signal>toggled(bool)</signal>
+   <receiver>ui_Version</receiver>
+   <slot>setEnabled(bool)</slot>
+   <hints>
+    <hint type="sourcelabel">
+     <x>177</x>
+     <y>52</y>
+    </hint>
+    <hint type="destinationlabel">
+     <x>228</x>
+     <y>58</y>
+    </hint>
+   </hints>
+  </connection>
+  <connection>
+   <sender>checkTLV_A</sender>
+   <signal>toggled(bool)</signal>
+   <receiver>ui_TLV_Actor</receiver>
+   <slot>setEnabled(bool)</slot>
+   <hints>
+    <hint type="sourcelabel">
+     <x>189</x>
+     <y>85</y>
+    </hint>
+    <hint type="destinationlabel">
+     <x>241</x>
+     <y>92</y>
+    </hint>
+   </hints>
+  </connection>
+ </connections>
+</ui>
diff --git a/common/lldp_tlv.cpp b/common/lldp_tlv.cpp
new file mode 100644
index 0000000..fa7d016
--- /dev/null
+++ b/common/lldp_tlv.cpp
@@ -0,0 +1,323 @@
+/*
+Copyright (C) 2010 Srivats P.
+
+This file is part of "Ostinato"
+
+This is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+This program is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with this program.  If not, see <http://www.gnu.org/licenses/>
+*/
+
+#include "lldp_tlv.h"
+#include "streambase.h"
+
+#include <qendian.h>
+
+Lldp_tlvConfigForm::Lldp_tlvConfigForm(QWidget *parent)
+    : QWidget(parent)
+{
+    setupUi(this);
+
+    hexEdit->setFont(QFont("Courier"));
+    hexEdit->setOverwriteMode(false);
+}
+
+void Lldp_tlvConfigForm::on_hexEdit_overwriteModeChanged(bool isOverwriteMode)
+{
+    if (isOverwriteMode)
+        mode->setText(tr("Ovr"));
+    else
+        mode->setText(tr("Ins"));
+}
+
+Lldp_tlvProtocol::Lldp_tlvProtocol(StreamBase *stream, AbstractProtocol *parent)
+    : AbstractProtocol(stream, parent)
+{
+    /* The configWidget is created lazily */
+    configForm = NULL;
+}
+
+Lldp_tlvProtocol::~Lldp_tlvProtocol()
+{
+    delete configForm;
+}
+
+AbstractProtocol* Lldp_tlvProtocol::createInstance(StreamBase *stream,
+    AbstractProtocol *parent)
+{
+    return new Lldp_tlvProtocol(stream, parent);
+}
+
+quint32 Lldp_tlvProtocol::protocolNumber() const
+{
+    return OstProto::Protocol::kLldp_tlvFieldNumber;
+}
+
+void Lldp_tlvProtocol::protoDataCopyInto(OstProto::Protocol &protocol) const
+{
+    protocol.MutableExtension(OstProto::lldp_tlv)->CopyFrom(data);
+    protocol.mutable_protocol_id()->set_id(protocolNumber());
+}
+
+void Lldp_tlvProtocol::protoDataCopyFrom(const OstProto::Protocol &protocol)
+{
+    if (protocol.protocol_id().id() == protocolNumber() &&
+            protocol.HasExtension(OstProto::lldp_tlv))
+        data.MergeFrom(protocol.GetExtension(OstProto::lldp_tlv));
+}
+
+QString Lldp_tlvProtocol::name() const
+{
+    return QString("Link Layer Discovery Protocol TLV");
+}
+
+QString Lldp_tlvProtocol::shortName() const
+{
+    return QString("LLDP TLV");
+}
+
+int Lldp_tlvProtocol::fieldCount() const
+{
+    return lldp_tlv_fieldCount;
+}
+
+AbstractProtocol::ProtocolIdType Lldp_tlvProtocol::protocolIdType() const
+{
+    return ProtocolIdIp;
+}
+
+quint32 Lldp_tlvProtocol::protocolId(ProtocolIdType type) const
+{
+    switch(type)
+    {
+        case ProtocolIdEth: return 0x88CC;
+        default:break;
+    }
+
+    return AbstractProtocol::protocolId(type);
+}
+
+AbstractProtocol::FieldFlags Lldp_tlvProtocol::fieldFlags(int index) const
+{
+    AbstractProtocol::FieldFlags flags;
+
+    flags = AbstractProtocol::fieldFlags(index);
+
+    switch (index)
+    {
+        case lldp_tlv_content:
+            flags |= FrameField;
+            break;
+        case lldp_tlv_id:
+            flags |= FrameField;
+            break;
+        case lldp_tlv_len:
+            flags |= FrameField;
+            break;
+
+
+        default:
+            qFatal("%s: unimplemented case %d in switch", __PRETTY_FUNCTION__,
+                index);
+            break;
+    }
+
+    return flags;
+}
+
+QVariant Lldp_tlvProtocol::fieldData(int index, FieldAttrib attrib,
+        int streamIndex) const
+{
+    switch (index)
+    {
+        case lldp_tlv_content:
+        {
+            QByteArray ba;
+            QByteArray pad;
+
+            switch(attrib)
+            {
+                case FieldValue:
+                case FieldTextValue:
+                case FieldFrameValue:
+                    ba.append(QString().fromStdString(data.content()));
+
+                    break;
+
+                default:
+                    break;
+            }
+
+            switch(attrib)
+            {
+                case FieldName:            
+                    return QString("Content");
+                case FieldValue:
+                    return ba;
+                case FieldTextValue:
+                    return ba.append(pad).toHex();
+                case FieldFrameValue:
+                    return ba.append(pad);
+                default:
+                    break;
+            }
+            break;
+
+        }
+        case lldp_tlv_len:
+        {
+            switch(attrib)
+            {
+                case FieldName:
+                    return QString("TLV Lenght");
+                case FieldValue:
+                    return data.len();
+                case FieldFrameValue:
+                {
+                    QByteArray fv;
+                    fv.resize(2);
+                    qToBigEndian((quint16) (data.len()),(uchar*) fv.data());
+                    return fv;
+                }
+            //    return QByteArray(1, (char) data.len());
+                case FieldTextValue:
+                    return QString("0x%1").arg(data.len(), 3, BASE_HEX, QChar('0'));
+                case FieldBitSize:
+                    return 9;
+                default:
+                    break;
+            }
+            break;
+        }
+        case lldp_tlv_id:
+        {
+            switch(attrib)
+            {
+                case FieldName:
+                    return QString("TLV ID");
+                case FieldValue:
+                    return data.id();
+                case FieldTextValue:
+                    return QString("0x%1").arg(data.id(), 2, BASE_HEX, QChar('0'));
+                case FieldFrameValue:
+            {   QByteArray a(1, (char) data.id());
+                    return a;
+            }
+                case FieldBitSize:
+                    return 7;
+                default:
+                    break;
+            }
+            break;
+        }
+
+        default:
+            qFatal("%s: unimplemented case %d in switch", __PRETTY_FUNCTION__,
+                index);
+            break;
+    }
+
+    return AbstractProtocol::fieldData(index, attrib, streamIndex);
+}
+
+bool Lldp_tlvProtocol::setFieldData(int index, const QVariant &value,
+        FieldAttrib attrib)
+{
+    bool isOk = false;
+
+    if (attrib != FieldValue)
+        goto _exit;
+
+    switch (index)
+    {
+        case lldp_tlv_content:
+        {
+            QByteArray ba = value.toByteArray();
+            data.set_content(ba.constData(), ba.size());
+            isOk = true;
+            break;
+        }
+        case lldp_tlv_id:
+        {
+            uint a = value.toUInt(&isOk);
+            if (isOk)
+                data.set_id(a);
+            break;
+        }
+        case lldp_tlv_len:
+        {
+            uint a = value.toUInt(&isOk);
+            if (isOk)
+                data.set_len(a);
+            break;
+        }
+
+        default:
+            qFatal("%s: unimplemented case %d in switch", __PRETTY_FUNCTION__,
+                index);
+            break;
+    }
+
+_exit:
+    return isOk;
+}
+
+int Lldp_tlvProtocol::protocolFrameSize(int streamIndex) const
+{
+    int len = data.content().size();
+
+   /* if (data.pad_until_end())
+    {
+        int pad = mpStream->frameLen(streamIndex) 
+                    - (protocolFrameOffset(streamIndex) + len + kFcsSize);
+        if (pad < 0)
+            pad = 0;
+        len += pad;
+    }*/
+
+    return len;
+}
+
+QWidget* Lldp_tlvProtocol::configWidget()
+{
+    /* Lazy creation of the configWidget */
+    if (configForm == NULL)
+    {
+        configForm = new Lldp_tlvConfigForm;
+        loadConfigWidget();
+    }
+
+    return configForm;
+}
+
+void Lldp_tlvProtocol::loadConfigWidget()
+{
+    configWidget();
+
+    configForm->TLV_ID_field->setText(QString("%1").arg(data.id()));
+    configForm->TLV_Len_field->setText(QString("%1").arg(data.len()));
+
+    configForm->hexEdit->setData(
+            fieldData(lldp_tlv_content, FieldValue).toByteArray());
+
+}
+
+void Lldp_tlvProtocol::storeConfigWidget()
+{
+    bool isOk;
+    configWidget();
+    data.set_id(configForm->TLV_ID_field->text().toULong(&isOk, 16));
+    data.set_len(configForm->TLV_Len_field->text().toULong(&isOk, 16));
+    setFieldData(lldp_tlv_content, configForm->hexEdit->data());
+
+}
+
diff --git a/common/lldp_tlv.h b/common/lldp_tlv.h
new file mode 100644
index 0000000..b154aa9
--- /dev/null
+++ b/common/lldp_tlv.h
@@ -0,0 +1,92 @@
+/*
+Copyright (C) 2010 Srivats P.
+
+This file is part of "Ostinato"
+
+This is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+This program is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with this program.  If not, see <http://www.gnu.org/licenses/>
+*/
+
+#ifndef _LLDP_TLV_H
+#define _LLDP_TLV_H
+
+#include "lldp_tlv.pb.h"
+#include "ui_lldp_tlv.h"
+
+#include "abstractprotocol.h"
+
+/* 
+Lldp_tlv Protocol Frame Format -
+    +----------+---------+
+    |   User   |   Zero  |
+    | Lldp_tlv | Padding |
+    +----------+---------+
+*/
+
+class Lldp_tlvConfigForm : public QWidget, public Ui::Lldp_tlv
+{
+    Q_OBJECT
+public:
+    Lldp_tlvConfigForm(QWidget *parent = 0);
+private slots:
+    void on_hexEdit_overwriteModeChanged(bool isOverwriteMode);
+};
+
+class Lldp_tlvProtocol : public AbstractProtocol
+{
+public:
+    Lldp_tlvProtocol(StreamBase *stream, AbstractProtocol *parent = 0);
+    virtual ~Lldp_tlvProtocol();
+
+    static AbstractProtocol* createInstance(StreamBase *stream,
+        AbstractProtocol *parent = 0);
+    virtual quint32 protocolNumber() const;
+
+    virtual void protoDataCopyInto(OstProto::Protocol &protocol) const;
+    virtual void protoDataCopyFrom(const OstProto::Protocol &protocol);
+
+    virtual QString name() const;
+    virtual QString shortName() const;
+
+    virtual ProtocolIdType protocolIdType() const;
+    virtual quint32 protocolId(ProtocolIdType type) const;
+
+    virtual int fieldCount() const;
+
+    virtual AbstractProtocol::FieldFlags fieldFlags(int index) const;
+    virtual QVariant fieldData(int index, FieldAttrib attrib,
+               int streamIndex = 0) const;
+    virtual bool setFieldData(int index, const QVariant &value, 
+            FieldAttrib attrib = FieldValue);
+
+    virtual int protocolFrameSize(int streamIndex = 0) const;
+
+    virtual QWidget* configWidget();
+    virtual void loadConfigWidget();
+    virtual void storeConfigWidget();
+
+private:
+    OstProto::Lldp_tlv    data;
+    Lldp_tlvConfigForm    *configForm;
+    enum lldp_tlvfield
+    {
+        // Frame Fields
+        lldp_tlv_id =0,
+        lldp_tlv_len,
+        lldp_tlv_content,
+
+        // Meta Fields
+        lldp_tlv_fieldCount
+    };
+};
+#endif
diff --git a/common/lldp_tlv.proto b/common/lldp_tlv.proto
new file mode 100644
index 0000000..54f56b4
--- /dev/null
+++ b/common/lldp_tlv.proto
@@ -0,0 +1,33 @@
+/*
+Copyright (C) 2013 Marchuk S.
+
+This file is part of "Ostinato"
+
+This is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+This program is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with this program.  If not, see <http://www.gnu.org/licenses/>
+*/
+
+import "protocol.proto";
+
+package OstProto;
+
+// HexDump Protocol
+message Lldp_tlv {
+    optional uint32 id = 1;
+    optional uint32 len = 2;
+    optional bytes content = 3;
+}
+
+extend Protocol {
+    optional Lldp_tlv lldp_tlv = 211;
+}
diff --git a/common/lldp_tlv.ui b/common/lldp_tlv.ui
new file mode 100644
index 0000000..599e4ed
--- /dev/null
+++ b/common/lldp_tlv.ui
@@ -0,0 +1,104 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ui version="4.0">
+ <class>Lldp_tlv</class>
+ <widget class="QWidget" name="Lldp_tlv">
+  <property name="geometry">
+   <rect>
+    <x>0</x>
+    <y>0</y>
+    <width>511</width>
+    <height>190</height>
+   </rect>
+  </property>
+  <property name="windowTitle">
+   <string>Form</string>
+  </property>
+  <layout class="QGridLayout">
+   <item row="2" column="1">
+    <layout class="QFormLayout" name="formLayout">
+     <property name="fieldGrowthPolicy">
+      <enum>QFormLayout::AllNonFixedFieldsGrow</enum>
+     </property>
+     <item row="0" column="1">
+      <widget class="QLineEdit" name="TLV_ID_field"/>
+     </item>
+     <item row="2" column="1">
+      <widget class="QHexEdit" name="hexEdit" native="true">
+       <property name="minimumSize">
+        <size>
+         <width>100</width>
+         <height>70</height>
+        </size>
+       </property>
+      </widget>
+     </item>
+     <item row="0" column="0">
+      <widget class="QLabel" name="label">
+       <property name="text">
+        <string>TLV ID</string>
+       </property>
+      </widget>
+     </item>
+     <item row="2" column="0">
+      <widget class="QLabel" name="label_2">
+       <property name="text">
+        <string>TLV Data</string>
+       </property>
+      </widget>
+     </item>
+     <item row="3" column="1">
+      <widget class="QLabel" name="mode">
+       <property name="minimumSize">
+        <size>
+         <width>50</width>
+         <height>0</height>
+        </size>
+       </property>
+       <property name="maximumSize">
+        <size>
+         <width>20</width>
+         <height>16777215</height>
+        </size>
+       </property>
+       <property name="layoutDirection">
+        <enum>Qt::RightToLeft</enum>
+       </property>
+       <property name="frameShape">
+        <enum>QFrame::Panel</enum>
+       </property>
+       <property name="frameShadow">
+        <enum>QFrame::Sunken</enum>
+       </property>
+       <property name="lineWidth">
+        <number>1</number>
+       </property>
+       <property name="text">
+        <string/>
+       </property>
+      </widget>
+     </item>
+     <item row="1" column="1">
+      <widget class="QLineEdit" name="TLV_Len_field"/>
+     </item>
+     <item row="1" column="0">
+      <widget class="QLabel" name="label_3">
+       <property name="text">
+        <string>TLV Length</string>
+       </property>
+      </widget>
+     </item>
+    </layout>
+   </item>
+  </layout>
+ </widget>
+ <customwidgets>
+  <customwidget>
+   <class>QHexEdit</class>
+   <extends>QWidget</extends>
+   <header>qhexedit.h</header>
+   <container>1</container>
+  </customwidget>
+ </customwidgets>
+ <resources/>
+ <connections/>
+</ui>
diff --git a/common/ostproto.pro b/common/ostproto.pro
index f0563fc..bd80751 100644
--- a/common/ostproto.pro
+++ b/common/ostproto.pro
@@ -23,6 +23,11 @@ FORMS += \
     textproto.ui \
     userscript.ui \
     hexdump.ui \
+    stp.ui \
+    qinq.ui \
+    lacp.ui \
+    lldp_tlv.ui \
+    dcbx.ui \
     sample.ui 
 PROTOS += \
     protocol.proto \
@@ -54,6 +59,11 @@ PROTOS += \
     textproto.proto \
     userscript.proto \
     hexdump.proto \
+    stp.proto \
+    qinq.proto \
+    lacp.proto \
+    lldp_tlv.proto \
+    dcbx.proto \
     sample.proto 
 HEADERS += \
     ostprotolib.h \
@@ -99,6 +109,11 @@ HEADERS += \
     textproto.h \
     userscript.h \
     hexdump.h \
+    stp.h \
+    qinq.h \
+    lacp.h \
+    lldp_tlv.h \
+    dcbx.h \
     sample.h
 SOURCES += \
     ostprotolib.cpp \
@@ -135,6 +150,11 @@ SOURCES += \
     textproto.cpp \
     userscript.cpp \
     hexdump.cpp \
+    stp.cpp \
+    qinq.cpp \
+    lacp.cpp \
+    lldp_tlv.cpp \
+    dcbx.cpp \
     sample.cpp
 
 QMAKE_DISTCLEAN += object_script.*
diff --git a/common/protocol.proto b/common/protocol.proto
index 9a74654..013e4d2 100644
--- a/common/protocol.proto
+++ b/common/protocol.proto
@@ -102,7 +102,15 @@ message Protocol {
         kDot2LlcFieldNumber = 206;
         kDot2SnapFieldNumber = 207;
         kVlanStackFieldNumber = 208;
-
+        //----Mykhailo Prochkaruk---
+        kStpFieldNumber = 209;
+        kQinqFieldNumber = 210;
+        //----Sergiy Marchuk--------
+        kLldp_tlvFieldNumber = 211;
+        //----Andriy Fedorenko------
+        kDcbxFieldNumber = 298;
+        kLacpFieldNumber = 299;
+        //--------------------------
         kArpFieldNumber = 300;
         kIp4FieldNumber = 301;
         kIp6FieldNumber = 302;
diff --git a/common/protocolmanager.cpp b/common/protocolmanager.cpp
index e91f270..8508bfe 100644
--- a/common/protocolmanager.cpp
+++ b/common/protocolmanager.cpp
@@ -47,6 +47,11 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>
 #include "userscript.h"
 #include "hexdump.h"
 #include "sample.h"
+#include "stp.h"
+#include "qinq.h"
+#include "dcbx.h"
+#include "lacp.h"
+#include "lldp_tlv.h"
 
 ProtocolManager *OstProtocolManager;
 
@@ -77,6 +82,21 @@ ProtocolManager::ProtocolManager()
             (void*) VlanProtocol::createInstance);
     registerProtocol(OstProto::Protocol::kVlanStackFieldNumber,
             (void*) VlanStackProtocol::createInstance);
+    /* Prochkaruk M. - STP */
+    registerProtocol(OstProto::Protocol::kStpFieldNumber,
+            (void*) StpProtocol::createInstance);
+    /* Prochkaruk M. - QinQ */
+    registerProtocol(OstProto::Protocol::kQinqFieldNumber,
+            (void*) QinqProtocol::createInstance);
+    /* Marchuk S. - LLDP TLV */
+    registerProtocol(OstProto::Protocol::kLldp_tlvFieldNumber,
+            (void*) Lldp_tlvProtocol::createInstance);
+    /* Fedorenko A.. - LACP */
+     registerProtocol(OstProto::Protocol::kLacpFieldNumber,
+            (void*) LacpProtocol::createInstance);
+    /* Fedorenko A.. - DCBX */
+     registerProtocol(OstProto::Protocol::kDcbxFieldNumber,
+            (void*) DcbxProtocol::createInstance);
 
     registerProtocol(OstProto::Protocol::kArpFieldNumber,
             (void*) ArpProtocol::createInstance);
diff --git a/common/qinq.cpp b/common/qinq.cpp
new file mode 100644
index 0000000..5be4979
--- /dev/null
+++ b/common/qinq.cpp
@@ -0,0 +1,372 @@
+/*
+Copyright (C) 2013 Prochkaruk M.
+
+This file is part of "Ostinato"
+
+This is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+This program is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with this program.  If not, see <http://www.gnu.org/licenses/>
+*/
+
+#include <qendian.h>
+
+#include "qinq.h"
+
+QinqConfigForm::QinqConfigForm(QWidget *parent)
+    : QWidget(parent)
+{
+    setupUi(this);
+}
+
+QinqProtocol::QinqProtocol(StreamBase *stream, AbstractProtocol *parent)
+    : AbstractProtocol(stream, parent)
+{
+    configForm = NULL;
+}
+
+QinqProtocol::~QinqProtocol()
+{
+    delete configForm;
+}
+
+AbstractProtocol* QinqProtocol::createInstance(StreamBase *stream,
+    AbstractProtocol *parent)
+{
+    return new QinqProtocol(stream, parent);
+}
+
+quint32 QinqProtocol::protocolNumber() const
+{
+    return OstProto::Protocol::kQinqFieldNumber;
+}
+
+void QinqProtocol::protoDataCopyInto(OstProto::Protocol &protocol) const
+{
+    protocol.MutableExtension(OstProto::qinq)->CopyFrom(data);
+    protocol.mutable_protocol_id()->set_id(protocolNumber());
+}
+
+void QinqProtocol::protoDataCopyFrom(const OstProto::Protocol &protocol)
+{
+    if (protocol.protocol_id().id() == protocolNumber() &&
+            protocol.HasExtension(OstProto::qinq))
+        data.MergeFrom(protocol.GetExtension(OstProto::qinq));
+}
+
+QString QinqProtocol::name() const
+{
+    return QString("Q-in-Q VLAN");
+}
+
+QString QinqProtocol::shortName() const
+{
+    return QString("QinQ");
+}
+
+int    QinqProtocol::fieldCount() const
+{
+    return qinq_fieldCount;
+}
+
+AbstractProtocol::FieldFlags QinqProtocol::fieldFlags(int index) const
+{
+    AbstractProtocol::FieldFlags flags;
+
+    flags = AbstractProtocol::fieldFlags(index);
+
+    switch (index)
+    {
+        case qinq_tpid:
+        case qinq_prio:
+        case qinq_cfiDei:
+        case qinq_vlanId:
+        case vlan_tpid:
+        case vlan_prio:
+        case vlan_cfiDei:
+        case vlan_vlanId:
+            break;
+
+        // meta-fields
+        case isOverrideTpid:
+        case isOverrideVlanTpid:
+            flags &= ~FrameField;
+            flags |= MetaField;
+            break;
+    }
+
+    return flags;
+}
+
+QVariant QinqProtocol::fieldData(int index, FieldAttrib attrib,
+        int streamIndex) const
+{
+    switch (index)
+    {
+        case qinq_tpid:
+        {
+            quint16 tpid;
+            tpid = data.is_override_tpid() ? data.qinq_tpid() : 0x88A8;
+            switch(attrib)
+            {
+                case FieldName:
+                    return QString("QinQ Tag Protocol Id");
+                case FieldValue:
+                    return tpid;
+                case FieldTextValue:
+                    return QString("0x%1").arg(tpid, 2, BASE_HEX, QChar('0'));
+                case FieldFrameValue:
+                {
+                    QByteArray fv;
+                    fv.resize(2);
+                    qToBigEndian(tpid, (uchar*) fv.data());
+                    return fv;
+                }
+                case FieldBitSize:
+                    return 16;
+                default:
+                    break;
+            }
+            break;
+        }
+
+        case qinq_prio:
+        {
+            uint prio = ((data.qinq_vlan_tag() >> 13) & 0x07);
+
+            switch(attrib)
+            {
+                case FieldName:
+                    return QString("QinQ Priority");
+                case FieldValue:
+                    return prio;
+                case FieldTextValue:
+                    return QString("%1").arg(prio);
+                case FieldFrameValue:
+                    return QByteArray(1, (char) prio);
+                case FieldBitSize:
+                    return 3;
+                default:
+                    break;
+            }
+            break;
+        }
+
+        case qinq_cfiDei:
+        {
+            uint cfiDei = ((data.qinq_vlan_tag() >> 12) & 0x01);
+
+            switch(attrib)
+            {
+                case FieldName:
+                    return QString("QinQ CFI/DEI");
+                case FieldValue:
+                    return cfiDei;
+                case FieldTextValue:
+                    return QString("%1").arg(cfiDei);
+                case FieldFrameValue:
+                    return QByteArray(1, (char) cfiDei);
+                case FieldBitSize:
+                    return 1;
+                default:
+                    break;
+            }
+            break;
+        }
+
+        case qinq_vlanId:
+        {
+            quint16 vlanId = (data.qinq_vlan_tag() & 0x0FFF);
+
+            switch(attrib)
+            {
+                case FieldName:
+                    return QString("QinQ VLAN Id");
+                case FieldValue:
+                    return vlanId;
+                case FieldTextValue:
+                    return QString("%1").arg(vlanId);
+                case FieldFrameValue:
+                {
+                    QByteArray fv;
+                    fv.resize(2);
+                    qToBigEndian((quint16) vlanId, (uchar*) fv.data());
+                    return fv;
+                }
+                case FieldBitSize:
+                    return 12;
+                default:
+                    break;
+            }
+            break;
+        }
+
+        case vlan_tpid:
+        {
+            quint16 tpid;
+
+            tpid = data.is_override_tpid() ? data.vlan_tpid() : 0x8100;
+
+            switch(attrib)
+            {
+                case FieldName:            
+                    return QString("Tag Protocol Id");
+                case FieldValue:
+                    return tpid;
+                case FieldTextValue:
+                    return QString("0x%1").arg(tpid, 2, BASE_HEX, QChar('0'));
+                case FieldFrameValue:
+                {
+                    QByteArray fv;
+                    fv.resize(2);
+                    qToBigEndian(tpid, (uchar*) fv.data()); 
+                    return fv;
+                }
+                case FieldBitSize:
+                    return 16;
+                default:
+                    break;
+            }
+            break;
+        }
+
+        case vlan_prio:
+        {
+            uint prio = ((data.vlan_vlan_tag() >> 13) & 0x07);
+
+            switch(attrib)
+            {
+                case FieldName:            
+                    return QString("Priority");
+                case FieldValue:
+                    return prio;
+                case FieldTextValue:
+                    return QString("%1").arg(prio);
+                case FieldFrameValue:
+                    return QByteArray(1, (char) prio);
+                case FieldBitSize:
+                    return 3;
+                default:
+                    break;
+            }
+            break;
+        }
+
+        case vlan_cfiDei:
+        {
+            uint cfiDei = ((data.vlan_vlan_tag() >> 12) & 0x01);
+
+            switch(attrib)
+            {
+                case FieldName:            
+                    return QString("CFI/DEI");
+                case FieldValue:
+                    return cfiDei;
+                case FieldTextValue:
+                    return QString("%1").arg(cfiDei);
+                case FieldFrameValue:
+                    return QByteArray(1, (char) cfiDei);
+                case FieldBitSize:
+                    return 1;
+                default:
+                    break;
+            }
+            break;
+        }
+
+        case vlan_vlanId:
+        {
+            quint16 vlanId = (data.vlan_vlan_tag() & 0x0FFF);
+
+            switch(attrib)
+            {
+                case FieldName:            
+                    return QString("VLAN Id");
+                case FieldValue:
+                    return vlanId;
+                case FieldTextValue:
+                    return QString("%1").arg(vlanId);
+                case FieldFrameValue:
+                {
+                    QByteArray fv;
+                    fv.resize(2);
+                    qToBigEndian((quint16) vlanId, (uchar*) fv.data());
+                    return fv;
+                }
+                case FieldBitSize:
+                    return 12;
+                default:
+                    break;
+            }
+            break;
+        }
+        // Meta fields
+        case isOverrideTpid:
+        default:
+            break;
+    }
+
+    return AbstractProtocol::fieldData(index, attrib, streamIndex);
+}
+
+bool QinqProtocol::setFieldData(int /*index*/, const QVariant &/*value*/, 
+        FieldAttrib /*attrib*/)
+{
+    return false;
+}
+
+
+QWidget* QinqProtocol::configWidget()
+{
+    if (configForm == NULL)
+    {
+        configForm = new QinqConfigForm;
+        loadConfigWidget();
+    }
+    return configForm;
+}
+
+void QinqProtocol::loadConfigWidget()
+{
+    configWidget();
+
+    configForm->cbTpidOverride->setChecked(data.is_override_tpid());
+    configForm->leTpid->setText(uintToHexStr(fieldData(vlan_tpid, FieldValue).toUInt(), 2));
+    configForm->cmbPrio->setCurrentIndex(fieldData(vlan_prio, FieldValue).toUInt());
+    configForm->cmbCfiDei->setCurrentIndex(fieldData(vlan_cfiDei, FieldValue).toUInt());
+    configForm->leVlanId->setText(fieldData(vlan_vlanId, FieldValue).toString());
+    configForm->cbVlanTpidOverride->setChecked(data.is_override_tpid());
+    configForm->ui_qinq_tpid->setText(uintToHexStr(fieldData(qinq_tpid, FieldValue).toUInt(), 2));
+    configForm->ui_qinq_priority->setCurrentIndex(fieldData(qinq_prio, FieldValue).toUInt());
+    configForm->ui_qinq_cfu_dei->setCurrentIndex(fieldData(qinq_cfiDei, FieldValue).toUInt());
+    configForm->ui_qinq_vlan->setText(fieldData(qinq_vlanId, FieldValue).toString());
+}
+
+void QinqProtocol::storeConfigWidget()
+{
+    bool isOk;
+
+    configWidget();
+
+    data.set_is_override_tpid(configForm->cbTpidOverride->isChecked());
+    data.set_vlan_tpid(configForm->leTpid->text().remove(QChar(' ')).toULong(&isOk, BASE_HEX));
+    data.set_vlan_vlan_tag(
+        ((configForm->cmbPrio->currentIndex()   & 0x07) << 13) |
+        ((configForm->cmbCfiDei->currentIndex() & 0x01) << 12) |
+        (configForm->leVlanId->text().toULong(&isOk) & 0x0FFF));
+    data.set_is_override_tpid(configForm->cbVlanTpidOverride->isChecked());
+    data.set_qinq_tpid(configForm->ui_qinq_tpid->text().remove(QChar(' ')).toULong(&isOk, BASE_HEX));
+    data.set_qinq_vlan_tag(
+        ((configForm->ui_qinq_priority->currentIndex()   & 0x07) << 13) |
+        ((configForm->ui_qinq_cfu_dei->currentIndex() & 0x01) << 12) |
+        (configForm->ui_qinq_vlan->text().toULong(&isOk) & 0x0FFF));
+}
+
diff --git a/common/qinq.h b/common/qinq.h
new file mode 100644
index 0000000..2fbf243
--- /dev/null
+++ b/common/qinq.h
@@ -0,0 +1,85 @@
+/*
+Copyright (C) 2013 Prochkaruk M.
+
+This file is part of "Ostinato"
+
+This is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+This program is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with this program.  If not, see <http://www.gnu.org/licenses/>
+*/
+
+#ifndef _Qinq_H
+#define _Qinq_H
+
+#include "abstractprotocol.h"
+
+#include "qinq.pb.h"
+#include "ui_qinq.h"
+
+class QinqConfigForm : public QWidget, public Ui::Qinq
+{
+    Q_OBJECT
+public:
+    QinqConfigForm(QWidget *parent = 0);
+};
+
+class QinqProtocol : public AbstractProtocol
+{
+private:
+    QinqConfigForm    *configForm;
+    enum Qinqfield
+    {
+        qinq_tpid,
+        qinq_prio,
+        qinq_cfiDei,
+        qinq_vlanId,
+        vlan_tpid,
+        vlan_prio,
+        vlan_cfiDei,
+        vlan_vlanId,
+        isOverrideTpid,
+        isOverrideVlanTpid,
+
+        qinq_fieldCount
+    };
+
+protected:
+    OstProto::Qinq    data;
+
+public:
+    QinqProtocol(StreamBase *stream, AbstractProtocol *parent = 0);
+    virtual ~QinqProtocol();
+
+    static AbstractProtocol* createInstance(StreamBase *stream,
+        AbstractProtocol *parent = 0);
+    virtual quint32 protocolNumber() const;
+
+    virtual void protoDataCopyInto(OstProto::Protocol &protocol) const;
+    virtual void protoDataCopyFrom(const OstProto::Protocol &protocol);
+
+    virtual QString name() const;
+    virtual QString shortName() const;
+
+    virtual int    fieldCount() const;
+
+    virtual AbstractProtocol::FieldFlags fieldFlags(int index) const;
+    virtual QVariant fieldData(int index, FieldAttrib attrib,
+               int streamIndex = 0) const;
+    virtual bool setFieldData(int index, const QVariant &value, 
+            FieldAttrib attrib = FieldValue);
+
+    virtual QWidget* configWidget();
+    virtual void loadConfigWidget();
+    virtual void storeConfigWidget();
+};
+
+#endif
diff --git a/common/qinq.proto b/common/qinq.proto
new file mode 100644
index 0000000..1b380ef
--- /dev/null
+++ b/common/qinq.proto
@@ -0,0 +1,35 @@
+/*
+Copyright (C) 2010 Srivats P.
+
+This file is part of "Ostinato"
+
+This is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+This program is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with this program.  If not, see <http://www.gnu.org/licenses/>
+*/
+
+import "protocol.proto";
+
+package OstProto;
+message Qinq {
+
+    optional bool      is_override_tpid = 1;
+    optional bool      is_override_vlan_tpid = 2;
+    optional uint32    qinq_tpid = 3;
+    optional uint32    qinq_vlan_tag = 4; 
+    optional uint32    vlan_tpid = 5;
+    optional uint32    vlan_vlan_tag = 6; 
+}
+
+extend Protocol {
+    optional Qinq qinq = 210;
+}
diff --git a/common/qinq.ui b/common/qinq.ui
new file mode 100644
index 0000000..2e7b979
--- /dev/null
+++ b/common/qinq.ui
@@ -0,0 +1,308 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ui version="4.0">
+ <class>Qinq</class>
+ <widget class="QWidget" name="Qinq">
+  <property name="geometry">
+   <rect>
+    <x>0</x>
+    <y>0</y>
+    <width>810</width>
+    <height>566</height>
+   </rect>
+  </property>
+  <property name="windowTitle">
+   <string>Form</string>
+  </property>
+  <layout class="QHBoxLayout">
+   <property name="spacing">
+    <number>6</number>
+   </property>
+   <property name="margin">
+    <number>9</number>
+   </property>
+   <item>
+    <widget class="QGroupBox" name="groupBox">
+     <property name="title">
+      <string/>
+     </property>
+     <layout class="QGridLayout">
+      <property name="topMargin">
+       <number>0</number>
+      </property>
+      <item row="7" column="0">
+       <widget class="QLineEdit" name="leTpid">
+        <property name="enabled">
+         <bool>false</bool>
+        </property>
+        <property name="inputMask">
+         <string>&gt;HH HH; </string>
+        </property>
+        <property name="text">
+         <string> </string>
+        </property>
+       </widget>
+      </item>
+      <item row="6" column="0">
+       <widget class="QCheckBox" name="cbTpidOverride">
+        <property name="enabled">
+         <bool>true</bool>
+        </property>
+        <property name="text">
+         <string>Override TPID</string>
+        </property>
+       </widget>
+      </item>
+      <item row="7" column="4">
+       <widget class="QLineEdit" name="leVlanId">
+        <property name="enabled">
+         <bool>true</bool>
+        </property>
+        <property name="inputMask">
+         <string>&gt;9999; </string>
+        </property>
+        <property name="text">
+         <string/>
+        </property>
+       </widget>
+      </item>
+      <item row="7" column="1">
+       <widget class="QComboBox" name="cmbPrio">
+        <property name="enabled">
+         <bool>true</bool>
+        </property>
+        <item>
+         <property name="text">
+          <string>0</string>
+         </property>
+        </item>
+        <item>
+         <property name="text">
+          <string>1</string>
+         </property>
+        </item>
+        <item>
+         <property name="text">
+          <string>2</string>
+         </property>
+        </item>
+        <item>
+         <property name="text">
+          <string>3</string>
+         </property>
+        </item>
+        <item>
+         <property name="text">
+          <string>4</string>
+         </property>
+        </item>
+        <item>
+         <property name="text">
+          <string>5</string>
+         </property>
+        </item>
+        <item>
+         <property name="text">
+          <string>6</string>
+         </property>
+        </item>
+        <item>
+         <property name="text">
+          <string>7</string>
+         </property>
+        </item>
+       </widget>
+      </item>
+      <item row="7" column="2">
+       <widget class="QComboBox" name="cmbCfiDei">
+        <property name="enabled">
+         <bool>true</bool>
+        </property>
+        <item>
+         <property name="text">
+          <string>0</string>
+         </property>
+        </item>
+        <item>
+         <property name="text">
+          <string>1</string>
+         </property>
+        </item>
+       </widget>
+      </item>
+      <item row="5" column="0">
+       <widget class="QLabel" name="label">
+        <property name="text">
+         <string>VLAN tagged</string>
+        </property>
+       </widget>
+      </item>
+      <item row="4" column="0">
+       <widget class="QLineEdit" name="ui_qinq_tpid">
+        <property name="enabled">
+         <bool>false</bool>
+        </property>
+        <property name="inputMask">
+         <string>&gt;HH HH; </string>
+        </property>
+        <property name="cursorPosition">
+         <number>5</number>
+        </property>
+       </widget>
+      </item>
+      <item row="4" column="1">
+       <widget class="QComboBox" name="ui_qinq_priority">
+        <item>
+         <property name="text">
+          <string>0</string>
+         </property>
+        </item>
+        <item>
+         <property name="text">
+          <string>1</string>
+         </property>
+        </item>
+        <item>
+         <property name="text">
+          <string>2</string>
+         </property>
+        </item>
+        <item>
+         <property name="text">
+          <string>3</string>
+         </property>
+        </item>
+        <item>
+         <property name="text">
+          <string>4</string>
+         </property>
+        </item>
+        <item>
+         <property name="text">
+          <string>5</string>
+         </property>
+        </item>
+        <item>
+         <property name="text">
+          <string>6</string>
+         </property>
+        </item>
+        <item>
+         <property name="text">
+          <string>7</string>
+         </property>
+        </item>
+       </widget>
+      </item>
+      <item row="4" column="4">
+       <widget class="QLineEdit" name="ui_qinq_vlan">
+        <property name="inputMask">
+         <string>&gt;9999; </string>
+        </property>
+        <property name="text">
+         <string/>
+        </property>
+       </widget>
+      </item>
+      <item row="4" column="2">
+       <widget class="QComboBox" name="ui_qinq_cfu_dei">
+        <item>
+         <property name="text">
+          <string>0</string>
+         </property>
+        </item>
+        <item>
+         <property name="text">
+          <string>1</string>
+         </property>
+        </item>
+       </widget>
+      </item>
+      <item row="2" column="1">
+       <widget class="QLabel" name="label_9">
+        <property name="text">
+         <string>Priority</string>
+        </property>
+       </widget>
+      </item>
+      <item row="2" column="2">
+       <widget class="QLabel" name="label_8">
+        <property name="text">
+         <string>CFI/DEI</string>
+        </property>
+       </widget>
+      </item>
+      <item row="2" column="4">
+       <widget class="QLabel" name="label_10">
+        <property name="text">
+         <string>VLAN</string>
+        </property>
+       </widget>
+      </item>
+      <item row="2" column="0">
+       <widget class="QLabel" name="label_2">
+        <property name="text">
+         <string>Q-in-Q tagged</string>
+        </property>
+       </widget>
+      </item>
+      <item row="3" column="0">
+       <widget class="QCheckBox" name="cbVlanTpidOverride">
+        <property name="text">
+         <string>Override TPID</string>
+        </property>
+       </widget>
+      </item>
+      <item row="8" column="0">
+       <spacer name="verticalSpacer">
+        <property name="orientation">
+         <enum>Qt::Vertical</enum>
+        </property>
+        <property name="sizeHint" stdset="0">
+         <size>
+          <width>20</width>
+          <height>40</height>
+         </size>
+        </property>
+       </spacer>
+      </item>
+     </layout>
+    </widget>
+   </item>
+  </layout>
+ </widget>
+ <resources/>
+ <connections>
+  <connection>
+   <sender>cbTpidOverride</sender>
+   <signal>toggled(bool)</signal>
+   <receiver>leTpid</receiver>
+   <slot>setEnabled(bool)</slot>
+   <hints>
+    <hint type="sourcelabel">
+     <x>85</x>
+     <y>142</y>
+    </hint>
+    <hint type="destinationlabel">
+     <x>85</x>
+     <y>175</y>
+    </hint>
+   </hints>
+  </connection>
+  <connection>
+   <sender>cbVlanTpidOverride</sender>
+   <signal>toggled(bool)</signal>
+   <receiver>ui_qinq_tpid</receiver>
+   <slot>setEnabled(bool)</slot>
+   <hints>
+    <hint type="sourcelabel">
+     <x>37</x>
+     <y>58</y>
+    </hint>
+    <hint type="destinationlabel">
+     <x>38</x>
+     <y>87</y>
+    </hint>
+   </hints>
+  </connection>
+ </connections>
+</ui>
diff --git a/common/stp.cpp b/common/stp.cpp
new file mode 100644
index 0000000..788ca68
--- /dev/null
+++ b/common/stp.cpp
@@ -0,0 +1,744 @@
+/*
+Copyright (C) 2013 Prochkaruk M.
+
+This file is part of "Ostinato"
+
+This is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+This program is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with this program.  If not, see <http://www.gnu.org/licenses/>
+*/
+
+#include <qendian.h>
+
+#include "stp.h"
+
+StpConfigForm::StpConfigForm(QWidget *parent)
+    : QWidget(parent)
+{
+    setupUi(this);
+}
+
+StpProtocol::StpProtocol(StreamBase *stream, AbstractProtocol *parent)
+    : AbstractProtocol(stream, parent)
+{
+    /* The configWidget is created lazily */
+    configForm = NULL;
+}
+
+StpProtocol::~StpProtocol()
+{
+    delete configForm;
+}
+
+AbstractProtocol* StpProtocol::createInstance(StreamBase *stream,
+    AbstractProtocol *parent)
+{
+    return new StpProtocol(stream, parent);
+}
+
+quint32 StpProtocol::protocolNumber() const
+{
+    return OstProto::Protocol::kStpFieldNumber;
+}
+
+void StpProtocol::protoDataCopyInto(OstProto::Protocol &protocol) const
+{
+    protocol.MutableExtension(OstProto::stp)->CopyFrom(data);
+    protocol.mutable_protocol_id()->set_id(protocolNumber());
+}
+
+void StpProtocol::protoDataCopyFrom(const OstProto::Protocol &protocol)
+{
+    if (protocol.protocol_id().id() == protocolNumber() &&
+            protocol.HasExtension(OstProto::stp))
+        data.MergeFrom(protocol.GetExtension(OstProto::stp));
+}
+
+QString StpProtocol::name() const
+{
+    return QString("Spanning Tree Protocol");
+}
+
+QString StpProtocol::shortName() const
+{
+    return QString("STP");
+}
+
+/*!
+  TODO Return the ProtocolIdType for your protocol \n
+
+  If your protocol doesn't have a protocolId field, you don't need to 
+  reimplement this method - the base class implementation will do the 
+  right thing
+*/
+AbstractProtocol::ProtocolIdType StpProtocol::protocolIdType() const
+{
+    return ProtocolIdIp;
+}
+
+/*!
+  TODO Return the protocolId for your protoocol based on the 'type' requested \n
+
+  If not all types are valid for your protocol, handle the valid type(s) 
+  and for the remaining fallback to the base class implementation; if your 
+  protocol doesn't have a protocolId at all, you don't need to reimplement
+  this method - the base class will do the right thing
+*/
+quint32 StpProtocol::protocolId(ProtocolIdType type) const
+{
+    switch(type)
+    {
+        case ProtocolIdLlc: return 0x424203;
+        default:break;
+    }
+
+    return AbstractProtocol::protocolId(type);
+}
+
+int StpProtocol::fieldCount() const
+{
+    return stp_fieldCount;
+}
+
+/*!
+  TODO Edit this function to return the appropriate flags for each field \n
+
+  See AbstractProtocol::FieldFlags for more info
+*/
+AbstractProtocol::FieldFlags StpProtocol::fieldFlags(int index) const
+{
+    AbstractProtocol::FieldFlags flags;
+
+    flags = AbstractProtocol::fieldFlags(index);
+
+    switch (index)
+    {
+        case stp_identifier:
+        case stp_version_identifier:
+        case stp_BPDU_type:
+        case stp_flags:
+        case stp_root_identifier_extension:
+        case stp_root_identifier_id:
+        case stp_root_path_cost:
+        case stp_bridge_identifier_extension:
+        case stp_bridge_identifier_id:
+        case stp_port_identifier:
+        case stp_message_age:
+        case stp_max_age:
+        case stp_hello_time: 
+        case stp_forward_delay:
+            break;
+
+        default:
+            break;
+    }
+
+    return flags;
+}
+
+/*!
+TODO: Edit this function to return the data for each field
+
+See AbstractProtocol::fieldData() for more info
+*/
+QVariant StpProtocol::fieldData(int index, FieldAttrib attrib,
+        int streamIndex) const
+{
+    switch (index)
+    {
+        case stp_identifier:
+        {
+            switch(attrib)
+            {
+                case FieldName:
+                    return QString("Protocol identifier");
+                case FieldValue:
+                    return data.protocol_identifier();
+                case FieldTextValue:
+                {
+                    // TO SHOW IN DEC: return data.protocol_identifier();
+                    return QString("0x%1").arg(data.protocol_identifier(), 4, BASE_HEX, QChar('0'));
+                }
+                case FieldFrameValue:
+                {
+                    QByteArray fv;
+                    fv.resize(2);
+                    qToBigEndian((quint16) data.protocol_identifier(),(uchar*) fv.data());
+                    return fv;
+                }
+                case FieldBitSize:
+                    return 16;
+                default:
+                    break;
+            }
+            break;
+        }
+
+        case stp_version_identifier:
+        {
+            switch(attrib)
+            {
+                case FieldName:            
+                    return QString("Protocol version identifier");
+                case FieldValue:
+                    return data.protocol_version_identifier();
+                case FieldTextValue:
+                    return QString("0x%1").arg(data.protocol_version_identifier(), 2, BASE_HEX, QChar('0'));
+                case FieldFrameValue:
+                    return QByteArray(1, (char) data.protocol_version_identifier());
+                case FieldBitSize:
+                    return 8;
+                default:
+                    break;
+            }
+            break;
+        }
+
+        case stp_BPDU_type:
+        {
+            switch(attrib)
+            {
+                case FieldName:            
+                    return QString("BPDU type");
+                case FieldValue:
+                    return data.protocol_bpdu_type();
+                case FieldTextValue:
+                    return QString("0x%1").arg(data.protocol_bpdu_type(), 2, BASE_HEX, QChar('0'));
+                case FieldFrameValue:
+                    return QByteArray(1, (char) data.protocol_bpdu_type());
+                case FieldBitSize:
+                    return 8;
+                default:
+                    break;
+            }
+            break;
+        }
+
+        case stp_flags:
+        {
+            switch(attrib)
+            {
+                case FieldName:
+                    return QString("Protocol flag");
+                case FieldValue:
+                    return data.protocol_flags();
+                case FieldTextValue:
+                     return QString("0x%1").arg(data.protocol_flags(), 2, BASE_HEX, QChar('0'));
+                case FieldFrameValue:
+                    return QByteArray(1, (char) data.protocol_flags());
+                case FieldBitSize:
+                    return 8;
+                default:
+                    break;
+            }
+
+            break;
+        }
+
+        case stp_root_identifier_extension:
+        {
+            switch(attrib)
+            {
+                case FieldName:
+                    return QString("Root Bridge System ID Extension and Priority");
+                case FieldValue:
+                    return data.protocol_root_system_id_extension();
+                case FieldTextValue:
+                    return QString("0x%1").arg(data.protocol_root_system_id_extension(), 4, BASE_HEX, QChar('0'));
+                case FieldFrameValue:
+                {
+                    QByteArray fv;
+                    fv.resize(2);
+                    qToBigEndian((quint16) data.protocol_root_system_id_extension(),(uchar*) fv.data());
+                    return fv;
+                }
+                case FieldBitSize:
+                    return 16;
+                default:
+                    break;
+            }
+            break;
+        }
+        case stp_root_identifier_id:
+        {
+            quint64 root_system_id = data.protocol_root_system_id();
+            switch(attrib)
+            {
+                case FieldName:
+                    return QString("Root Bridge System ID");
+                case FieldValue:
+                    return root_system_id;
+                case FieldTextValue:
+                    return QString("0x%1").arg(root_system_id, 12, BASE_HEX, QChar('0'));
+                case FieldFrameValue:
+                {
+                    QByteArray fv;
+                    fv.resize(8);
+                    qToBigEndian(root_system_id,(uchar*) fv.data());
+                    fv.remove(0, 2);
+                    return fv;
+                }
+                case FieldBitSize:
+                    return 48;
+                default:
+                    break;
+            }
+            break;
+        }
+        case stp_root_path_cost:
+        {
+            quint64 root_path = data.protocol_root_path_cost();
+            switch(attrib)
+            {
+                case FieldName:            
+                    return QString("Protocol root path cost");
+                case FieldValue:
+                    return root_path;
+                case FieldTextValue:
+                    return root_path;
+                case FieldFrameValue:
+                    {
+                        QByteArray fv;
+                        fv.resize(8);
+                        qToBigEndian(root_path,(uchar*) fv.data());
+                        fv.remove(0, 4);
+                        return fv;
+                    }
+                case FieldBitSize:
+                    return 32;
+                default:
+                    break;
+            }
+            break;
+        }
+
+
+        case stp_bridge_identifier_extension:
+        {
+            switch(attrib)
+            {
+                case FieldName:
+                    return QString("Bridge System ID Priority and Extension");
+                case FieldValue:
+                    return data.protocol_bridge_identifier_id_extension();
+                case FieldTextValue:
+                    return QString("0x%1").arg(data.protocol_bridge_identifier_id_extension(), 4, BASE_HEX, QChar('0'));
+                case FieldFrameValue:
+                {
+                    QByteArray fv;
+                    fv.resize(2);
+                    qToBigEndian((quint16) data.protocol_bridge_identifier_id_extension(),(uchar*) fv.data());
+                    return fv;
+                }
+                case FieldBitSize:
+                    return 16;
+                default:
+                    break;
+            }
+            break;
+        }
+        case stp_bridge_identifier_id:
+        {
+            quint64 bridge_system_id = data.protocol_bridge_identifier_id();
+            switch(attrib)
+            {
+                case FieldName:
+                    return QString("Bridge System ID");
+                case FieldValue:
+                    return bridge_system_id;
+                case FieldTextValue:
+                    return QString("0x%1").arg(bridge_system_id, 12, BASE_HEX, QChar('0'));
+                case FieldFrameValue:
+                {
+                    QByteArray fv;
+                    fv.resize(8);
+                    qToBigEndian(bridge_system_id,(uchar*) fv.data());
+                    fv.remove(0, 2);
+                    return fv;
+                }
+                case FieldBitSize:
+                    return 48;
+                default:
+                    break;
+            }
+            break;
+        }
+        case stp_port_identifier:
+        {
+            switch(attrib)
+            {
+                case FieldName:            
+                    return QString("Protocol port identifier");
+                case FieldValue:
+                    return data.protocol_port_identifier();
+                case FieldTextValue:
+                    return QString("0x%1").arg(data.protocol_port_identifier(), 4, BASE_HEX, QChar('0'));
+                case FieldFrameValue:
+                {
+                    QByteArray fv;
+                    fv.resize(2);
+                    qToBigEndian((quint16) data.protocol_port_identifier(),(uchar*) fv.data());
+                    return fv;
+                }
+                case FieldBitSize:
+                    return 16;
+                default:
+                    break;
+            }
+            break;
+        }
+        case stp_message_age:
+        {
+            switch(attrib)
+            {
+                case FieldName:            
+                    return QString("Message age");
+                case FieldValue:
+                    return data.protocol_message_age();
+                case FieldTextValue:
+                    return QString("0x%1").arg(data.protocol_message_age(), 4, BASE_HEX, QChar('0'));
+                case FieldFrameValue:
+                {
+                    QByteArray fv;
+                    fv.resize(2);
+                    qToBigEndian((quint16) (data.protocol_message_age()),(uchar*) fv.data());
+                    return fv;
+                }
+                case FieldBitSize:
+                    return 16;
+                default:
+                    break;
+            }
+            break;
+        }
+        case stp_max_age:
+        {
+            switch(attrib)
+            {
+                case FieldName:            
+                    return QString("Max age");
+                case FieldValue:
+                    return data.protocol_max_age();
+                case FieldTextValue:
+                    return QString("0x%1").arg(data.protocol_max_age(), 4, BASE_HEX, QChar('0'));
+                case FieldFrameValue:
+                {
+                    QByteArray fv;
+                    fv.resize(2);
+                    qToBigEndian((quint16) data.protocol_max_age(),(uchar*) fv.data());
+                    return fv;
+                }
+                case FieldBitSize:
+                    return 16;
+                default:
+                    break;
+            }
+            break;
+        }
+        case stp_hello_time: 
+        {
+            switch(attrib)
+            {
+                case FieldName:            
+                    return QString("Hello time");
+                case FieldValue:
+                    return data.protocol_hello_time();
+                case FieldTextValue:
+                    return QString("0x%1").arg(data.protocol_hello_time(), 4, BASE_HEX, QChar('0'));
+                case FieldFrameValue:
+                {
+                    QByteArray fv;
+                    fv.resize(2);
+                    qToBigEndian((quint16) data.protocol_hello_time(),(uchar*) fv.data());
+                    return fv;
+                }
+                case FieldBitSize:
+                    return 16;
+                default:
+                    break;
+            }
+            break;
+        }
+        case stp_forward_delay:
+        {
+            switch(attrib)
+            {
+                case FieldName:            
+                    return QString("Forward delay");
+                case FieldValue:
+                    return data.protocol_forward_delay();
+                case FieldTextValue:
+                    return QString("0x%1").arg(data.protocol_forward_delay(), 4, BASE_HEX, QChar('0'));
+                case FieldFrameValue:
+                {
+                    QByteArray fv;
+                    fv.resize(2);
+                    qToBigEndian((quint16) data.protocol_forward_delay(),(uchar*) fv.data());
+                    return fv;
+                }
+                case FieldBitSize:
+                    return 16;
+                default:
+                    break;
+            }
+            break;
+        }
+
+        default:
+            break;
+    }
+
+    return AbstractProtocol::fieldData(index, attrib, streamIndex);
+}
+
+/*!
+TODO: Edit this function to set the data for each field
+
+See AbstractProtocol::setFieldData() for more info
+*/
+bool StpProtocol::setFieldData(int index, const QVariant &value, 
+        FieldAttrib attrib)
+{
+    bool isOk = false;
+    if (attrib != FieldValue)
+        goto _exit;
+
+    switch (index)
+    {
+        case stp_identifier:
+        {
+            uint a = value.toUInt(&isOk);
+            if (isOk)
+                data.set_protocol_identifier(a);
+            break;
+        }
+        case stp_version_identifier:
+        {
+            uint a = value.toUInt(&isOk);
+            if (isOk)
+                data.set_protocol_version_identifier(a);
+            break;
+        }
+        case stp_BPDU_type:
+        {
+            uint a = value.toUInt(&isOk);
+            if (isOk)
+                data.set_protocol_bpdu_type(a);
+            break;
+        }
+        case stp_flags:
+        {
+            uint a = value.toUInt(&isOk);
+            if (isOk)
+                data.set_protocol_flags(a);
+            break;
+        }
+        case stp_root_identifier_extension:
+        {
+            uint a = value.toUInt(&isOk);
+            if (isOk)
+                data.set_protocol_root_system_id_extension(a);
+            break;
+        }
+        case stp_root_identifier_id:
+        {
+            quint32 a = value.toUInt(&isOk);
+            if (isOk)
+                data.set_protocol_root_system_id(a);
+            break;
+        }
+        case stp_root_path_cost:
+        {
+            quint32 a = value.toUInt(&isOk);
+            if (isOk)
+                data.set_protocol_root_path_cost(a);
+            break;
+        }
+        case stp_bridge_identifier_extension:
+        {
+            uint a = value.toUInt(&isOk);
+            if (isOk)
+                data.set_protocol_bridge_identifier_id_extension(a);
+            break;
+        }
+        case stp_bridge_identifier_id:
+        {
+            quint32 a = value.toUInt(&isOk);
+            if (isOk)
+                data.set_protocol_bridge_identifier_id(a);
+            break;
+        }
+        case stp_port_identifier:
+        {
+            uint a = value.toUInt(&isOk);
+            if (isOk)
+                data.set_protocol_port_identifier(a);
+            break;
+        }
+        case stp_message_age:
+        {
+            uint a = value.toUInt(&isOk);
+            if (isOk)
+                data.set_protocol_message_age(a);
+            break;
+        }
+        case stp_max_age:
+        {
+            uint a = value.toUInt(&isOk);
+            if (isOk)
+                data.set_protocol_max_age(a);
+            break;
+        }
+        case stp_hello_time:
+        {
+            uint a = value.toUInt(&isOk);
+            if (isOk)
+                data.set_protocol_hello_time(a);
+            break;
+        }
+        case stp_forward_delay:
+        {
+            uint a = value.toUInt(&isOk);
+            if (isOk)
+                data.set_protocol_forward_delay(a);
+            break;
+        }
+        default:
+            break;
+    }
+
+_exit:
+    return isOk;
+}
+
+/*!
+  TODO: Return the protocol frame size in bytes\n
+
+  If your protocol has a fixed size - you don't need to reimplement this; the
+  base class implementation is good enough
+*/
+int StpProtocol::protocolFrameSize(int streamIndex) const
+{
+    return AbstractProtocol::protocolFrameSize(streamIndex);
+}
+
+/*!
+  TODO: If your protocol has any variable fields, return true \n
+
+  Otherwise you don't need to reimplement this method - the base class always
+  returns false
+*/
+bool StpProtocol::isProtocolFrameValueVariable() const
+{
+    return false;
+}
+
+/*!
+  TODO: If your protocol frame size can vary across pkts of the same stream,
+  return true \n
+
+  Otherwise you don't need to reimplement this method - the base class always
+  returns false
+*/
+bool StpProtocol::isProtocolFrameSizeVariable() const
+{
+    return false;
+}
+
+/*!
+  TODO: If your protocol frame has any variable fields or has a variable
+  size, return the minimum number of frames required to vary the fields \n
+
+  Otherwise you don't need to reimplement this method - the base class always
+  returns 1
+*/
+int StpProtocol::protocolFrameVariableCount() const
+{
+    return 103;
+}
+int StpProtocol::frameFieldCount() const
+{
+    int count = AbstractProtocol::frameFieldCount();
+    return count;
+}
+QWidget* StpProtocol::configWidget()
+{
+    /* Lazy creation of the configWidget */
+    if (configForm == NULL)
+    {
+        configForm = new StpConfigForm;
+        loadConfigWidget();
+    }
+
+    return configForm;
+}
+
+/*!
+TODO: Edit this function to load each field's data into the config Widget
+
+See AbstractProtocol::loadConfigWidget() for more info
+*/
+void StpProtocol::loadConfigWidget()
+{
+    quint64 root_system= data.protocol_root_system_id();
+    quint64 bridge_system= data.protocol_bridge_identifier_id();
+    quint64 root_path= data.protocol_root_path_cost();
+    configWidget();
+    configForm->ui_protocol_id->setText(uintToHexStr(data.protocol_identifier(), 2));
+    configForm->ui_version_id->setText(uintToHexStr(data.protocol_version_identifier(),1));
+    configForm->ui_protocol_type->setText(uintToHexStr(data.protocol_bpdu_type(),1));
+    configForm->ui_flags->setText(uintToHexStr(data.protocol_flags(),1));
+
+    configForm->ui_root_system_id_ex->setText(uintToHexStr(data.protocol_root_system_id_extension(),2));
+    configForm->ui_root_system_id->setText(uintToHexStr(root_system,6));
+
+    configForm->ui_root_path->setText(uintToHexStr(root_path,4));
+
+    configForm->ui_bridge_system_id_ex->setText(uintToHexStr(data.protocol_bridge_identifier_id_extension(),2));
+    configForm->ui_bridge_system_id->setText(uintToHexStr(bridge_system,6));
+
+    configForm->ui_port_id->setText(uintToHexStr(data.protocol_port_identifier(),2));
+    configForm->ui_message_age->setText(uintToHexStr(data.protocol_message_age(),2));
+    configForm->ui_max_age->setText(uintToHexStr(data.protocol_max_age(),2));
+    configForm->ui_hello_time->setText(uintToHexStr(data.protocol_hello_time(),2));
+    configForm->ui_forward_delay->setText(uintToHexStr(data.protocol_forward_delay(),2));
+}
+
+/*!
+TODO: Edit this function to store each field's data from the config Widget
+
+See AbstractProtocol::storeConfigWidget() for more info
+*/
+void StpProtocol::storeConfigWidget()
+{
+    bool isOk;
+    configWidget();
+    data.set_protocol_identifier(configForm->ui_protocol_id->text().remove(QChar(' ')).toULong(&isOk, 16));
+    data.set_protocol_version_identifier(configForm->ui_version_id->text().remove(QChar(' ')).toULong(&isOk, 16));
+    data.set_protocol_bpdu_type(configForm->ui_protocol_type->text().remove(QChar(' ')).toULong(&isOk, 16));
+    data.set_protocol_flags(configForm->ui_flags->text().remove(QChar(' ')).toULong(&isOk, 16));
+
+    data.set_protocol_root_system_id_extension(configForm->ui_root_system_id_ex->text().remove(QChar(' ')).toULong(&isOk, 16));
+    data.set_protocol_root_system_id(configForm->ui_root_system_id->text().remove(QChar(':')).toULongLong(&isOk, 16));
+
+    data.set_protocol_root_path_cost(configForm->ui_root_path->text().remove(QChar(' ')).toULong(&isOk, 16));
+
+    data.set_protocol_bridge_identifier_id_extension(configForm->ui_bridge_system_id_ex->text().remove(QChar(' ')).toULong(&isOk, 16));
+    data.set_protocol_bridge_identifier_id(configForm->ui_bridge_system_id->text().remove(QChar(':')).toULongLong(&isOk, 16));
+
+    data.set_protocol_port_identifier(configForm->ui_port_id->text().remove(QChar(' ')).toULong(&isOk, 16));
+    data.set_protocol_message_age(configForm->ui_message_age->text().remove(QChar(' ')).toULong(&isOk, 16));
+    data.set_protocol_max_age(configForm->ui_max_age->text().remove(QChar(' ')).toULong(&isOk, 16));
+    data.set_protocol_hello_time(configForm->ui_hello_time->text().remove(QChar(' ')).toULong(&isOk, 16));
+    data.set_protocol_forward_delay(configForm->ui_forward_delay->text().remove(QChar(' ')).toULong(&isOk, 16));
+}
+
diff --git a/common/stp.h b/common/stp.h
new file mode 100644
index 0000000..77e636c
--- /dev/null
+++ b/common/stp.h
@@ -0,0 +1,106 @@
+/*
+Copyright (C) 2010 Srivats P.
+
+This file is part of "Ostinato"
+
+This is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+This program is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with this program.  If not, see <http://www.gnu.org/licenses/>
+*/
+
+#ifndef _STP_H
+#define _STP_H
+
+#include "stp.pb.h"
+#include "ui_stp.h"
+
+#include "abstractprotocol.h"
+
+/* 
+Stp Protocol Frame Format -
+    +-----+------+------+------+------+------+-----+------+------+------+------+------+
+    | LLC |  ID  |  VID | BPDU | Flag | Root |Path |Bridge| AGE  |MAXAGE|HELLO |DELAY |
+    | (24)| (16) |  (8) | (8)  | (8)  | (64) |(32) | (64) | (16) | (16) | (16) | (16) |
+    +-----+------+------+------+------+------+-----+------+------+------+------+------+
+Figures in brackets represent field width in bits
+*/
+
+class StpConfigForm : public QWidget, public Ui::Stp
+{
+    Q_OBJECT
+public:
+    StpConfigForm(QWidget *parent = 0);
+private slots:
+};
+
+class StpProtocol : public AbstractProtocol
+{
+private:
+    OstProto::Stp    data;
+    StpConfigForm    *configForm;
+    enum stpfield
+    {
+        stp_identifier = 0,
+        stp_version_identifier,
+        stp_BPDU_type,
+        stp_flags,
+        stp_root_identifier_extension,
+        stp_root_identifier_id,
+        stp_root_path_cost,
+        stp_bridge_identifier_extension,
+        stp_bridge_identifier_id,
+        stp_port_identifier,
+        stp_message_age,
+        stp_max_age,
+        stp_hello_time, 
+        stp_forward_delay,
+
+        stp_fieldCount
+    };
+
+public:
+    StpProtocol(StreamBase *stream, AbstractProtocol *parent = 0);
+    virtual ~StpProtocol();
+
+    static AbstractProtocol* createInstance(StreamBase *stream,
+        AbstractProtocol *parent = 0);
+    virtual quint32 protocolNumber() const;
+
+    virtual void protoDataCopyInto(OstProto::Protocol &protocol) const;
+    virtual void protoDataCopyFrom(const OstProto::Protocol &protocol);
+
+    virtual ProtocolIdType protocolIdType() const;
+    virtual quint32 protocolId(ProtocolIdType type) const;
+
+    virtual QString name() const;
+    virtual QString shortName() const;
+
+    virtual int fieldCount() const;
+    virtual int frameFieldCount() const;
+
+    virtual AbstractProtocol::FieldFlags fieldFlags(int index) const;
+    virtual QVariant fieldData(int index, FieldAttrib attrib,
+               int streamIndex = 0) const;
+    virtual bool setFieldData(int index, const QVariant &value, 
+            FieldAttrib attrib = FieldValue);
+    virtual int protocolFrameSize(int streamIndex = 0) const;
+
+    virtual bool isProtocolFrameValueVariable() const;
+    virtual bool isProtocolFrameSizeVariable() const;
+    virtual int protocolFrameVariableCount() const;
+
+    virtual QWidget* configWidget();
+    virtual void loadConfigWidget();
+    virtual void storeConfigWidget();
+};
+
+#endif
diff --git a/common/stp.proto b/common/stp.proto
new file mode 100644
index 0000000..530b871
--- /dev/null
+++ b/common/stp.proto
@@ -0,0 +1,45 @@
+/*
+Copyright (C) 2013 Prochkaruk M.
+
+This file is part of "Ostinato"
+
+This is free software: you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation, either version 3 of the License, or
+(at your option) any later version.
+
+This program is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with this program.  If not, see <http://www.gnu.org/licenses/>
+*/
+
+import "protocol.proto";
+
+package OstProto;
+
+// Spanning Tree Protocol
+message Stp {
+
+    optional uint32    		protocol_identifier = 1 [default = 0x0000];
+    optional uint32    		protocol_version_identifier = 2 [default = 0x00];
+    optional uint32    		protocol_bpdu_type = 3 [default = 0x00];
+    optional uint32     	protocol_flags = 4;
+    optional uint32         protocol_root_system_id_extension = 5;
+    optional uint64         protocol_root_system_id = 6;
+    optional uint64    		protocol_root_path_cost = 7;
+    optional uint32         protocol_bridge_identifier_id_extension = 8;
+    optional uint64         protocol_bridge_identifier_id = 9;
+    optional uint32    		protocol_port_identifier = 10;
+    optional uint32    		protocol_message_age = 11;
+    optional uint32   		protocol_max_age = 12;
+    optional uint32    		protocol_hello_time = 13;
+    optional uint32    		protocol_forward_delay = 14;
+}
+
+extend Protocol {
+    optional Stp stp = 209;
+}
diff --git a/common/stp.ui b/common/stp.ui
new file mode 100644
index 0000000..d7c56dc
--- /dev/null
+++ b/common/stp.ui
@@ -0,0 +1,318 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ui version="4.0">
+ <class>Stp</class>
+ <widget class="QWidget" name="Stp">
+  <property name="geometry">
+   <rect>
+    <x>0</x>
+    <y>0</y>
+    <width>421</width>
+    <height>596</height>
+   </rect>
+  </property>
+  <property name="windowTitle">
+   <string>Form</string>
+  </property>
+  <layout class="QGridLayout">
+   <item row="20" column="0">
+    <widget class="QLabel" name="label_11">
+     <property name="text">
+      <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt; font-weight:600; text-decoration: underline;&quot;&gt;Bridge ID&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+     </property>
+    </widget>
+   </item>
+   <item row="19" column="2" colspan="3">
+    <widget class="QLineEdit" name="ui_root_system_id">
+     <property name="inputMask">
+      <string>&gt;HH:HH:HH:HH:HH:HH; </string>
+     </property>
+    </widget>
+   </item>
+   <item row="12" column="2" colspan="3">
+    <widget class="QLineEdit" name="ui_hello_time">
+     <property name="inputMask">
+      <string>&gt;HHHH; </string>
+     </property>
+     <property name="text">
+      <string/>
+     </property>
+    </widget>
+   </item>
+   <item row="10" column="0">
+    <widget class="QLabel" name="label_6">
+     <property name="text">
+      <string>Message age</string>
+     </property>
+    </widget>
+   </item>
+   <item row="0" column="0">
+    <widget class="QLabel" name="label_22">
+     <property name="text">
+      <string>Protocol Identifer</string>
+     </property>
+     <property name="alignment">
+      <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignVCenter</set>
+     </property>
+    </widget>
+   </item>
+   <item row="1" column="0">
+    <widget class="QLabel" name="label_24">
+     <property name="text">
+      <string>Version Identifer</string>
+     </property>
+     <property name="alignment">
+      <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignVCenter</set>
+     </property>
+     <property name="buddy">
+      <cstring>ui_version_id</cstring>
+     </property>
+    </widget>
+   </item>
+   <item row="2" column="0">
+    <widget class="QLabel" name="label_27">
+     <property name="text">
+      <string>BPDU Type</string>
+     </property>
+     <property name="alignment">
+      <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignVCenter</set>
+     </property>
+    </widget>
+   </item>
+   <item row="0" column="2" colspan="3">
+    <widget class="QLineEdit" name="ui_protocol_id">
+     <property name="enabled">
+      <bool>true</bool>
+     </property>
+     <property name="inputMask">
+      <string>&gt;HH HH; </string>
+     </property>
+     <property name="text">
+      <string> </string>
+     </property>
+     <property name="maxLength">
+      <number>5</number>
+     </property>
+     <property name="cursorPosition">
+      <number>5</number>
+     </property>
+    </widget>
+   </item>
+   <item row="1" column="2" colspan="3">
+    <widget class="QLineEdit" name="ui_version_id">
+     <property name="enabled">
+      <bool>true</bool>
+     </property>
+     <property name="inputMask">
+      <string>&gt;HH; </string>
+     </property>
+     <property name="text">
+      <string/>
+     </property>
+     <property name="maxLength">
+      <number>2</number>
+     </property>
+     <property name="cursorPosition">
+      <number>2</number>
+     </property>
+    </widget>
+   </item>
+   <item row="2" column="2" colspan="3">
+    <widget class="QLineEdit" name="ui_protocol_type">
+     <property name="inputMask">
+      <string>&gt;HH; </string>
+     </property>
+     <property name="text">
+      <string/>
+     </property>
+    </widget>
+   </item>
+   <item row="11" column="0">
+    <widget class="QLabel" name="label_7">
+     <property name="text">
+      <string>Max age</string>
+     </property>
+    </widget>
+   </item>
+   <item row="13" column="0">
+    <widget class="QLabel" name="label_9">
+     <property name="text">
+      <string>Forward delay</string>
+     </property>
+    </widget>
+   </item>
+   <item row="4" column="0">
+    <widget class="QLabel" name="label">
+     <property name="layoutDirection">
+      <enum>Qt::LeftToRight</enum>
+     </property>
+     <property name="text">
+      <string>Flags</string>
+     </property>
+    </widget>
+   </item>
+   <item row="24" column="3">
+    <spacer>
+     <property name="orientation">
+      <enum>Qt::Vertical</enum>
+     </property>
+     <property name="sizeHint" stdset="0">
+      <size>
+       <width>20</width>
+       <height>40</height>
+      </size>
+     </property>
+    </spacer>
+   </item>
+   <item row="9" column="0">
+    <widget class="QLabel" name="label_5">
+     <property name="text">
+      <string>Port ID</string>
+     </property>
+    </widget>
+   </item>
+   <item row="9" column="2" colspan="3">
+    <widget class="QLineEdit" name="ui_port_id">
+     <property name="inputMask">
+      <string>&gt;HHHH; </string>
+     </property>
+     <property name="text">
+      <string/>
+     </property>
+    </widget>
+   </item>
+   <item row="7" column="0">
+    <widget class="QLabel" name="label_3">
+     <property name="text">
+      <string>Root Path</string>
+     </property>
+    </widget>
+   </item>
+   <item row="7" column="2" colspan="3">
+    <widget class="QLineEdit" name="ui_root_path">
+     <property name="inputMask">
+      <string>&gt;HH HH HH HH; </string>
+     </property>
+     <property name="text">
+      <string>   </string>
+     </property>
+    </widget>
+   </item>
+   <item row="11" column="2" colspan="3">
+    <widget class="QLineEdit" name="ui_max_age">
+     <property name="inputMask">
+      <string>&gt;HHHH; </string>
+     </property>
+     <property name="text">
+      <string/>
+     </property>
+    </widget>
+   </item>
+   <item row="10" column="2" colspan="3">
+    <widget class="QLineEdit" name="ui_message_age">
+     <property name="inputMask">
+      <string>&gt;HHHH; </string>
+     </property>
+     <property name="text">
+      <string/>
+     </property>
+    </widget>
+   </item>
+   <item row="13" column="2" colspan="3">
+    <widget class="QLineEdit" name="ui_forward_delay">
+     <property name="inputMask">
+      <string>&gt;HHHH; </string>
+     </property>
+     <property name="text">
+      <string/>
+     </property>
+    </widget>
+   </item>
+   <item row="12" column="0">
+    <widget class="QLabel" name="label_8">
+     <property name="text">
+      <string>Hello time</string>
+     </property>
+    </widget>
+   </item>
+   <item row="4" column="2" colspan="3">
+    <widget class="QLineEdit" name="ui_flags">
+     <property name="inputMask">
+      <string>&gt;HH; </string>
+     </property>
+     <property name="text">
+      <string/>
+     </property>
+    </widget>
+   </item>
+   <item row="19" column="0">
+    <widget class="QLabel" name="label_13">
+     <property name="text">
+      <string>RootB System ID</string>
+     </property>
+    </widget>
+   </item>
+   <item row="23" column="2" colspan="3">
+    <widget class="QLineEdit" name="ui_bridge_system_id">
+     <property name="inputMask">
+      <string>&gt;HH:HH:HH:HH:HH:HH; </string>
+     </property>
+    </widget>
+   </item>
+   <item row="23" column="0">
+    <widget class="QLabel" name="label_15">
+     <property name="text">
+      <string>Bridge System ID</string>
+     </property>
+    </widget>
+   </item>
+   <item row="16" column="0">
+    <widget class="QLabel" name="label_10">
+     <property name="text">
+      <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p&gt;&lt;span style=&quot; font-size:12pt; font-weight:600; text-decoration: underline;&quot;&gt;Root ID&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+     </property>
+     <property name="alignment">
+      <set>Qt::AlignLeading|Qt::AlignLeft|Qt::AlignVCenter</set>
+     </property>
+     <property name="wordWrap">
+      <bool>false</bool>
+     </property>
+    </widget>
+   </item>
+   <item row="17" column="0" rowspan="2">
+    <widget class="QLabel" name="label_12">
+     <property name="text">
+      <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p align=&quot;center&quot;&gt;&lt;span style=&quot; font-size:9pt;&quot;&gt;Root Bridge&lt;br/&gt;System ID&lt;br/&gt;Priority and Extension&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+     </property>
+    </widget>
+   </item>
+   <item row="17" column="2" rowspan="2" colspan="3">
+    <widget class="QLineEdit" name="ui_root_system_id_ex">
+     <property name="inputMask">
+      <string>&gt;HH HH; </string>
+     </property>
+    </widget>
+   </item>
+   <item row="21" column="0" rowspan="2">
+    <widget class="QLabel" name="label_4">
+     <property name="text">
+      <string>&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;p align=&quot;center&quot;&gt;&lt;span style=&quot; font-size:9pt;&quot;&gt;Bridge&lt;br/&gt;System ID&lt;br/&gt;Priority and Extension&lt;/span&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</string>
+     </property>
+    </widget>
+   </item>
+   <item row="21" column="2" rowspan="2" colspan="3">
+    <widget class="QLineEdit" name="ui_bridge_system_id_ex">
+     <property name="inputMask">
+      <string>&gt;HH HH; </string>
+     </property>
+    </widget>
+   </item>
+  </layout>
+ </widget>
+ <tabstops>
+  <tabstop>ui_version_id</tabstop>
+  <tabstop>ui_protocol_id</tabstop>
+  <tabstop>ui_protocol_type</tabstop>
+ </tabstops>
+ <resources/>
+ <connections/>
+</ui>
-- 
1.8.4.2

